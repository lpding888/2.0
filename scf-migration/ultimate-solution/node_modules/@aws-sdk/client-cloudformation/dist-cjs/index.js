'use strict';

var middlewareHostHeader = require('@aws-sdk/middleware-host-header');
var middlewareLogger = require('@aws-sdk/middleware-logger');
var middlewareRecursionDetection = require('@aws-sdk/middleware-recursion-detection');
var middlewareUserAgent = require('@aws-sdk/middleware-user-agent');
var configResolver = require('@smithy/config-resolver');
var core = require('@smithy/core');
var middlewareContentLength = require('@smithy/middleware-content-length');
var middlewareEndpoint = require('@smithy/middleware-endpoint');
var middlewareRetry = require('@smithy/middleware-retry');
var smithyClient = require('@smithy/smithy-client');
var httpAuthSchemeProvider = require('./auth/httpAuthSchemeProvider');
var runtimeConfig = require('./runtimeConfig');
var regionConfigResolver = require('@aws-sdk/region-config-resolver');
var protocolHttp = require('@smithy/protocol-http');
var middlewareSerde = require('@smithy/middleware-serde');
var core$1 = require('@aws-sdk/core');
var uuid = require('@smithy/uuid');
var utilWaiter = require('@smithy/util-waiter');

const resolveClientEndpointParameters = (options) => {
    return Object.assign(options, {
        useDualstackEndpoint: options.useDualstackEndpoint ?? false,
        useFipsEndpoint: options.useFipsEndpoint ?? false,
        defaultSigningName: "cloudformation",
    });
};
const commonParams = {
    UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
    Endpoint: { type: "builtInParams", name: "endpoint" },
    Region: { type: "builtInParams", name: "region" },
    UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" },
};

const getHttpAuthExtensionConfiguration = (runtimeConfig) => {
    const _httpAuthSchemes = runtimeConfig.httpAuthSchemes;
    let _httpAuthSchemeProvider = runtimeConfig.httpAuthSchemeProvider;
    let _credentials = runtimeConfig.credentials;
    return {
        setHttpAuthScheme(httpAuthScheme) {
            const index = _httpAuthSchemes.findIndex((scheme) => scheme.schemeId === httpAuthScheme.schemeId);
            if (index === -1) {
                _httpAuthSchemes.push(httpAuthScheme);
            }
            else {
                _httpAuthSchemes.splice(index, 1, httpAuthScheme);
            }
        },
        httpAuthSchemes() {
            return _httpAuthSchemes;
        },
        setHttpAuthSchemeProvider(httpAuthSchemeProvider) {
            _httpAuthSchemeProvider = httpAuthSchemeProvider;
        },
        httpAuthSchemeProvider() {
            return _httpAuthSchemeProvider;
        },
        setCredentials(credentials) {
            _credentials = credentials;
        },
        credentials() {
            return _credentials;
        },
    };
};
const resolveHttpAuthRuntimeConfig = (config) => {
    return {
        httpAuthSchemes: config.httpAuthSchemes(),
        httpAuthSchemeProvider: config.httpAuthSchemeProvider(),
        credentials: config.credentials(),
    };
};

const resolveRuntimeExtensions = (runtimeConfig, extensions) => {
    const extensionConfiguration = Object.assign(regionConfigResolver.getAwsRegionExtensionConfiguration(runtimeConfig), smithyClient.getDefaultExtensionConfiguration(runtimeConfig), protocolHttp.getHttpHandlerExtensionConfiguration(runtimeConfig), getHttpAuthExtensionConfiguration(runtimeConfig));
    extensions.forEach((extension) => extension.configure(extensionConfiguration));
    return Object.assign(runtimeConfig, regionConfigResolver.resolveAwsRegionExtensionConfiguration(extensionConfiguration), smithyClient.resolveDefaultRuntimeConfig(extensionConfiguration), protocolHttp.resolveHttpHandlerRuntimeConfig(extensionConfiguration), resolveHttpAuthRuntimeConfig(extensionConfiguration));
};

class CloudFormationClient extends smithyClient.Client {
    config;
    constructor(...[configuration]) {
        const _config_0 = runtimeConfig.getRuntimeConfig(configuration || {});
        super(_config_0);
        this.initConfig = _config_0;
        const _config_1 = resolveClientEndpointParameters(_config_0);
        const _config_2 = middlewareUserAgent.resolveUserAgentConfig(_config_1);
        const _config_3 = middlewareRetry.resolveRetryConfig(_config_2);
        const _config_4 = configResolver.resolveRegionConfig(_config_3);
        const _config_5 = middlewareHostHeader.resolveHostHeaderConfig(_config_4);
        const _config_6 = middlewareEndpoint.resolveEndpointConfig(_config_5);
        const _config_7 = httpAuthSchemeProvider.resolveHttpAuthSchemeConfig(_config_6);
        const _config_8 = resolveRuntimeExtensions(_config_7, configuration?.extensions || []);
        this.config = _config_8;
        this.middlewareStack.use(middlewareUserAgent.getUserAgentPlugin(this.config));
        this.middlewareStack.use(middlewareRetry.getRetryPlugin(this.config));
        this.middlewareStack.use(middlewareContentLength.getContentLengthPlugin(this.config));
        this.middlewareStack.use(middlewareHostHeader.getHostHeaderPlugin(this.config));
        this.middlewareStack.use(middlewareLogger.getLoggerPlugin(this.config));
        this.middlewareStack.use(middlewareRecursionDetection.getRecursionDetectionPlugin(this.config));
        this.middlewareStack.use(core.getHttpAuthSchemeEndpointRuleSetPlugin(this.config, {
            httpAuthSchemeParametersProvider: httpAuthSchemeProvider.defaultCloudFormationHttpAuthSchemeParametersProvider,
            identityProviderConfigProvider: async (config) => new core.DefaultIdentityProviderConfig({
                "aws.auth#sigv4": config.credentials,
            }),
        }));
        this.middlewareStack.use(core.getHttpSigningPlugin(this.config));
    }
    destroy() {
        super.destroy();
    }
}

class CloudFormationServiceException extends smithyClient.ServiceException {
    constructor(options) {
        super(options);
        Object.setPrototypeOf(this, CloudFormationServiceException.prototype);
    }
}

const AccountFilterType = {
    DIFFERENCE: "DIFFERENCE",
    INTERSECTION: "INTERSECTION",
    NONE: "NONE",
    UNION: "UNION",
};
const AccountGateStatus = {
    FAILED: "FAILED",
    SKIPPED: "SKIPPED",
    SUCCEEDED: "SUCCEEDED",
};
class InvalidOperationException extends CloudFormationServiceException {
    name = "InvalidOperationException";
    $fault = "client";
    Message;
    constructor(opts) {
        super({
            name: "InvalidOperationException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, InvalidOperationException.prototype);
        this.Message = opts.Message;
    }
}
class OperationNotFoundException extends CloudFormationServiceException {
    name = "OperationNotFoundException";
    $fault = "client";
    Message;
    constructor(opts) {
        super({
            name: "OperationNotFoundException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, OperationNotFoundException.prototype);
        this.Message = opts.Message;
    }
}
const ThirdPartyType = {
    HOOK: "HOOK",
    MODULE: "MODULE",
    RESOURCE: "RESOURCE",
};
const VersionBump = {
    MAJOR: "MAJOR",
    MINOR: "MINOR",
};
class CFNRegistryException extends CloudFormationServiceException {
    name = "CFNRegistryException";
    $fault = "client";
    Message;
    constructor(opts) {
        super({
            name: "CFNRegistryException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, CFNRegistryException.prototype);
        this.Message = opts.Message;
    }
}
class TypeNotFoundException extends CloudFormationServiceException {
    name = "TypeNotFoundException";
    $fault = "client";
    Message;
    constructor(opts) {
        super({
            name: "TypeNotFoundException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, TypeNotFoundException.prototype);
        this.Message = opts.Message;
    }
}
class AlreadyExistsException extends CloudFormationServiceException {
    name = "AlreadyExistsException";
    $fault = "client";
    Message;
    constructor(opts) {
        super({
            name: "AlreadyExistsException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, AlreadyExistsException.prototype);
        this.Message = opts.Message;
    }
}
const AttributeChangeType = {
    Add: "Add",
    Modify: "Modify",
    Remove: "Remove",
};
class TypeConfigurationNotFoundException extends CloudFormationServiceException {
    name = "TypeConfigurationNotFoundException";
    $fault = "client";
    Message;
    constructor(opts) {
        super({
            name: "TypeConfigurationNotFoundException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, TypeConfigurationNotFoundException.prototype);
        this.Message = opts.Message;
    }
}
const CallAs = {
    DELEGATED_ADMIN: "DELEGATED_ADMIN",
    SELF: "SELF",
};
class TokenAlreadyExistsException extends CloudFormationServiceException {
    name = "TokenAlreadyExistsException";
    $fault = "client";
    Message;
    constructor(opts) {
        super({
            name: "TokenAlreadyExistsException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, TokenAlreadyExistsException.prototype);
        this.Message = opts.Message;
    }
}
const Capability = {
    CAPABILITY_AUTO_EXPAND: "CAPABILITY_AUTO_EXPAND",
    CAPABILITY_IAM: "CAPABILITY_IAM",
    CAPABILITY_NAMED_IAM: "CAPABILITY_NAMED_IAM",
};
const Category = {
    ACTIVATED: "ACTIVATED",
    AWS_TYPES: "AWS_TYPES",
    REGISTERED: "REGISTERED",
    THIRD_PARTY: "THIRD_PARTY",
};
const ChangeAction = {
    Add: "Add",
    Dynamic: "Dynamic",
    Import: "Import",
    Modify: "Modify",
    Remove: "Remove",
};
const ChangeSource = {
    Automatic: "Automatic",
    DirectModification: "DirectModification",
    ParameterReference: "ParameterReference",
    ResourceAttribute: "ResourceAttribute",
    ResourceReference: "ResourceReference",
};
const EvaluationType = {
    Dynamic: "Dynamic",
    Static: "Static",
};
const ResourceAttribute = {
    CreationPolicy: "CreationPolicy",
    DeletionPolicy: "DeletionPolicy",
    Metadata: "Metadata",
    Properties: "Properties",
    Tags: "Tags",
    UpdatePolicy: "UpdatePolicy",
    UpdateReplacePolicy: "UpdateReplacePolicy",
};
const RequiresRecreation = {
    Always: "Always",
    Conditionally: "Conditionally",
    Never: "Never",
};
const PolicyAction = {
    Delete: "Delete",
    ReplaceAndDelete: "ReplaceAndDelete",
    ReplaceAndRetain: "ReplaceAndRetain",
    ReplaceAndSnapshot: "ReplaceAndSnapshot",
    Retain: "Retain",
    Snapshot: "Snapshot",
};
const Replacement = {
    Conditional: "Conditional",
    False: "False",
    True: "True",
};
const ChangeType = {
    Resource: "Resource",
};
const HookFailureMode = {
    FAIL: "FAIL",
    WARN: "WARN",
};
const HookInvocationPoint = {
    PRE_PROVISION: "PRE_PROVISION",
};
const HookTargetType = {
    RESOURCE: "RESOURCE",
};
const ChangeSetHooksStatus = {
    PLANNED: "PLANNED",
    PLANNING: "PLANNING",
    UNAVAILABLE: "UNAVAILABLE",
};
class ChangeSetNotFoundException extends CloudFormationServiceException {
    name = "ChangeSetNotFoundException";
    $fault = "client";
    Message;
    constructor(opts) {
        super({
            name: "ChangeSetNotFoundException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, ChangeSetNotFoundException.prototype);
        this.Message = opts.Message;
    }
}
const ChangeSetStatus = {
    CREATE_COMPLETE: "CREATE_COMPLETE",
    CREATE_IN_PROGRESS: "CREATE_IN_PROGRESS",
    CREATE_PENDING: "CREATE_PENDING",
    DELETE_COMPLETE: "DELETE_COMPLETE",
    DELETE_FAILED: "DELETE_FAILED",
    DELETE_IN_PROGRESS: "DELETE_IN_PROGRESS",
    DELETE_PENDING: "DELETE_PENDING",
    FAILED: "FAILED",
};
const ExecutionStatus = {
    AVAILABLE: "AVAILABLE",
    EXECUTE_COMPLETE: "EXECUTE_COMPLETE",
    EXECUTE_FAILED: "EXECUTE_FAILED",
    EXECUTE_IN_PROGRESS: "EXECUTE_IN_PROGRESS",
    OBSOLETE: "OBSOLETE",
    UNAVAILABLE: "UNAVAILABLE",
};
const ChangeSetType = {
    CREATE: "CREATE",
    IMPORT: "IMPORT",
    UPDATE: "UPDATE",
};
const OnStackFailure = {
    DELETE: "DELETE",
    DO_NOTHING: "DO_NOTHING",
    ROLLBACK: "ROLLBACK",
};
class InsufficientCapabilitiesException extends CloudFormationServiceException {
    name = "InsufficientCapabilitiesException";
    $fault = "client";
    Message;
    constructor(opts) {
        super({
            name: "InsufficientCapabilitiesException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, InsufficientCapabilitiesException.prototype);
        this.Message = opts.Message;
    }
}
class LimitExceededException extends CloudFormationServiceException {
    name = "LimitExceededException";
    $fault = "client";
    Message;
    constructor(opts) {
        super({
            name: "LimitExceededException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, LimitExceededException.prototype);
        this.Message = opts.Message;
    }
}
class ConcurrentResourcesLimitExceededException extends CloudFormationServiceException {
    name = "ConcurrentResourcesLimitExceededException";
    $fault = "client";
    Message;
    constructor(opts) {
        super({
            name: "ConcurrentResourcesLimitExceededException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, ConcurrentResourcesLimitExceededException.prototype);
        this.Message = opts.Message;
    }
}
const GeneratedTemplateDeletionPolicy = {
    DELETE: "DELETE",
    RETAIN: "RETAIN",
};
const GeneratedTemplateUpdateReplacePolicy = {
    DELETE: "DELETE",
    RETAIN: "RETAIN",
};
const OnFailure = {
    DELETE: "DELETE",
    DO_NOTHING: "DO_NOTHING",
    ROLLBACK: "ROLLBACK",
};
const ConcurrencyMode = {
    SOFT_FAILURE_TOLERANCE: "SOFT_FAILURE_TOLERANCE",
    STRICT_FAILURE_TOLERANCE: "STRICT_FAILURE_TOLERANCE",
};
const RegionConcurrencyType = {
    PARALLEL: "PARALLEL",
    SEQUENTIAL: "SEQUENTIAL",
};
class OperationIdAlreadyExistsException extends CloudFormationServiceException {
    name = "OperationIdAlreadyExistsException";
    $fault = "client";
    Message;
    constructor(opts) {
        super({
            name: "OperationIdAlreadyExistsException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, OperationIdAlreadyExistsException.prototype);
        this.Message = opts.Message;
    }
}
class OperationInProgressException extends CloudFormationServiceException {
    name = "OperationInProgressException";
    $fault = "client";
    Message;
    constructor(opts) {
        super({
            name: "OperationInProgressException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, OperationInProgressException.prototype);
        this.Message = opts.Message;
    }
}
class StackSetNotFoundException extends CloudFormationServiceException {
    name = "StackSetNotFoundException";
    $fault = "client";
    Message;
    constructor(opts) {
        super({
            name: "StackSetNotFoundException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, StackSetNotFoundException.prototype);
        this.Message = opts.Message;
    }
}
class StaleRequestException extends CloudFormationServiceException {
    name = "StaleRequestException";
    $fault = "client";
    Message;
    constructor(opts) {
        super({
            name: "StaleRequestException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, StaleRequestException.prototype);
        this.Message = opts.Message;
    }
}
class CreatedButModifiedException extends CloudFormationServiceException {
    name = "CreatedButModifiedException";
    $fault = "client";
    Message;
    constructor(opts) {
        super({
            name: "CreatedButModifiedException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, CreatedButModifiedException.prototype);
        this.Message = opts.Message;
    }
}
const PermissionModels = {
    SELF_MANAGED: "SELF_MANAGED",
    SERVICE_MANAGED: "SERVICE_MANAGED",
};
class NameAlreadyExistsException extends CloudFormationServiceException {
    name = "NameAlreadyExistsException";
    $fault = "client";
    Message;
    constructor(opts) {
        super({
            name: "NameAlreadyExistsException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, NameAlreadyExistsException.prototype);
        this.Message = opts.Message;
    }
}
class InvalidChangeSetStatusException extends CloudFormationServiceException {
    name = "InvalidChangeSetStatusException";
    $fault = "client";
    Message;
    constructor(opts) {
        super({
            name: "InvalidChangeSetStatusException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, InvalidChangeSetStatusException.prototype);
        this.Message = opts.Message;
    }
}
class GeneratedTemplateNotFoundException extends CloudFormationServiceException {
    name = "GeneratedTemplateNotFoundException";
    $fault = "client";
    Message;
    constructor(opts) {
        super({
            name: "GeneratedTemplateNotFoundException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, GeneratedTemplateNotFoundException.prototype);
        this.Message = opts.Message;
    }
}
const DeletionMode = {
    FORCE_DELETE_STACK: "FORCE_DELETE_STACK",
    STANDARD: "STANDARD",
};
class StackSetNotEmptyException extends CloudFormationServiceException {
    name = "StackSetNotEmptyException";
    $fault = "client";
    Message;
    constructor(opts) {
        super({
            name: "StackSetNotEmptyException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, StackSetNotEmptyException.prototype);
        this.Message = opts.Message;
    }
}
const RegistryType = {
    HOOK: "HOOK",
    MODULE: "MODULE",
    RESOURCE: "RESOURCE",
};
const GeneratedTemplateResourceStatus = {
    COMPLETE: "COMPLETE",
    FAILED: "FAILED",
    IN_PROGRESS: "IN_PROGRESS",
    PENDING: "PENDING",
};
const WarningType = {
    EXCLUDED_PROPERTIES: "EXCLUDED_PROPERTIES",
    EXCLUDED_RESOURCES: "EXCLUDED_RESOURCES",
    MUTUALLY_EXCLUSIVE_PROPERTIES: "MUTUALLY_EXCLUSIVE_PROPERTIES",
    MUTUALLY_EXCLUSIVE_TYPES: "MUTUALLY_EXCLUSIVE_TYPES",
    UNSUPPORTED_PROPERTIES: "UNSUPPORTED_PROPERTIES",
};
const GeneratedTemplateStatus = {
    COMPLETE: "COMPLETE",
    CREATE_IN_PROGRESS: "CREATE_IN_PROGRESS",
    CREATE_PENDING: "CREATE_PENDING",
    DELETE_IN_PROGRESS: "DELETE_IN_PROGRESS",
    DELETE_PENDING: "DELETE_PENDING",
    FAILED: "FAILED",
    UPDATE_IN_PROGRESS: "UPDATE_IN_PROGRESS",
    UPDATE_PENDING: "UPDATE_PENDING",
};
const OrganizationStatus = {
    DISABLED: "DISABLED",
    DISABLED_PERMANENTLY: "DISABLED_PERMANENTLY",
    ENABLED: "ENABLED",
};
const IdentityProvider = {
    AWS_Marketplace: "AWS_Marketplace",
    Bitbucket: "Bitbucket",
    GitHub: "GitHub",
};
const PublisherStatus = {
    UNVERIFIED: "UNVERIFIED",
    VERIFIED: "VERIFIED",
};
const ResourceScanStatus = {
    COMPLETE: "COMPLETE",
    EXPIRED: "EXPIRED",
    FAILED: "FAILED",
    IN_PROGRESS: "IN_PROGRESS",
};
class ResourceScanNotFoundException extends CloudFormationServiceException {
    name = "ResourceScanNotFoundException";
    $fault = "client";
    Message;
    constructor(opts) {
        super({
            name: "ResourceScanNotFoundException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, ResourceScanNotFoundException.prototype);
        this.Message = opts.Message;
    }
}
const StackDriftDetectionStatus = {
    DETECTION_COMPLETE: "DETECTION_COMPLETE",
    DETECTION_FAILED: "DETECTION_FAILED",
    DETECTION_IN_PROGRESS: "DETECTION_IN_PROGRESS",
};
const StackDriftStatus = {
    DRIFTED: "DRIFTED",
    IN_SYNC: "IN_SYNC",
    NOT_CHECKED: "NOT_CHECKED",
    UNKNOWN: "UNKNOWN",
};
const DetailedStatus = {
    CONFIGURATION_COMPLETE: "CONFIGURATION_COMPLETE",
    VALIDATION_FAILED: "VALIDATION_FAILED",
};
const HookStatus = {
    HOOK_COMPLETE_FAILED: "HOOK_COMPLETE_FAILED",
    HOOK_COMPLETE_SUCCEEDED: "HOOK_COMPLETE_SUCCEEDED",
    HOOK_FAILED: "HOOK_FAILED",
    HOOK_IN_PROGRESS: "HOOK_IN_PROGRESS",
};
const ResourceStatus = {
    CREATE_COMPLETE: "CREATE_COMPLETE",
    CREATE_FAILED: "CREATE_FAILED",
    CREATE_IN_PROGRESS: "CREATE_IN_PROGRESS",
    DELETE_COMPLETE: "DELETE_COMPLETE",
    DELETE_FAILED: "DELETE_FAILED",
    DELETE_IN_PROGRESS: "DELETE_IN_PROGRESS",
    DELETE_SKIPPED: "DELETE_SKIPPED",
    EXPORT_COMPLETE: "EXPORT_COMPLETE",
    EXPORT_FAILED: "EXPORT_FAILED",
    EXPORT_IN_PROGRESS: "EXPORT_IN_PROGRESS",
    EXPORT_ROLLBACK_COMPLETE: "EXPORT_ROLLBACK_COMPLETE",
    EXPORT_ROLLBACK_FAILED: "EXPORT_ROLLBACK_FAILED",
    EXPORT_ROLLBACK_IN_PROGRESS: "EXPORT_ROLLBACK_IN_PROGRESS",
    IMPORT_COMPLETE: "IMPORT_COMPLETE",
    IMPORT_FAILED: "IMPORT_FAILED",
    IMPORT_IN_PROGRESS: "IMPORT_IN_PROGRESS",
    IMPORT_ROLLBACK_COMPLETE: "IMPORT_ROLLBACK_COMPLETE",
    IMPORT_ROLLBACK_FAILED: "IMPORT_ROLLBACK_FAILED",
    IMPORT_ROLLBACK_IN_PROGRESS: "IMPORT_ROLLBACK_IN_PROGRESS",
    ROLLBACK_COMPLETE: "ROLLBACK_COMPLETE",
    ROLLBACK_FAILED: "ROLLBACK_FAILED",
    ROLLBACK_IN_PROGRESS: "ROLLBACK_IN_PROGRESS",
    UPDATE_COMPLETE: "UPDATE_COMPLETE",
    UPDATE_FAILED: "UPDATE_FAILED",
    UPDATE_IN_PROGRESS: "UPDATE_IN_PROGRESS",
    UPDATE_ROLLBACK_COMPLETE: "UPDATE_ROLLBACK_COMPLETE",
    UPDATE_ROLLBACK_FAILED: "UPDATE_ROLLBACK_FAILED",
    UPDATE_ROLLBACK_IN_PROGRESS: "UPDATE_ROLLBACK_IN_PROGRESS",
};
const StackInstanceDetailedStatus = {
    CANCELLED: "CANCELLED",
    FAILED: "FAILED",
    FAILED_IMPORT: "FAILED_IMPORT",
    INOPERABLE: "INOPERABLE",
    PENDING: "PENDING",
    RUNNING: "RUNNING",
    SKIPPED_SUSPENDED_ACCOUNT: "SKIPPED_SUSPENDED_ACCOUNT",
    SUCCEEDED: "SUCCEEDED",
};
const StackInstanceStatus = {
    CURRENT: "CURRENT",
    INOPERABLE: "INOPERABLE",
    OUTDATED: "OUTDATED",
};
class StackInstanceNotFoundException extends CloudFormationServiceException {
    name = "StackInstanceNotFoundException";
    $fault = "client";
    Message;
    constructor(opts) {
        super({
            name: "StackInstanceNotFoundException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, StackInstanceNotFoundException.prototype);
        this.Message = opts.Message;
    }
}
const StackRefactorExecutionStatus = {
    AVAILABLE: "AVAILABLE",
    EXECUTE_COMPLETE: "EXECUTE_COMPLETE",
    EXECUTE_FAILED: "EXECUTE_FAILED",
    EXECUTE_IN_PROGRESS: "EXECUTE_IN_PROGRESS",
    OBSOLETE: "OBSOLETE",
    ROLLBACK_COMPLETE: "ROLLBACK_COMPLETE",
    ROLLBACK_FAILED: "ROLLBACK_FAILED",
    ROLLBACK_IN_PROGRESS: "ROLLBACK_IN_PROGRESS",
    UNAVAILABLE: "UNAVAILABLE",
};
const StackRefactorStatus = {
    CREATE_COMPLETE: "CREATE_COMPLETE",
    CREATE_FAILED: "CREATE_FAILED",
    CREATE_IN_PROGRESS: "CREATE_IN_PROGRESS",
    DELETE_COMPLETE: "DELETE_COMPLETE",
    DELETE_FAILED: "DELETE_FAILED",
    DELETE_IN_PROGRESS: "DELETE_IN_PROGRESS",
};
class StackRefactorNotFoundException extends CloudFormationServiceException {
    name = "StackRefactorNotFoundException";
    $fault = "client";
    Message;
    constructor(opts) {
        super({
            name: "StackRefactorNotFoundException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, StackRefactorNotFoundException.prototype);
        this.Message = opts.Message;
    }
}
const StackResourceDriftStatus = {
    DELETED: "DELETED",
    IN_SYNC: "IN_SYNC",
    MODIFIED: "MODIFIED",
    NOT_CHECKED: "NOT_CHECKED",
    UNKNOWN: "UNKNOWN",
};
const DifferenceType = {
    ADD: "ADD",
    NOT_EQUAL: "NOT_EQUAL",
    REMOVE: "REMOVE",
};
const StackStatus = {
    CREATE_COMPLETE: "CREATE_COMPLETE",
    CREATE_FAILED: "CREATE_FAILED",
    CREATE_IN_PROGRESS: "CREATE_IN_PROGRESS",
    DELETE_COMPLETE: "DELETE_COMPLETE",
    DELETE_FAILED: "DELETE_FAILED",
    DELETE_IN_PROGRESS: "DELETE_IN_PROGRESS",
    IMPORT_COMPLETE: "IMPORT_COMPLETE",
    IMPORT_IN_PROGRESS: "IMPORT_IN_PROGRESS",
    IMPORT_ROLLBACK_COMPLETE: "IMPORT_ROLLBACK_COMPLETE",
    IMPORT_ROLLBACK_FAILED: "IMPORT_ROLLBACK_FAILED",
    IMPORT_ROLLBACK_IN_PROGRESS: "IMPORT_ROLLBACK_IN_PROGRESS",
    REVIEW_IN_PROGRESS: "REVIEW_IN_PROGRESS",
    ROLLBACK_COMPLETE: "ROLLBACK_COMPLETE",
    ROLLBACK_FAILED: "ROLLBACK_FAILED",
    ROLLBACK_IN_PROGRESS: "ROLLBACK_IN_PROGRESS",
    UPDATE_COMPLETE: "UPDATE_COMPLETE",
    UPDATE_COMPLETE_CLEANUP_IN_PROGRESS: "UPDATE_COMPLETE_CLEANUP_IN_PROGRESS",
    UPDATE_FAILED: "UPDATE_FAILED",
    UPDATE_IN_PROGRESS: "UPDATE_IN_PROGRESS",
    UPDATE_ROLLBACK_COMPLETE: "UPDATE_ROLLBACK_COMPLETE",
    UPDATE_ROLLBACK_COMPLETE_CLEANUP_IN_PROGRESS: "UPDATE_ROLLBACK_COMPLETE_CLEANUP_IN_PROGRESS",
    UPDATE_ROLLBACK_FAILED: "UPDATE_ROLLBACK_FAILED",
    UPDATE_ROLLBACK_IN_PROGRESS: "UPDATE_ROLLBACK_IN_PROGRESS",
};
const StackSetDriftDetectionStatus = {
    COMPLETED: "COMPLETED",
    FAILED: "FAILED",
    IN_PROGRESS: "IN_PROGRESS",
    PARTIAL_SUCCESS: "PARTIAL_SUCCESS",
    STOPPED: "STOPPED",
};
const StackSetDriftStatus = {
    DRIFTED: "DRIFTED",
    IN_SYNC: "IN_SYNC",
    NOT_CHECKED: "NOT_CHECKED",
};
const StackSetStatus = {
    ACTIVE: "ACTIVE",
    DELETED: "DELETED",
};
const StackSetOperationAction = {
    CREATE: "CREATE",
    DELETE: "DELETE",
    DETECT_DRIFT: "DETECT_DRIFT",
    UPDATE: "UPDATE",
};
const StackSetOperationStatus = {
    FAILED: "FAILED",
    QUEUED: "QUEUED",
    RUNNING: "RUNNING",
    STOPPED: "STOPPED",
    STOPPING: "STOPPING",
    SUCCEEDED: "SUCCEEDED",
};
const DeprecatedStatus = {
    DEPRECATED: "DEPRECATED",
    LIVE: "LIVE",
};
const ProvisioningType = {
    FULLY_MUTABLE: "FULLY_MUTABLE",
    IMMUTABLE: "IMMUTABLE",
    NON_PROVISIONABLE: "NON_PROVISIONABLE",
};
const TypeTestsStatus = {
    FAILED: "FAILED",
    IN_PROGRESS: "IN_PROGRESS",
    NOT_TESTED: "NOT_TESTED",
    PASSED: "PASSED",
};
const Visibility = {
    PRIVATE: "PRIVATE",
    PUBLIC: "PUBLIC",
};
const RegistrationStatus = {
    COMPLETE: "COMPLETE",
    FAILED: "FAILED",
    IN_PROGRESS: "IN_PROGRESS",
};
const TemplateFormat = {
    JSON: "JSON",
    YAML: "YAML",
};
const TemplateStage = {
    Original: "Original",
    Processed: "Processed",
};
class StackNotFoundException extends CloudFormationServiceException {
    name = "StackNotFoundException";
    $fault = "client";
    Message;
    constructor(opts) {
        super({
            name: "StackNotFoundException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, StackNotFoundException.prototype);
        this.Message = opts.Message;
    }
}
class HookResultNotFoundException extends CloudFormationServiceException {
    name = "HookResultNotFoundException";
    $fault = "client";
    Message;
    constructor(opts) {
        super({
            name: "HookResultNotFoundException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, HookResultNotFoundException.prototype);
        this.Message = opts.Message;
    }
}
const ListHookResultsTargetType = {
    CHANGE_SET: "CHANGE_SET",
    CLOUD_CONTROL: "CLOUD_CONTROL",
    RESOURCE: "RESOURCE",
    STACK: "STACK",
};
class ResourceScanInProgressException extends CloudFormationServiceException {
    name = "ResourceScanInProgressException";
    $fault = "client";
    Message;
    constructor(opts) {
        super({
            name: "ResourceScanInProgressException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, ResourceScanInProgressException.prototype);
        this.Message = opts.Message;
    }
}
const ScanType = {
    FULL: "FULL",
    PARTIAL: "PARTIAL",
};
const StackInstanceFilterName = {
    DETAILED_STATUS: "DETAILED_STATUS",
    DRIFT_STATUS: "DRIFT_STATUS",
    LAST_OPERATION_ID: "LAST_OPERATION_ID",
};
const StackRefactorActionType = {
    CREATE: "CREATE",
    MOVE: "MOVE",
};
const StackRefactorDetection = {
    AUTO: "AUTO",
    MANUAL: "MANUAL",
};
const StackRefactorActionEntity = {
    RESOURCE: "RESOURCE",
    STACK: "STACK",
};
const OperationResultFilterName = {
    OPERATION_RESULT_STATUS: "OPERATION_RESULT_STATUS",
};
const StackSetOperationResultStatus = {
    CANCELLED: "CANCELLED",
    FAILED: "FAILED",
    PENDING: "PENDING",
    RUNNING: "RUNNING",
    SUCCEEDED: "SUCCEEDED",
};

class InvalidStateTransitionException extends CloudFormationServiceException {
    name = "InvalidStateTransitionException";
    $fault = "client";
    Message;
    constructor(opts) {
        super({
            name: "InvalidStateTransitionException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, InvalidStateTransitionException.prototype);
        this.Message = opts.Message;
    }
}
class OperationStatusCheckFailedException extends CloudFormationServiceException {
    name = "OperationStatusCheckFailedException";
    $fault = "client";
    Message;
    constructor(opts) {
        super({
            name: "OperationStatusCheckFailedException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, OperationStatusCheckFailedException.prototype);
        this.Message = opts.Message;
    }
}
const OperationStatus = {
    FAILED: "FAILED",
    IN_PROGRESS: "IN_PROGRESS",
    PENDING: "PENDING",
    SUCCESS: "SUCCESS",
};
const HandlerErrorCode = {
    AccessDenied: "AccessDenied",
    AlreadyExists: "AlreadyExists",
    GeneralServiceException: "GeneralServiceException",
    HandlerInternalFailure: "HandlerInternalFailure",
    InternalFailure: "InternalFailure",
    InvalidCredentials: "InvalidCredentials",
    InvalidRequest: "InvalidRequest",
    InvalidTypeConfiguration: "InvalidTypeConfiguration",
    NetworkFailure: "NetworkFailure",
    NonCompliant: "NonCompliant",
    NotFound: "NotFound",
    NotUpdatable: "NotUpdatable",
    ResourceConflict: "ResourceConflict",
    ServiceInternalError: "ServiceInternalError",
    ServiceLimitExceeded: "ServiceLimitExceeded",
    ServiceTimeout: "NotStabilized",
    Throttling: "Throttling",
    Unknown: "Unknown",
    UnsupportedTarget: "UnsupportedTarget",
};
const ResourceSignalStatus = {
    FAILURE: "FAILURE",
    SUCCESS: "SUCCESS",
};
class ResourceScanLimitExceededException extends CloudFormationServiceException {
    name = "ResourceScanLimitExceededException";
    $fault = "client";
    Message;
    constructor(opts) {
        super({
            name: "ResourceScanLimitExceededException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, ResourceScanLimitExceededException.prototype);
        this.Message = opts.Message;
    }
}

const se_ActivateOrganizationsAccessCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ActivateOrganizationsAccessInput(),
        [_A]: _AOA,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ActivateTypeCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ActivateTypeInput(input),
        [_A]: _AT,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_BatchDescribeTypeConfigurationsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_BatchDescribeTypeConfigurationsInput(input),
        [_A]: _BDTC,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_CancelUpdateStackCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_CancelUpdateStackInput(input),
        [_A]: _CUS,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ContinueUpdateRollbackCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ContinueUpdateRollbackInput(input),
        [_A]: _CUR,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_CreateChangeSetCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_CreateChangeSetInput(input),
        [_A]: _CCS,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_CreateGeneratedTemplateCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_CreateGeneratedTemplateInput(input),
        [_A]: _CGT,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_CreateStackCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_CreateStackInput(input),
        [_A]: _CS,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_CreateStackInstancesCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_CreateStackInstancesInput(input),
        [_A]: _CSI,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_CreateStackRefactorCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_CreateStackRefactorInput(input),
        [_A]: _CSR,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_CreateStackSetCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_CreateStackSetInput(input),
        [_A]: _CSS,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeactivateOrganizationsAccessCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DeactivateOrganizationsAccessInput(),
        [_A]: _DOA,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeactivateTypeCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DeactivateTypeInput(input),
        [_A]: _DT,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeleteChangeSetCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DeleteChangeSetInput(input),
        [_A]: _DCS,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeleteGeneratedTemplateCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DeleteGeneratedTemplateInput(input),
        [_A]: _DGT,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeleteStackCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DeleteStackInput(input),
        [_A]: _DS,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeleteStackInstancesCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DeleteStackInstancesInput(input),
        [_A]: _DSI,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeleteStackSetCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DeleteStackSetInput(input),
        [_A]: _DSS,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeregisterTypeCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DeregisterTypeInput(input),
        [_A]: _DTe,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeAccountLimitsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeAccountLimitsInput(input),
        [_A]: _DAL,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeChangeSetCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeChangeSetInput(input),
        [_A]: _DCSe,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeChangeSetHooksCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeChangeSetHooksInput(input),
        [_A]: _DCSH,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeGeneratedTemplateCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeGeneratedTemplateInput(input),
        [_A]: _DGTe,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeOrganizationsAccessCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeOrganizationsAccessInput(input),
        [_A]: _DOAe,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribePublisherCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribePublisherInput(input),
        [_A]: _DP,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeResourceScanCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeResourceScanInput(input),
        [_A]: _DRS,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeStackDriftDetectionStatusCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeStackDriftDetectionStatusInput(input),
        [_A]: _DSDDS,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeStackEventsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeStackEventsInput(input),
        [_A]: _DSE,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeStackInstanceCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeStackInstanceInput(input),
        [_A]: _DSIe,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeStackRefactorCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeStackRefactorInput(input),
        [_A]: _DSR,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeStackResourceCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeStackResourceInput(input),
        [_A]: _DSRe,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeStackResourceDriftsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeStackResourceDriftsInput(input),
        [_A]: _DSRD,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeStackResourcesCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeStackResourcesInput(input),
        [_A]: _DSRes,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeStacksCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeStacksInput(input),
        [_A]: _DSe,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeStackSetCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeStackSetInput(input),
        [_A]: _DSSe,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeStackSetOperationCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeStackSetOperationInput(input),
        [_A]: _DSSO,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeTypeCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeTypeInput(input),
        [_A]: _DTes,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeTypeRegistrationCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeTypeRegistrationInput(input),
        [_A]: _DTR,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DetectStackDriftCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DetectStackDriftInput(input),
        [_A]: _DSD,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DetectStackResourceDriftCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DetectStackResourceDriftInput(input),
        [_A]: _DSRDe,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DetectStackSetDriftCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DetectStackSetDriftInput(input),
        [_A]: _DSSD,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_EstimateTemplateCostCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_EstimateTemplateCostInput(input),
        [_A]: _ETC,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ExecuteChangeSetCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ExecuteChangeSetInput(input),
        [_A]: _ECS,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ExecuteStackRefactorCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ExecuteStackRefactorInput(input),
        [_A]: _ESR,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_GetGeneratedTemplateCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_GetGeneratedTemplateInput(input),
        [_A]: _GGT,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_GetStackPolicyCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_GetStackPolicyInput(input),
        [_A]: _GSP,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_GetTemplateCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_GetTemplateInput(input),
        [_A]: _GT,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_GetTemplateSummaryCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_GetTemplateSummaryInput(input),
        [_A]: _GTS,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ImportStacksToStackSetCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ImportStacksToStackSetInput(input),
        [_A]: _ISTSS,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ListChangeSetsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ListChangeSetsInput(input),
        [_A]: _LCS,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ListExportsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ListExportsInput(input),
        [_A]: _LE,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ListGeneratedTemplatesCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ListGeneratedTemplatesInput(input),
        [_A]: _LGT,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ListHookResultsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ListHookResultsInput(input),
        [_A]: _LHR,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ListImportsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ListImportsInput(input),
        [_A]: _LI,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ListResourceScanRelatedResourcesCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ListResourceScanRelatedResourcesInput(input),
        [_A]: _LRSRR,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ListResourceScanResourcesCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ListResourceScanResourcesInput(input),
        [_A]: _LRSR,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ListResourceScansCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ListResourceScansInput(input),
        [_A]: _LRS,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ListStackInstanceResourceDriftsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ListStackInstanceResourceDriftsInput(input),
        [_A]: _LSIRD,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ListStackInstancesCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ListStackInstancesInput(input),
        [_A]: _LSI,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ListStackRefactorActionsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ListStackRefactorActionsInput(input),
        [_A]: _LSRA,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ListStackRefactorsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ListStackRefactorsInput(input),
        [_A]: _LSR,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ListStackResourcesCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ListStackResourcesInput(input),
        [_A]: _LSRi,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ListStacksCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ListStacksInput(input),
        [_A]: _LS,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ListStackSetAutoDeploymentTargetsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ListStackSetAutoDeploymentTargetsInput(input),
        [_A]: _LSSADT,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ListStackSetOperationResultsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ListStackSetOperationResultsInput(input),
        [_A]: _LSSOR,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ListStackSetOperationsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ListStackSetOperationsInput(input),
        [_A]: _LSSO,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ListStackSetsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ListStackSetsInput(input),
        [_A]: _LSS,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ListTypeRegistrationsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ListTypeRegistrationsInput(input),
        [_A]: _LTR,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ListTypesCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ListTypesInput(input),
        [_A]: _LT,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ListTypeVersionsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ListTypeVersionsInput(input),
        [_A]: _LTV,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_PublishTypeCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_PublishTypeInput(input),
        [_A]: _PT,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_RecordHandlerProgressCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_RecordHandlerProgressInput(input),
        [_A]: _RHP,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_RegisterPublisherCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_RegisterPublisherInput(input),
        [_A]: _RP,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_RegisterTypeCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_RegisterTypeInput(input),
        [_A]: _RT,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_RollbackStackCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_RollbackStackInput(input),
        [_A]: _RS,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_SetStackPolicyCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_SetStackPolicyInput(input),
        [_A]: _SSP,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_SetTypeConfigurationCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_SetTypeConfigurationInput(input),
        [_A]: _STC,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_SetTypeDefaultVersionCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_SetTypeDefaultVersionInput(input),
        [_A]: _STDV,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_SignalResourceCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_SignalResourceInput(input),
        [_A]: _SR,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_StartResourceScanCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_StartResourceScanInput(input),
        [_A]: _SRS,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_StopStackSetOperationCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_StopStackSetOperationInput(input),
        [_A]: _SSSO,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_TestTypeCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_TestTypeInput(input),
        [_A]: _TT,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_UpdateGeneratedTemplateCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_UpdateGeneratedTemplateInput(input),
        [_A]: _UGT,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_UpdateStackCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_UpdateStackInput(input),
        [_A]: _US,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_UpdateStackInstancesCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_UpdateStackInstancesInput(input),
        [_A]: _USI,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_UpdateStackSetCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_UpdateStackSetInput(input),
        [_A]: _USS,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_UpdateTerminationProtectionCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_UpdateTerminationProtectionInput(input),
        [_A]: _UTP,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ValidateTemplateCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ValidateTemplateInput(input),
        [_A]: _VT,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const de_ActivateOrganizationsAccessCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_ActivateOrganizationsAccessOutput(data.ActivateOrganizationsAccessResult);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ActivateTypeCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_ActivateTypeOutput(data.ActivateTypeResult);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_BatchDescribeTypeConfigurationsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_BatchDescribeTypeConfigurationsOutput(data.BatchDescribeTypeConfigurationsResult);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CancelUpdateStackCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await smithyClient.collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_ContinueUpdateRollbackCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_ContinueUpdateRollbackOutput(data.ContinueUpdateRollbackResult);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateChangeSetCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_CreateChangeSetOutput(data.CreateChangeSetResult);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateGeneratedTemplateCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_CreateGeneratedTemplateOutput(data.CreateGeneratedTemplateResult);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateStackCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_CreateStackOutput(data.CreateStackResult);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateStackInstancesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_CreateStackInstancesOutput(data.CreateStackInstancesResult);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateStackRefactorCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_CreateStackRefactorOutput(data.CreateStackRefactorResult);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateStackSetCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_CreateStackSetOutput(data.CreateStackSetResult);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DeactivateOrganizationsAccessCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DeactivateOrganizationsAccessOutput(data.DeactivateOrganizationsAccessResult);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DeactivateTypeCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DeactivateTypeOutput(data.DeactivateTypeResult);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DeleteChangeSetCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DeleteChangeSetOutput(data.DeleteChangeSetResult);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DeleteGeneratedTemplateCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await smithyClient.collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_DeleteStackCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await smithyClient.collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_DeleteStackInstancesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DeleteStackInstancesOutput(data.DeleteStackInstancesResult);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DeleteStackSetCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DeleteStackSetOutput(data.DeleteStackSetResult);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DeregisterTypeCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DeregisterTypeOutput(data.DeregisterTypeResult);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeAccountLimitsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DescribeAccountLimitsOutput(data.DescribeAccountLimitsResult);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeChangeSetCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DescribeChangeSetOutput(data.DescribeChangeSetResult);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeChangeSetHooksCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DescribeChangeSetHooksOutput(data.DescribeChangeSetHooksResult);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeGeneratedTemplateCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DescribeGeneratedTemplateOutput(data.DescribeGeneratedTemplateResult);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeOrganizationsAccessCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DescribeOrganizationsAccessOutput(data.DescribeOrganizationsAccessResult);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribePublisherCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DescribePublisherOutput(data.DescribePublisherResult);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeResourceScanCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DescribeResourceScanOutput(data.DescribeResourceScanResult);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeStackDriftDetectionStatusCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DescribeStackDriftDetectionStatusOutput(data.DescribeStackDriftDetectionStatusResult);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeStackEventsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DescribeStackEventsOutput(data.DescribeStackEventsResult);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeStackInstanceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DescribeStackInstanceOutput(data.DescribeStackInstanceResult);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeStackRefactorCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DescribeStackRefactorOutput(data.DescribeStackRefactorResult);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeStackResourceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DescribeStackResourceOutput(data.DescribeStackResourceResult);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeStackResourceDriftsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DescribeStackResourceDriftsOutput(data.DescribeStackResourceDriftsResult);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeStackResourcesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DescribeStackResourcesOutput(data.DescribeStackResourcesResult);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeStacksCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DescribeStacksOutput(data.DescribeStacksResult);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeStackSetCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DescribeStackSetOutput(data.DescribeStackSetResult);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeStackSetOperationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DescribeStackSetOperationOutput(data.DescribeStackSetOperationResult);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeTypeCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DescribeTypeOutput(data.DescribeTypeResult);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeTypeRegistrationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DescribeTypeRegistrationOutput(data.DescribeTypeRegistrationResult);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DetectStackDriftCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DetectStackDriftOutput(data.DetectStackDriftResult);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DetectStackResourceDriftCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DetectStackResourceDriftOutput(data.DetectStackResourceDriftResult);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DetectStackSetDriftCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DetectStackSetDriftOutput(data.DetectStackSetDriftResult);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_EstimateTemplateCostCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_EstimateTemplateCostOutput(data.EstimateTemplateCostResult);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ExecuteChangeSetCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_ExecuteChangeSetOutput(data.ExecuteChangeSetResult);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ExecuteStackRefactorCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await smithyClient.collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_GetGeneratedTemplateCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_GetGeneratedTemplateOutput(data.GetGeneratedTemplateResult);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_GetStackPolicyCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_GetStackPolicyOutput(data.GetStackPolicyResult);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_GetTemplateCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_GetTemplateOutput(data.GetTemplateResult);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_GetTemplateSummaryCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_GetTemplateSummaryOutput(data.GetTemplateSummaryResult);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ImportStacksToStackSetCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_ImportStacksToStackSetOutput(data.ImportStacksToStackSetResult);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListChangeSetsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_ListChangeSetsOutput(data.ListChangeSetsResult);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListExportsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_ListExportsOutput(data.ListExportsResult);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListGeneratedTemplatesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_ListGeneratedTemplatesOutput(data.ListGeneratedTemplatesResult);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListHookResultsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_ListHookResultsOutput(data.ListHookResultsResult);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListImportsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_ListImportsOutput(data.ListImportsResult);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListResourceScanRelatedResourcesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_ListResourceScanRelatedResourcesOutput(data.ListResourceScanRelatedResourcesResult);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListResourceScanResourcesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_ListResourceScanResourcesOutput(data.ListResourceScanResourcesResult);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListResourceScansCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_ListResourceScansOutput(data.ListResourceScansResult);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListStackInstanceResourceDriftsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_ListStackInstanceResourceDriftsOutput(data.ListStackInstanceResourceDriftsResult);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListStackInstancesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_ListStackInstancesOutput(data.ListStackInstancesResult);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListStackRefactorActionsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_ListStackRefactorActionsOutput(data.ListStackRefactorActionsResult);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListStackRefactorsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_ListStackRefactorsOutput(data.ListStackRefactorsResult);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListStackResourcesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_ListStackResourcesOutput(data.ListStackResourcesResult);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListStacksCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_ListStacksOutput(data.ListStacksResult);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListStackSetAutoDeploymentTargetsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_ListStackSetAutoDeploymentTargetsOutput(data.ListStackSetAutoDeploymentTargetsResult);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListStackSetOperationResultsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_ListStackSetOperationResultsOutput(data.ListStackSetOperationResultsResult);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListStackSetOperationsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_ListStackSetOperationsOutput(data.ListStackSetOperationsResult);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListStackSetsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_ListStackSetsOutput(data.ListStackSetsResult);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListTypeRegistrationsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_ListTypeRegistrationsOutput(data.ListTypeRegistrationsResult);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListTypesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_ListTypesOutput(data.ListTypesResult);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListTypeVersionsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_ListTypeVersionsOutput(data.ListTypeVersionsResult);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_PublishTypeCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_PublishTypeOutput(data.PublishTypeResult);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_RecordHandlerProgressCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_RecordHandlerProgressOutput(data.RecordHandlerProgressResult);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_RegisterPublisherCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_RegisterPublisherOutput(data.RegisterPublisherResult);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_RegisterTypeCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_RegisterTypeOutput(data.RegisterTypeResult);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_RollbackStackCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_RollbackStackOutput(data.RollbackStackResult);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_SetStackPolicyCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await smithyClient.collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_SetTypeConfigurationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_SetTypeConfigurationOutput(data.SetTypeConfigurationResult);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_SetTypeDefaultVersionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_SetTypeDefaultVersionOutput(data.SetTypeDefaultVersionResult);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_SignalResourceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await smithyClient.collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_StartResourceScanCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_StartResourceScanOutput(data.StartResourceScanResult);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_StopStackSetOperationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_StopStackSetOperationOutput(data.StopStackSetOperationResult);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_TestTypeCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_TestTypeOutput(data.TestTypeResult);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_UpdateGeneratedTemplateCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_UpdateGeneratedTemplateOutput(data.UpdateGeneratedTemplateResult);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_UpdateStackCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_UpdateStackOutput(data.UpdateStackResult);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_UpdateStackInstancesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_UpdateStackInstancesOutput(data.UpdateStackInstancesResult);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_UpdateStackSetCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_UpdateStackSetOutput(data.UpdateStackSetResult);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_UpdateTerminationProtectionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_UpdateTerminationProtectionOutput(data.UpdateTerminationProtectionResult);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ValidateTemplateCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_ValidateTemplateOutput(data.ValidateTemplateResult);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await core$1.parseXmlErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidOperationException":
        case "com.amazonaws.cloudformation#InvalidOperationException":
            throw await de_InvalidOperationExceptionRes(parsedOutput);
        case "OperationNotFoundException":
        case "com.amazonaws.cloudformation#OperationNotFoundException":
            throw await de_OperationNotFoundExceptionRes(parsedOutput);
        case "CFNRegistryException":
        case "com.amazonaws.cloudformation#CFNRegistryException":
            throw await de_CFNRegistryExceptionRes(parsedOutput);
        case "TypeNotFoundException":
        case "com.amazonaws.cloudformation#TypeNotFoundException":
            throw await de_TypeNotFoundExceptionRes(parsedOutput);
        case "TypeConfigurationNotFoundException":
        case "com.amazonaws.cloudformation#TypeConfigurationNotFoundException":
            throw await de_TypeConfigurationNotFoundExceptionRes(parsedOutput);
        case "TokenAlreadyExistsException":
        case "com.amazonaws.cloudformation#TokenAlreadyExistsException":
            throw await de_TokenAlreadyExistsExceptionRes(parsedOutput);
        case "AlreadyExistsException":
        case "com.amazonaws.cloudformation#AlreadyExistsException":
            throw await de_AlreadyExistsExceptionRes(parsedOutput);
        case "InsufficientCapabilitiesException":
        case "com.amazonaws.cloudformation#InsufficientCapabilitiesException":
            throw await de_InsufficientCapabilitiesExceptionRes(parsedOutput);
        case "LimitExceededException":
        case "com.amazonaws.cloudformation#LimitExceededException":
            throw await de_LimitExceededExceptionRes(parsedOutput);
        case "ConcurrentResourcesLimitExceeded":
        case "com.amazonaws.cloudformation#ConcurrentResourcesLimitExceededException":
            throw await de_ConcurrentResourcesLimitExceededExceptionRes(parsedOutput);
        case "OperationIdAlreadyExistsException":
        case "com.amazonaws.cloudformation#OperationIdAlreadyExistsException":
            throw await de_OperationIdAlreadyExistsExceptionRes(parsedOutput);
        case "OperationInProgressException":
        case "com.amazonaws.cloudformation#OperationInProgressException":
            throw await de_OperationInProgressExceptionRes(parsedOutput);
        case "StackSetNotFoundException":
        case "com.amazonaws.cloudformation#StackSetNotFoundException":
            throw await de_StackSetNotFoundExceptionRes(parsedOutput);
        case "StaleRequestException":
        case "com.amazonaws.cloudformation#StaleRequestException":
            throw await de_StaleRequestExceptionRes(parsedOutput);
        case "CreatedButModifiedException":
        case "com.amazonaws.cloudformation#CreatedButModifiedException":
            throw await de_CreatedButModifiedExceptionRes(parsedOutput);
        case "NameAlreadyExistsException":
        case "com.amazonaws.cloudformation#NameAlreadyExistsException":
            throw await de_NameAlreadyExistsExceptionRes(parsedOutput);
        case "InvalidChangeSetStatus":
        case "com.amazonaws.cloudformation#InvalidChangeSetStatusException":
            throw await de_InvalidChangeSetStatusExceptionRes(parsedOutput);
        case "GeneratedTemplateNotFound":
        case "com.amazonaws.cloudformation#GeneratedTemplateNotFoundException":
            throw await de_GeneratedTemplateNotFoundExceptionRes(parsedOutput);
        case "StackSetNotEmptyException":
        case "com.amazonaws.cloudformation#StackSetNotEmptyException":
            throw await de_StackSetNotEmptyExceptionRes(parsedOutput);
        case "ChangeSetNotFound":
        case "com.amazonaws.cloudformation#ChangeSetNotFoundException":
            throw await de_ChangeSetNotFoundExceptionRes(parsedOutput);
        case "ResourceScanNotFound":
        case "com.amazonaws.cloudformation#ResourceScanNotFoundException":
            throw await de_ResourceScanNotFoundExceptionRes(parsedOutput);
        case "StackInstanceNotFoundException":
        case "com.amazonaws.cloudformation#StackInstanceNotFoundException":
            throw await de_StackInstanceNotFoundExceptionRes(parsedOutput);
        case "StackRefactorNotFoundException":
        case "com.amazonaws.cloudformation#StackRefactorNotFoundException":
            throw await de_StackRefactorNotFoundExceptionRes(parsedOutput);
        case "StackNotFoundException":
        case "com.amazonaws.cloudformation#StackNotFoundException":
            throw await de_StackNotFoundExceptionRes(parsedOutput);
        case "HookResultNotFound":
        case "com.amazonaws.cloudformation#HookResultNotFoundException":
            throw await de_HookResultNotFoundExceptionRes(parsedOutput);
        case "ResourceScanInProgress":
        case "com.amazonaws.cloudformation#ResourceScanInProgressException":
            throw await de_ResourceScanInProgressExceptionRes(parsedOutput);
        case "ConditionalCheckFailed":
        case "com.amazonaws.cloudformation#OperationStatusCheckFailedException":
            throw await de_OperationStatusCheckFailedExceptionRes(parsedOutput);
        case "InvalidStateTransition":
        case "com.amazonaws.cloudformation#InvalidStateTransitionException":
            throw await de_InvalidStateTransitionExceptionRes(parsedOutput);
        case "ResourceScanLimitExceeded":
        case "com.amazonaws.cloudformation#ResourceScanLimitExceededException":
            throw await de_ResourceScanLimitExceededExceptionRes(parsedOutput);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                errorCode,
            });
    }
};
const de_AlreadyExistsExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_AlreadyExistsException(body.Error);
    const exception = new AlreadyExistsException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_CFNRegistryExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_CFNRegistryException(body.Error);
    const exception = new CFNRegistryException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_ChangeSetNotFoundExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_ChangeSetNotFoundException(body.Error);
    const exception = new ChangeSetNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_ConcurrentResourcesLimitExceededExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_ConcurrentResourcesLimitExceededException(body.Error);
    const exception = new ConcurrentResourcesLimitExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_CreatedButModifiedExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_CreatedButModifiedException(body.Error);
    const exception = new CreatedButModifiedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_GeneratedTemplateNotFoundExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_GeneratedTemplateNotFoundException(body.Error);
    const exception = new GeneratedTemplateNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_HookResultNotFoundExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_HookResultNotFoundException(body.Error);
    const exception = new HookResultNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_InsufficientCapabilitiesExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_InsufficientCapabilitiesException(body.Error);
    const exception = new InsufficientCapabilitiesException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_InvalidChangeSetStatusExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_InvalidChangeSetStatusException(body.Error);
    const exception = new InvalidChangeSetStatusException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_InvalidOperationExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_InvalidOperationException(body.Error);
    const exception = new InvalidOperationException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_InvalidStateTransitionExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_InvalidStateTransitionException(body.Error);
    const exception = new InvalidStateTransitionException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_LimitExceededExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_LimitExceededException(body.Error);
    const exception = new LimitExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_NameAlreadyExistsExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_NameAlreadyExistsException(body.Error);
    const exception = new NameAlreadyExistsException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_OperationIdAlreadyExistsExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_OperationIdAlreadyExistsException(body.Error);
    const exception = new OperationIdAlreadyExistsException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_OperationInProgressExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_OperationInProgressException(body.Error);
    const exception = new OperationInProgressException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_OperationNotFoundExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_OperationNotFoundException(body.Error);
    const exception = new OperationNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_OperationStatusCheckFailedExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_OperationStatusCheckFailedException(body.Error);
    const exception = new OperationStatusCheckFailedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_ResourceScanInProgressExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_ResourceScanInProgressException(body.Error);
    const exception = new ResourceScanInProgressException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_ResourceScanLimitExceededExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_ResourceScanLimitExceededException(body.Error);
    const exception = new ResourceScanLimitExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_ResourceScanNotFoundExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_ResourceScanNotFoundException(body.Error);
    const exception = new ResourceScanNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_StackInstanceNotFoundExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_StackInstanceNotFoundException(body.Error);
    const exception = new StackInstanceNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_StackNotFoundExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_StackNotFoundException(body.Error);
    const exception = new StackNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_StackRefactorNotFoundExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_StackRefactorNotFoundException(body.Error);
    const exception = new StackRefactorNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_StackSetNotEmptyExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_StackSetNotEmptyException(body.Error);
    const exception = new StackSetNotEmptyException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_StackSetNotFoundExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_StackSetNotFoundException(body.Error);
    const exception = new StackSetNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_StaleRequestExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_StaleRequestException(body.Error);
    const exception = new StaleRequestException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_TokenAlreadyExistsExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_TokenAlreadyExistsException(body.Error);
    const exception = new TokenAlreadyExistsException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_TypeConfigurationNotFoundExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_TypeConfigurationNotFoundException(body.Error);
    const exception = new TypeConfigurationNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_TypeNotFoundExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_TypeNotFoundException(body.Error);
    const exception = new TypeNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const se_AccountList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`member.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_ActivateOrganizationsAccessInput = (input, context) => {
    const entries = {};
    return entries;
};
const se_ActivateTypeInput = (input, context) => {
    const entries = {};
    if (input[_T] != null) {
        entries[_T] = input[_T];
    }
    if (input[_PTA] != null) {
        entries[_PTA] = input[_PTA];
    }
    if (input[_PI] != null) {
        entries[_PI] = input[_PI];
    }
    if (input[_TN] != null) {
        entries[_TN] = input[_TN];
    }
    if (input[_TNA] != null) {
        entries[_TNA] = input[_TNA];
    }
    if (input[_AU] != null) {
        entries[_AU] = input[_AU];
    }
    if (input[_LC] != null) {
        const memberEntries = se_LoggingConfig(input[_LC]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `LoggingConfig.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_ERA] != null) {
        entries[_ERA] = input[_ERA];
    }
    if (input[_VB] != null) {
        entries[_VB] = input[_VB];
    }
    if (input[_MV] != null) {
        entries[_MV] = input[_MV];
    }
    return entries;
};
const se_AutoDeployment = (input, context) => {
    const entries = {};
    if (input[_E] != null) {
        entries[_E] = input[_E];
    }
    if (input[_RSOAR] != null) {
        entries[_RSOAR] = input[_RSOAR];
    }
    return entries;
};
const se_BatchDescribeTypeConfigurationsInput = (input, context) => {
    const entries = {};
    if (input[_TCI] != null) {
        const memberEntries = se_TypeConfigurationIdentifiers(input[_TCI]);
        if (input[_TCI]?.length === 0) {
            entries.TypeConfigurationIdentifiers = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TypeConfigurationIdentifiers.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_CancelUpdateStackInput = (input, context) => {
    const entries = {};
    if (input[_SN] != null) {
        entries[_SN] = input[_SN];
    }
    if (input[_CRT] != null) {
        entries[_CRT] = input[_CRT];
    }
    return entries;
};
const se_Capabilities = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`member.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_ContinueUpdateRollbackInput = (input, context) => {
    const entries = {};
    if (input[_SN] != null) {
        entries[_SN] = input[_SN];
    }
    if (input[_RARN] != null) {
        entries[_RARN] = input[_RARN];
    }
    if (input[_RTS] != null) {
        const memberEntries = se_ResourcesToSkip(input[_RTS]);
        if (input[_RTS]?.length === 0) {
            entries.ResourcesToSkip = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ResourcesToSkip.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_CRT] != null) {
        entries[_CRT] = input[_CRT];
    }
    return entries;
};
const se_CreateChangeSetInput = (input, context) => {
    const entries = {};
    if (input[_SN] != null) {
        entries[_SN] = input[_SN];
    }
    if (input[_TB] != null) {
        entries[_TB] = input[_TB];
    }
    if (input[_TURL] != null) {
        entries[_TURL] = input[_TURL];
    }
    if (input[_UPT] != null) {
        entries[_UPT] = input[_UPT];
    }
    if (input[_P] != null) {
        const memberEntries = se_Parameters(input[_P]);
        if (input[_P]?.length === 0) {
            entries.Parameters = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Parameters.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_C] != null) {
        const memberEntries = se_Capabilities(input[_C]);
        if (input[_C]?.length === 0) {
            entries.Capabilities = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Capabilities.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_RTe] != null) {
        const memberEntries = se_ResourceTypes(input[_RTe]);
        if (input[_RTe]?.length === 0) {
            entries.ResourceTypes = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ResourceTypes.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_RARN] != null) {
        entries[_RARN] = input[_RARN];
    }
    if (input[_RC] != null) {
        const memberEntries = se_RollbackConfiguration(input[_RC]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `RollbackConfiguration.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_NARN] != null) {
        const memberEntries = se_NotificationARNs(input[_NARN]);
        if (input[_NARN]?.length === 0) {
            entries.NotificationARNs = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `NotificationARNs.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_Ta] != null) {
        const memberEntries = se_Tags(input[_Ta]);
        if (input[_Ta]?.length === 0) {
            entries.Tags = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Tags.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_CSN] != null) {
        entries[_CSN] = input[_CSN];
    }
    if (input[_CT] != null) {
        entries[_CT] = input[_CT];
    }
    if (input[_D] != null) {
        entries[_D] = input[_D];
    }
    if (input[_CST] != null) {
        entries[_CST] = input[_CST];
    }
    if (input[_RTI] != null) {
        const memberEntries = se_ResourcesToImport(input[_RTI]);
        if (input[_RTI]?.length === 0) {
            entries.ResourcesToImport = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ResourcesToImport.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_INS] != null) {
        entries[_INS] = input[_INS];
    }
    if (input[_OSF] != null) {
        entries[_OSF] = input[_OSF];
    }
    if (input[_IER] != null) {
        entries[_IER] = input[_IER];
    }
    return entries;
};
const se_CreateGeneratedTemplateInput = (input, context) => {
    const entries = {};
    if (input[_R] != null) {
        const memberEntries = se_ResourceDefinitions(input[_R]);
        if (input[_R]?.length === 0) {
            entries.Resources = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Resources.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_GTN] != null) {
        entries[_GTN] = input[_GTN];
    }
    if (input[_SN] != null) {
        entries[_SN] = input[_SN];
    }
    if (input[_TC] != null) {
        const memberEntries = se_TemplateConfiguration(input[_TC]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TemplateConfiguration.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_CreateStackInput = (input, context) => {
    const entries = {};
    if (input[_SN] != null) {
        entries[_SN] = input[_SN];
    }
    if (input[_TB] != null) {
        entries[_TB] = input[_TB];
    }
    if (input[_TURL] != null) {
        entries[_TURL] = input[_TURL];
    }
    if (input[_P] != null) {
        const memberEntries = se_Parameters(input[_P]);
        if (input[_P]?.length === 0) {
            entries.Parameters = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Parameters.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_DR] != null) {
        entries[_DR] = input[_DR];
    }
    if (input[_RC] != null) {
        const memberEntries = se_RollbackConfiguration(input[_RC]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `RollbackConfiguration.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_TIM] != null) {
        entries[_TIM] = input[_TIM];
    }
    if (input[_NARN] != null) {
        const memberEntries = se_NotificationARNs(input[_NARN]);
        if (input[_NARN]?.length === 0) {
            entries.NotificationARNs = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `NotificationARNs.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_C] != null) {
        const memberEntries = se_Capabilities(input[_C]);
        if (input[_C]?.length === 0) {
            entries.Capabilities = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Capabilities.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_RTe] != null) {
        const memberEntries = se_ResourceTypes(input[_RTe]);
        if (input[_RTe]?.length === 0) {
            entries.ResourceTypes = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ResourceTypes.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_RARN] != null) {
        entries[_RARN] = input[_RARN];
    }
    if (input[_OF] != null) {
        entries[_OF] = input[_OF];
    }
    if (input[_SPB] != null) {
        entries[_SPB] = input[_SPB];
    }
    if (input[_SPURL] != null) {
        entries[_SPURL] = input[_SPURL];
    }
    if (input[_Ta] != null) {
        const memberEntries = se_Tags(input[_Ta]);
        if (input[_Ta]?.length === 0) {
            entries.Tags = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Tags.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_CRT] != null) {
        entries[_CRT] = input[_CRT];
    }
    if (input[_ETP] != null) {
        entries[_ETP] = input[_ETP];
    }
    if (input[_REOC] != null) {
        entries[_REOC] = input[_REOC];
    }
    return entries;
};
const se_CreateStackInstancesInput = (input, context) => {
    const entries = {};
    if (input[_SSN] != null) {
        entries[_SSN] = input[_SSN];
    }
    if (input[_Ac] != null) {
        const memberEntries = se_AccountList(input[_Ac]);
        if (input[_Ac]?.length === 0) {
            entries.Accounts = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Accounts.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_DTep] != null) {
        const memberEntries = se_DeploymentTargets(input[_DTep]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `DeploymentTargets.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_Re] != null) {
        const memberEntries = se_RegionList(input[_Re]);
        if (input[_Re]?.length === 0) {
            entries.Regions = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Regions.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_PO] != null) {
        const memberEntries = se_Parameters(input[_PO]);
        if (input[_PO]?.length === 0) {
            entries.ParameterOverrides = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ParameterOverrides.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_OP] != null) {
        const memberEntries = se_StackSetOperationPreferences(input[_OP]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `OperationPreferences.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_OI] === undefined) {
        input[_OI] = uuid.v4();
    }
    if (input[_OI] != null) {
        entries[_OI] = input[_OI];
    }
    if (input[_CA] != null) {
        entries[_CA] = input[_CA];
    }
    return entries;
};
const se_CreateStackRefactorInput = (input, context) => {
    const entries = {};
    if (input[_D] != null) {
        entries[_D] = input[_D];
    }
    if (input[_ESC] != null) {
        entries[_ESC] = input[_ESC];
    }
    if (input[_RM] != null) {
        const memberEntries = se_ResourceMappings(input[_RM]);
        if (input[_RM]?.length === 0) {
            entries.ResourceMappings = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ResourceMappings.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_SD] != null) {
        const memberEntries = se_StackDefinitions(input[_SD]);
        if (input[_SD]?.length === 0) {
            entries.StackDefinitions = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `StackDefinitions.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_CreateStackSetInput = (input, context) => {
    const entries = {};
    if (input[_SSN] != null) {
        entries[_SSN] = input[_SSN];
    }
    if (input[_D] != null) {
        entries[_D] = input[_D];
    }
    if (input[_TB] != null) {
        entries[_TB] = input[_TB];
    }
    if (input[_TURL] != null) {
        entries[_TURL] = input[_TURL];
    }
    if (input[_SI] != null) {
        entries[_SI] = input[_SI];
    }
    if (input[_P] != null) {
        const memberEntries = se_Parameters(input[_P]);
        if (input[_P]?.length === 0) {
            entries.Parameters = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Parameters.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_C] != null) {
        const memberEntries = se_Capabilities(input[_C]);
        if (input[_C]?.length === 0) {
            entries.Capabilities = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Capabilities.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_Ta] != null) {
        const memberEntries = se_Tags(input[_Ta]);
        if (input[_Ta]?.length === 0) {
            entries.Tags = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Tags.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_ARARN] != null) {
        entries[_ARARN] = input[_ARARN];
    }
    if (input[_ERN] != null) {
        entries[_ERN] = input[_ERN];
    }
    if (input[_PM] != null) {
        entries[_PM] = input[_PM];
    }
    if (input[_AD] != null) {
        const memberEntries = se_AutoDeployment(input[_AD]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `AutoDeployment.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_CA] != null) {
        entries[_CA] = input[_CA];
    }
    if (input[_CRT] === undefined) {
        input[_CRT] = uuid.v4();
    }
    if (input[_CRT] != null) {
        entries[_CRT] = input[_CRT];
    }
    if (input[_ME] != null) {
        const memberEntries = se_ManagedExecution(input[_ME]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ManagedExecution.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_DeactivateOrganizationsAccessInput = (input, context) => {
    const entries = {};
    return entries;
};
const se_DeactivateTypeInput = (input, context) => {
    const entries = {};
    if (input[_TN] != null) {
        entries[_TN] = input[_TN];
    }
    if (input[_T] != null) {
        entries[_T] = input[_T];
    }
    if (input[_Ar] != null) {
        entries[_Ar] = input[_Ar];
    }
    return entries;
};
const se_DeleteChangeSetInput = (input, context) => {
    const entries = {};
    if (input[_CSN] != null) {
        entries[_CSN] = input[_CSN];
    }
    if (input[_SN] != null) {
        entries[_SN] = input[_SN];
    }
    return entries;
};
const se_DeleteGeneratedTemplateInput = (input, context) => {
    const entries = {};
    if (input[_GTN] != null) {
        entries[_GTN] = input[_GTN];
    }
    return entries;
};
const se_DeleteStackInput = (input, context) => {
    const entries = {};
    if (input[_SN] != null) {
        entries[_SN] = input[_SN];
    }
    if (input[_RR] != null) {
        const memberEntries = se_RetainResources(input[_RR]);
        if (input[_RR]?.length === 0) {
            entries.RetainResources = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `RetainResources.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_RARN] != null) {
        entries[_RARN] = input[_RARN];
    }
    if (input[_CRT] != null) {
        entries[_CRT] = input[_CRT];
    }
    if (input[_DM] != null) {
        entries[_DM] = input[_DM];
    }
    return entries;
};
const se_DeleteStackInstancesInput = (input, context) => {
    const entries = {};
    if (input[_SSN] != null) {
        entries[_SSN] = input[_SSN];
    }
    if (input[_Ac] != null) {
        const memberEntries = se_AccountList(input[_Ac]);
        if (input[_Ac]?.length === 0) {
            entries.Accounts = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Accounts.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_DTep] != null) {
        const memberEntries = se_DeploymentTargets(input[_DTep]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `DeploymentTargets.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_Re] != null) {
        const memberEntries = se_RegionList(input[_Re]);
        if (input[_Re]?.length === 0) {
            entries.Regions = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Regions.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_OP] != null) {
        const memberEntries = se_StackSetOperationPreferences(input[_OP]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `OperationPreferences.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_RSe] != null) {
        entries[_RSe] = input[_RSe];
    }
    if (input[_OI] === undefined) {
        input[_OI] = uuid.v4();
    }
    if (input[_OI] != null) {
        entries[_OI] = input[_OI];
    }
    if (input[_CA] != null) {
        entries[_CA] = input[_CA];
    }
    return entries;
};
const se_DeleteStackSetInput = (input, context) => {
    const entries = {};
    if (input[_SSN] != null) {
        entries[_SSN] = input[_SSN];
    }
    if (input[_CA] != null) {
        entries[_CA] = input[_CA];
    }
    return entries;
};
const se_DeploymentTargets = (input, context) => {
    const entries = {};
    if (input[_Ac] != null) {
        const memberEntries = se_AccountList(input[_Ac]);
        if (input[_Ac]?.length === 0) {
            entries.Accounts = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Accounts.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_AUc] != null) {
        entries[_AUc] = input[_AUc];
    }
    if (input[_OUI] != null) {
        const memberEntries = se_OrganizationalUnitIdList(input[_OUI]);
        if (input[_OUI]?.length === 0) {
            entries.OrganizationalUnitIds = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `OrganizationalUnitIds.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_AFT] != null) {
        entries[_AFT] = input[_AFT];
    }
    return entries;
};
const se_DeregisterTypeInput = (input, context) => {
    const entries = {};
    if (input[_Ar] != null) {
        entries[_Ar] = input[_Ar];
    }
    if (input[_T] != null) {
        entries[_T] = input[_T];
    }
    if (input[_TN] != null) {
        entries[_TN] = input[_TN];
    }
    if (input[_VI] != null) {
        entries[_VI] = input[_VI];
    }
    return entries;
};
const se_DescribeAccountLimitsInput = (input, context) => {
    const entries = {};
    if (input[_NT] != null) {
        entries[_NT] = input[_NT];
    }
    return entries;
};
const se_DescribeChangeSetHooksInput = (input, context) => {
    const entries = {};
    if (input[_CSN] != null) {
        entries[_CSN] = input[_CSN];
    }
    if (input[_SN] != null) {
        entries[_SN] = input[_SN];
    }
    if (input[_NT] != null) {
        entries[_NT] = input[_NT];
    }
    if (input[_LRI] != null) {
        entries[_LRI] = input[_LRI];
    }
    return entries;
};
const se_DescribeChangeSetInput = (input, context) => {
    const entries = {};
    if (input[_CSN] != null) {
        entries[_CSN] = input[_CSN];
    }
    if (input[_SN] != null) {
        entries[_SN] = input[_SN];
    }
    if (input[_NT] != null) {
        entries[_NT] = input[_NT];
    }
    if (input[_IPV] != null) {
        entries[_IPV] = input[_IPV];
    }
    return entries;
};
const se_DescribeGeneratedTemplateInput = (input, context) => {
    const entries = {};
    if (input[_GTN] != null) {
        entries[_GTN] = input[_GTN];
    }
    return entries;
};
const se_DescribeOrganizationsAccessInput = (input, context) => {
    const entries = {};
    if (input[_CA] != null) {
        entries[_CA] = input[_CA];
    }
    return entries;
};
const se_DescribePublisherInput = (input, context) => {
    const entries = {};
    if (input[_PI] != null) {
        entries[_PI] = input[_PI];
    }
    return entries;
};
const se_DescribeResourceScanInput = (input, context) => {
    const entries = {};
    if (input[_RSI] != null) {
        entries[_RSI] = input[_RSI];
    }
    return entries;
};
const se_DescribeStackDriftDetectionStatusInput = (input, context) => {
    const entries = {};
    if (input[_SDDI] != null) {
        entries[_SDDI] = input[_SDDI];
    }
    return entries;
};
const se_DescribeStackEventsInput = (input, context) => {
    const entries = {};
    if (input[_SN] != null) {
        entries[_SN] = input[_SN];
    }
    if (input[_NT] != null) {
        entries[_NT] = input[_NT];
    }
    return entries;
};
const se_DescribeStackInstanceInput = (input, context) => {
    const entries = {};
    if (input[_SSN] != null) {
        entries[_SSN] = input[_SSN];
    }
    if (input[_SIA] != null) {
        entries[_SIA] = input[_SIA];
    }
    if (input[_SIR] != null) {
        entries[_SIR] = input[_SIR];
    }
    if (input[_CA] != null) {
        entries[_CA] = input[_CA];
    }
    return entries;
};
const se_DescribeStackRefactorInput = (input, context) => {
    const entries = {};
    if (input[_SRI] != null) {
        entries[_SRI] = input[_SRI];
    }
    return entries;
};
const se_DescribeStackResourceDriftsInput = (input, context) => {
    const entries = {};
    if (input[_SN] != null) {
        entries[_SN] = input[_SN];
    }
    if (input[_SRDSF] != null) {
        const memberEntries = se_StackResourceDriftStatusFilters(input[_SRDSF]);
        if (input[_SRDSF]?.length === 0) {
            entries.StackResourceDriftStatusFilters = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `StackResourceDriftStatusFilters.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_NT] != null) {
        entries[_NT] = input[_NT];
    }
    if (input[_MR] != null) {
        entries[_MR] = input[_MR];
    }
    return entries;
};
const se_DescribeStackResourceInput = (input, context) => {
    const entries = {};
    if (input[_SN] != null) {
        entries[_SN] = input[_SN];
    }
    if (input[_LRI] != null) {
        entries[_LRI] = input[_LRI];
    }
    return entries;
};
const se_DescribeStackResourcesInput = (input, context) => {
    const entries = {};
    if (input[_SN] != null) {
        entries[_SN] = input[_SN];
    }
    if (input[_LRI] != null) {
        entries[_LRI] = input[_LRI];
    }
    if (input[_PRI] != null) {
        entries[_PRI] = input[_PRI];
    }
    return entries;
};
const se_DescribeStackSetInput = (input, context) => {
    const entries = {};
    if (input[_SSN] != null) {
        entries[_SSN] = input[_SSN];
    }
    if (input[_CA] != null) {
        entries[_CA] = input[_CA];
    }
    return entries;
};
const se_DescribeStackSetOperationInput = (input, context) => {
    const entries = {};
    if (input[_SSN] != null) {
        entries[_SSN] = input[_SSN];
    }
    if (input[_OI] != null) {
        entries[_OI] = input[_OI];
    }
    if (input[_CA] != null) {
        entries[_CA] = input[_CA];
    }
    return entries;
};
const se_DescribeStacksInput = (input, context) => {
    const entries = {};
    if (input[_SN] != null) {
        entries[_SN] = input[_SN];
    }
    if (input[_NT] != null) {
        entries[_NT] = input[_NT];
    }
    return entries;
};
const se_DescribeTypeInput = (input, context) => {
    const entries = {};
    if (input[_T] != null) {
        entries[_T] = input[_T];
    }
    if (input[_TN] != null) {
        entries[_TN] = input[_TN];
    }
    if (input[_Ar] != null) {
        entries[_Ar] = input[_Ar];
    }
    if (input[_VI] != null) {
        entries[_VI] = input[_VI];
    }
    if (input[_PI] != null) {
        entries[_PI] = input[_PI];
    }
    if (input[_PVN] != null) {
        entries[_PVN] = input[_PVN];
    }
    return entries;
};
const se_DescribeTypeRegistrationInput = (input, context) => {
    const entries = {};
    if (input[_RTeg] != null) {
        entries[_RTeg] = input[_RTeg];
    }
    return entries;
};
const se_DetectStackDriftInput = (input, context) => {
    const entries = {};
    if (input[_SN] != null) {
        entries[_SN] = input[_SN];
    }
    if (input[_LRIo] != null) {
        const memberEntries = se_LogicalResourceIds(input[_LRIo]);
        if (input[_LRIo]?.length === 0) {
            entries.LogicalResourceIds = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `LogicalResourceIds.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_DetectStackResourceDriftInput = (input, context) => {
    const entries = {};
    if (input[_SN] != null) {
        entries[_SN] = input[_SN];
    }
    if (input[_LRI] != null) {
        entries[_LRI] = input[_LRI];
    }
    return entries;
};
const se_DetectStackSetDriftInput = (input, context) => {
    const entries = {};
    if (input[_SSN] != null) {
        entries[_SSN] = input[_SSN];
    }
    if (input[_OP] != null) {
        const memberEntries = se_StackSetOperationPreferences(input[_OP]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `OperationPreferences.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_OI] === undefined) {
        input[_OI] = uuid.v4();
    }
    if (input[_OI] != null) {
        entries[_OI] = input[_OI];
    }
    if (input[_CA] != null) {
        entries[_CA] = input[_CA];
    }
    return entries;
};
const se_EstimateTemplateCostInput = (input, context) => {
    const entries = {};
    if (input[_TB] != null) {
        entries[_TB] = input[_TB];
    }
    if (input[_TURL] != null) {
        entries[_TURL] = input[_TURL];
    }
    if (input[_P] != null) {
        const memberEntries = se_Parameters(input[_P]);
        if (input[_P]?.length === 0) {
            entries.Parameters = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Parameters.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_ExecuteChangeSetInput = (input, context) => {
    const entries = {};
    if (input[_CSN] != null) {
        entries[_CSN] = input[_CSN];
    }
    if (input[_SN] != null) {
        entries[_SN] = input[_SN];
    }
    if (input[_CRT] != null) {
        entries[_CRT] = input[_CRT];
    }
    if (input[_DR] != null) {
        entries[_DR] = input[_DR];
    }
    if (input[_REOC] != null) {
        entries[_REOC] = input[_REOC];
    }
    return entries;
};
const se_ExecuteStackRefactorInput = (input, context) => {
    const entries = {};
    if (input[_SRI] != null) {
        entries[_SRI] = input[_SRI];
    }
    return entries;
};
const se_GetGeneratedTemplateInput = (input, context) => {
    const entries = {};
    if (input[_F] != null) {
        entries[_F] = input[_F];
    }
    if (input[_GTN] != null) {
        entries[_GTN] = input[_GTN];
    }
    return entries;
};
const se_GetStackPolicyInput = (input, context) => {
    const entries = {};
    if (input[_SN] != null) {
        entries[_SN] = input[_SN];
    }
    return entries;
};
const se_GetTemplateInput = (input, context) => {
    const entries = {};
    if (input[_SN] != null) {
        entries[_SN] = input[_SN];
    }
    if (input[_CSN] != null) {
        entries[_CSN] = input[_CSN];
    }
    if (input[_TS] != null) {
        entries[_TS] = input[_TS];
    }
    return entries;
};
const se_GetTemplateSummaryInput = (input, context) => {
    const entries = {};
    if (input[_TB] != null) {
        entries[_TB] = input[_TB];
    }
    if (input[_TURL] != null) {
        entries[_TURL] = input[_TURL];
    }
    if (input[_SN] != null) {
        entries[_SN] = input[_SN];
    }
    if (input[_SSN] != null) {
        entries[_SSN] = input[_SSN];
    }
    if (input[_CA] != null) {
        entries[_CA] = input[_CA];
    }
    if (input[_TSC] != null) {
        const memberEntries = se_TemplateSummaryConfig(input[_TSC]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TemplateSummaryConfig.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_ImportStacksToStackSetInput = (input, context) => {
    const entries = {};
    if (input[_SSN] != null) {
        entries[_SSN] = input[_SSN];
    }
    if (input[_SIt] != null) {
        const memberEntries = se_StackIdList(input[_SIt]);
        if (input[_SIt]?.length === 0) {
            entries.StackIds = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `StackIds.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_SIU] != null) {
        entries[_SIU] = input[_SIU];
    }
    if (input[_OUI] != null) {
        const memberEntries = se_OrganizationalUnitIdList(input[_OUI]);
        if (input[_OUI]?.length === 0) {
            entries.OrganizationalUnitIds = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `OrganizationalUnitIds.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_OP] != null) {
        const memberEntries = se_StackSetOperationPreferences(input[_OP]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `OperationPreferences.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_OI] === undefined) {
        input[_OI] = uuid.v4();
    }
    if (input[_OI] != null) {
        entries[_OI] = input[_OI];
    }
    if (input[_CA] != null) {
        entries[_CA] = input[_CA];
    }
    return entries;
};
const se_JazzLogicalResourceIds = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`member.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_JazzResourceIdentifierProperties = (input, context) => {
    const entries = {};
    let counter = 1;
    Object.keys(input)
        .filter((key) => input[key] != null)
        .forEach((key) => {
        entries[`entry.${counter}.key`] = key;
        entries[`entry.${counter}.value`] = input[key];
        counter++;
    });
    return entries;
};
const se_ListChangeSetsInput = (input, context) => {
    const entries = {};
    if (input[_SN] != null) {
        entries[_SN] = input[_SN];
    }
    if (input[_NT] != null) {
        entries[_NT] = input[_NT];
    }
    return entries;
};
const se_ListExportsInput = (input, context) => {
    const entries = {};
    if (input[_NT] != null) {
        entries[_NT] = input[_NT];
    }
    return entries;
};
const se_ListGeneratedTemplatesInput = (input, context) => {
    const entries = {};
    if (input[_NT] != null) {
        entries[_NT] = input[_NT];
    }
    if (input[_MR] != null) {
        entries[_MR] = input[_MR];
    }
    return entries;
};
const se_ListHookResultsInput = (input, context) => {
    const entries = {};
    if (input[_TTa] != null) {
        entries[_TTa] = input[_TTa];
    }
    if (input[_TI] != null) {
        entries[_TI] = input[_TI];
    }
    if (input[_TA] != null) {
        entries[_TA] = input[_TA];
    }
    if (input[_S] != null) {
        entries[_S] = input[_S];
    }
    if (input[_NT] != null) {
        entries[_NT] = input[_NT];
    }
    return entries;
};
const se_ListImportsInput = (input, context) => {
    const entries = {};
    if (input[_EN] != null) {
        entries[_EN] = input[_EN];
    }
    if (input[_NT] != null) {
        entries[_NT] = input[_NT];
    }
    return entries;
};
const se_ListResourceScanRelatedResourcesInput = (input, context) => {
    const entries = {};
    if (input[_RSI] != null) {
        entries[_RSI] = input[_RSI];
    }
    if (input[_R] != null) {
        const memberEntries = se_ScannedResourceIdentifiers(input[_R]);
        if (input[_R]?.length === 0) {
            entries.Resources = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Resources.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_NT] != null) {
        entries[_NT] = input[_NT];
    }
    if (input[_MR] != null) {
        entries[_MR] = input[_MR];
    }
    return entries;
};
const se_ListResourceScanResourcesInput = (input, context) => {
    const entries = {};
    if (input[_RSI] != null) {
        entries[_RSI] = input[_RSI];
    }
    if (input[_RI] != null) {
        entries[_RI] = input[_RI];
    }
    if (input[_RTP] != null) {
        entries[_RTP] = input[_RTP];
    }
    if (input[_TK] != null) {
        entries[_TK] = input[_TK];
    }
    if (input[_TV] != null) {
        entries[_TV] = input[_TV];
    }
    if (input[_NT] != null) {
        entries[_NT] = input[_NT];
    }
    if (input[_MR] != null) {
        entries[_MR] = input[_MR];
    }
    return entries;
};
const se_ListResourceScansInput = (input, context) => {
    const entries = {};
    if (input[_NT] != null) {
        entries[_NT] = input[_NT];
    }
    if (input[_MR] != null) {
        entries[_MR] = input[_MR];
    }
    if (input[_STF] != null) {
        entries[_STF] = input[_STF];
    }
    return entries;
};
const se_ListStackInstanceResourceDriftsInput = (input, context) => {
    const entries = {};
    if (input[_SSN] != null) {
        entries[_SSN] = input[_SSN];
    }
    if (input[_NT] != null) {
        entries[_NT] = input[_NT];
    }
    if (input[_MR] != null) {
        entries[_MR] = input[_MR];
    }
    if (input[_SIRDS] != null) {
        const memberEntries = se_StackResourceDriftStatusFilters(input[_SIRDS]);
        if (input[_SIRDS]?.length === 0) {
            entries.StackInstanceResourceDriftStatuses = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `StackInstanceResourceDriftStatuses.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_SIA] != null) {
        entries[_SIA] = input[_SIA];
    }
    if (input[_SIR] != null) {
        entries[_SIR] = input[_SIR];
    }
    if (input[_OI] != null) {
        entries[_OI] = input[_OI];
    }
    if (input[_CA] != null) {
        entries[_CA] = input[_CA];
    }
    return entries;
};
const se_ListStackInstancesInput = (input, context) => {
    const entries = {};
    if (input[_SSN] != null) {
        entries[_SSN] = input[_SSN];
    }
    if (input[_NT] != null) {
        entries[_NT] = input[_NT];
    }
    if (input[_MR] != null) {
        entries[_MR] = input[_MR];
    }
    if (input[_Fi] != null) {
        const memberEntries = se_StackInstanceFilters(input[_Fi]);
        if (input[_Fi]?.length === 0) {
            entries.Filters = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filters.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_SIA] != null) {
        entries[_SIA] = input[_SIA];
    }
    if (input[_SIR] != null) {
        entries[_SIR] = input[_SIR];
    }
    if (input[_CA] != null) {
        entries[_CA] = input[_CA];
    }
    return entries;
};
const se_ListStackRefactorActionsInput = (input, context) => {
    const entries = {};
    if (input[_SRI] != null) {
        entries[_SRI] = input[_SRI];
    }
    if (input[_NT] != null) {
        entries[_NT] = input[_NT];
    }
    if (input[_MR] != null) {
        entries[_MR] = input[_MR];
    }
    return entries;
};
const se_ListStackRefactorsInput = (input, context) => {
    const entries = {};
    if (input[_ESF] != null) {
        const memberEntries = se_StackRefactorExecutionStatusFilter(input[_ESF]);
        if (input[_ESF]?.length === 0) {
            entries.ExecutionStatusFilter = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ExecutionStatusFilter.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_NT] != null) {
        entries[_NT] = input[_NT];
    }
    if (input[_MR] != null) {
        entries[_MR] = input[_MR];
    }
    return entries;
};
const se_ListStackResourcesInput = (input, context) => {
    const entries = {};
    if (input[_SN] != null) {
        entries[_SN] = input[_SN];
    }
    if (input[_NT] != null) {
        entries[_NT] = input[_NT];
    }
    return entries;
};
const se_ListStackSetAutoDeploymentTargetsInput = (input, context) => {
    const entries = {};
    if (input[_SSN] != null) {
        entries[_SSN] = input[_SSN];
    }
    if (input[_NT] != null) {
        entries[_NT] = input[_NT];
    }
    if (input[_MR] != null) {
        entries[_MR] = input[_MR];
    }
    if (input[_CA] != null) {
        entries[_CA] = input[_CA];
    }
    return entries;
};
const se_ListStackSetOperationResultsInput = (input, context) => {
    const entries = {};
    if (input[_SSN] != null) {
        entries[_SSN] = input[_SSN];
    }
    if (input[_OI] != null) {
        entries[_OI] = input[_OI];
    }
    if (input[_NT] != null) {
        entries[_NT] = input[_NT];
    }
    if (input[_MR] != null) {
        entries[_MR] = input[_MR];
    }
    if (input[_CA] != null) {
        entries[_CA] = input[_CA];
    }
    if (input[_Fi] != null) {
        const memberEntries = se_OperationResultFilters(input[_Fi]);
        if (input[_Fi]?.length === 0) {
            entries.Filters = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filters.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_ListStackSetOperationsInput = (input, context) => {
    const entries = {};
    if (input[_SSN] != null) {
        entries[_SSN] = input[_SSN];
    }
    if (input[_NT] != null) {
        entries[_NT] = input[_NT];
    }
    if (input[_MR] != null) {
        entries[_MR] = input[_MR];
    }
    if (input[_CA] != null) {
        entries[_CA] = input[_CA];
    }
    return entries;
};
const se_ListStackSetsInput = (input, context) => {
    const entries = {};
    if (input[_NT] != null) {
        entries[_NT] = input[_NT];
    }
    if (input[_MR] != null) {
        entries[_MR] = input[_MR];
    }
    if (input[_S] != null) {
        entries[_S] = input[_S];
    }
    if (input[_CA] != null) {
        entries[_CA] = input[_CA];
    }
    return entries;
};
const se_ListStacksInput = (input, context) => {
    const entries = {};
    if (input[_NT] != null) {
        entries[_NT] = input[_NT];
    }
    if (input[_SSF] != null) {
        const memberEntries = se_StackStatusFilter(input[_SSF]);
        if (input[_SSF]?.length === 0) {
            entries.StackStatusFilter = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `StackStatusFilter.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_ListTypeRegistrationsInput = (input, context) => {
    const entries = {};
    if (input[_T] != null) {
        entries[_T] = input[_T];
    }
    if (input[_TN] != null) {
        entries[_TN] = input[_TN];
    }
    if (input[_TA] != null) {
        entries[_TA] = input[_TA];
    }
    if (input[_RSF] != null) {
        entries[_RSF] = input[_RSF];
    }
    if (input[_MR] != null) {
        entries[_MR] = input[_MR];
    }
    if (input[_NT] != null) {
        entries[_NT] = input[_NT];
    }
    return entries;
};
const se_ListTypesInput = (input, context) => {
    const entries = {};
    if (input[_Vi] != null) {
        entries[_Vi] = input[_Vi];
    }
    if (input[_PTr] != null) {
        entries[_PTr] = input[_PTr];
    }
    if (input[_DSep] != null) {
        entries[_DSep] = input[_DSep];
    }
    if (input[_T] != null) {
        entries[_T] = input[_T];
    }
    if (input[_Fi] != null) {
        const memberEntries = se_TypeFilters(input[_Fi]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filters.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_MR] != null) {
        entries[_MR] = input[_MR];
    }
    if (input[_NT] != null) {
        entries[_NT] = input[_NT];
    }
    return entries;
};
const se_ListTypeVersionsInput = (input, context) => {
    const entries = {};
    if (input[_T] != null) {
        entries[_T] = input[_T];
    }
    if (input[_TN] != null) {
        entries[_TN] = input[_TN];
    }
    if (input[_Ar] != null) {
        entries[_Ar] = input[_Ar];
    }
    if (input[_MR] != null) {
        entries[_MR] = input[_MR];
    }
    if (input[_NT] != null) {
        entries[_NT] = input[_NT];
    }
    if (input[_DSep] != null) {
        entries[_DSep] = input[_DSep];
    }
    if (input[_PI] != null) {
        entries[_PI] = input[_PI];
    }
    return entries;
};
const se_LoggingConfig = (input, context) => {
    const entries = {};
    if (input[_LRA] != null) {
        entries[_LRA] = input[_LRA];
    }
    if (input[_LGN] != null) {
        entries[_LGN] = input[_LGN];
    }
    return entries;
};
const se_LogicalResourceIds = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`member.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_ManagedExecution = (input, context) => {
    const entries = {};
    if (input[_Act] != null) {
        entries[_Act] = input[_Act];
    }
    return entries;
};
const se_NotificationARNs = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`member.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_OperationResultFilter = (input, context) => {
    const entries = {};
    if (input[_N] != null) {
        entries[_N] = input[_N];
    }
    if (input[_Va] != null) {
        entries[_Va] = input[_Va];
    }
    return entries;
};
const se_OperationResultFilters = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = se_OperationResultFilter(entry);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`member.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const se_OrganizationalUnitIdList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`member.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_Parameter = (input, context) => {
    const entries = {};
    if (input[_PK] != null) {
        entries[_PK] = input[_PK];
    }
    if (input[_PV] != null) {
        entries[_PV] = input[_PV];
    }
    if (input[_UPV] != null) {
        entries[_UPV] = input[_UPV];
    }
    if (input[_RV] != null) {
        entries[_RV] = input[_RV];
    }
    return entries;
};
const se_Parameters = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = se_Parameter(entry);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`member.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const se_PublishTypeInput = (input, context) => {
    const entries = {};
    if (input[_T] != null) {
        entries[_T] = input[_T];
    }
    if (input[_Ar] != null) {
        entries[_Ar] = input[_Ar];
    }
    if (input[_TN] != null) {
        entries[_TN] = input[_TN];
    }
    if (input[_PVN] != null) {
        entries[_PVN] = input[_PVN];
    }
    return entries;
};
const se_RecordHandlerProgressInput = (input, context) => {
    const entries = {};
    if (input[_BT] != null) {
        entries[_BT] = input[_BT];
    }
    if (input[_OS] != null) {
        entries[_OS] = input[_OS];
    }
    if (input[_COS] != null) {
        entries[_COS] = input[_COS];
    }
    if (input[_SM] != null) {
        entries[_SM] = input[_SM];
    }
    if (input[_EC] != null) {
        entries[_EC] = input[_EC];
    }
    if (input[_RMe] != null) {
        entries[_RMe] = input[_RMe];
    }
    if (input[_CRT] != null) {
        entries[_CRT] = input[_CRT];
    }
    return entries;
};
const se_RegionList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`member.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_RegisterPublisherInput = (input, context) => {
    const entries = {};
    if (input[_ATAC] != null) {
        entries[_ATAC] = input[_ATAC];
    }
    if (input[_CAo] != null) {
        entries[_CAo] = input[_CAo];
    }
    return entries;
};
const se_RegisterTypeInput = (input, context) => {
    const entries = {};
    if (input[_T] != null) {
        entries[_T] = input[_T];
    }
    if (input[_TN] != null) {
        entries[_TN] = input[_TN];
    }
    if (input[_SHP] != null) {
        entries[_SHP] = input[_SHP];
    }
    if (input[_LC] != null) {
        const memberEntries = se_LoggingConfig(input[_LC]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `LoggingConfig.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_ERA] != null) {
        entries[_ERA] = input[_ERA];
    }
    if (input[_CRT] != null) {
        entries[_CRT] = input[_CRT];
    }
    return entries;
};
const se_ResourceDefinition = (input, context) => {
    const entries = {};
    if (input[_RTes] != null) {
        entries[_RTes] = input[_RTes];
    }
    if (input[_LRI] != null) {
        entries[_LRI] = input[_LRI];
    }
    if (input[_RI] != null) {
        const memberEntries = se_ResourceIdentifierProperties(input[_RI]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ResourceIdentifier.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_ResourceDefinitions = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = se_ResourceDefinition(entry);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`member.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const se_ResourceIdentifierProperties = (input, context) => {
    const entries = {};
    let counter = 1;
    Object.keys(input)
        .filter((key) => input[key] != null)
        .forEach((key) => {
        entries[`entry.${counter}.key`] = key;
        entries[`entry.${counter}.value`] = input[key];
        counter++;
    });
    return entries;
};
const se_ResourceLocation = (input, context) => {
    const entries = {};
    if (input[_SN] != null) {
        entries[_SN] = input[_SN];
    }
    if (input[_LRI] != null) {
        entries[_LRI] = input[_LRI];
    }
    return entries;
};
const se_ResourceMapping = (input, context) => {
    const entries = {};
    if (input[_So] != null) {
        const memberEntries = se_ResourceLocation(input[_So]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Source.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_De] != null) {
        const memberEntries = se_ResourceLocation(input[_De]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Destination.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_ResourceMappings = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = se_ResourceMapping(entry);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`member.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const se_ResourcesToImport = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = se_ResourceToImport(entry);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`member.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const se_ResourcesToSkip = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`member.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_ResourceToImport = (input, context) => {
    const entries = {};
    if (input[_RTes] != null) {
        entries[_RTes] = input[_RTes];
    }
    if (input[_LRI] != null) {
        entries[_LRI] = input[_LRI];
    }
    if (input[_RI] != null) {
        const memberEntries = se_ResourceIdentifierProperties(input[_RI]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ResourceIdentifier.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_ResourceTypeFilters = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`member.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_ResourceTypes = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`member.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_RetainResources = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`member.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_RollbackConfiguration = (input, context) => {
    const entries = {};
    if (input[_RTo] != null) {
        const memberEntries = se_RollbackTriggers(input[_RTo]);
        if (input[_RTo]?.length === 0) {
            entries.RollbackTriggers = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `RollbackTriggers.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_MTIM] != null) {
        entries[_MTIM] = input[_MTIM];
    }
    return entries;
};
const se_RollbackStackInput = (input, context) => {
    const entries = {};
    if (input[_SN] != null) {
        entries[_SN] = input[_SN];
    }
    if (input[_RARN] != null) {
        entries[_RARN] = input[_RARN];
    }
    if (input[_CRT] != null) {
        entries[_CRT] = input[_CRT];
    }
    if (input[_REOC] != null) {
        entries[_REOC] = input[_REOC];
    }
    return entries;
};
const se_RollbackTrigger = (input, context) => {
    const entries = {};
    if (input[_Ar] != null) {
        entries[_Ar] = input[_Ar];
    }
    if (input[_T] != null) {
        entries[_T] = input[_T];
    }
    return entries;
};
const se_RollbackTriggers = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = se_RollbackTrigger(entry);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`member.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const se_ScanFilter = (input, context) => {
    const entries = {};
    if (input[_Ty] != null) {
        const memberEntries = se_ResourceTypeFilters(input[_Ty]);
        if (input[_Ty]?.length === 0) {
            entries.Types = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Types.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_ScanFilters = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = se_ScanFilter(entry);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`member.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const se_ScannedResourceIdentifier = (input, context) => {
    const entries = {};
    if (input[_RTes] != null) {
        entries[_RTes] = input[_RTes];
    }
    if (input[_RI] != null) {
        const memberEntries = se_JazzResourceIdentifierProperties(input[_RI]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ResourceIdentifier.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_ScannedResourceIdentifiers = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = se_ScannedResourceIdentifier(entry);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`member.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const se_SetStackPolicyInput = (input, context) => {
    const entries = {};
    if (input[_SN] != null) {
        entries[_SN] = input[_SN];
    }
    if (input[_SPB] != null) {
        entries[_SPB] = input[_SPB];
    }
    if (input[_SPURL] != null) {
        entries[_SPURL] = input[_SPURL];
    }
    return entries;
};
const se_SetTypeConfigurationInput = (input, context) => {
    const entries = {};
    if (input[_TA] != null) {
        entries[_TA] = input[_TA];
    }
    if (input[_Co] != null) {
        entries[_Co] = input[_Co];
    }
    if (input[_CAon] != null) {
        entries[_CAon] = input[_CAon];
    }
    if (input[_TN] != null) {
        entries[_TN] = input[_TN];
    }
    if (input[_T] != null) {
        entries[_T] = input[_T];
    }
    return entries;
};
const se_SetTypeDefaultVersionInput = (input, context) => {
    const entries = {};
    if (input[_Ar] != null) {
        entries[_Ar] = input[_Ar];
    }
    if (input[_T] != null) {
        entries[_T] = input[_T];
    }
    if (input[_TN] != null) {
        entries[_TN] = input[_TN];
    }
    if (input[_VI] != null) {
        entries[_VI] = input[_VI];
    }
    return entries;
};
const se_SignalResourceInput = (input, context) => {
    const entries = {};
    if (input[_SN] != null) {
        entries[_SN] = input[_SN];
    }
    if (input[_LRI] != null) {
        entries[_LRI] = input[_LRI];
    }
    if (input[_UI] != null) {
        entries[_UI] = input[_UI];
    }
    if (input[_S] != null) {
        entries[_S] = input[_S];
    }
    return entries;
};
const se_StackDefinition = (input, context) => {
    const entries = {};
    if (input[_SN] != null) {
        entries[_SN] = input[_SN];
    }
    if (input[_TB] != null) {
        entries[_TB] = input[_TB];
    }
    if (input[_TURL] != null) {
        entries[_TURL] = input[_TURL];
    }
    return entries;
};
const se_StackDefinitions = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = se_StackDefinition(entry);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`member.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const se_StackIdList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`member.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_StackInstanceFilter = (input, context) => {
    const entries = {};
    if (input[_N] != null) {
        entries[_N] = input[_N];
    }
    if (input[_Va] != null) {
        entries[_Va] = input[_Va];
    }
    return entries;
};
const se_StackInstanceFilters = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = se_StackInstanceFilter(entry);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`member.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const se_StackRefactorExecutionStatusFilter = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`member.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_StackResourceDriftStatusFilters = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`member.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_StackSetOperationPreferences = (input, context) => {
    const entries = {};
    if (input[_RCT] != null) {
        entries[_RCT] = input[_RCT];
    }
    if (input[_RO] != null) {
        const memberEntries = se_RegionList(input[_RO]);
        if (input[_RO]?.length === 0) {
            entries.RegionOrder = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `RegionOrder.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_FTC] != null) {
        entries[_FTC] = input[_FTC];
    }
    if (input[_FTP] != null) {
        entries[_FTP] = input[_FTP];
    }
    if (input[_MCC] != null) {
        entries[_MCC] = input[_MCC];
    }
    if (input[_MCP] != null) {
        entries[_MCP] = input[_MCP];
    }
    if (input[_CM] != null) {
        entries[_CM] = input[_CM];
    }
    return entries;
};
const se_StackStatusFilter = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`member.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_StartResourceScanInput = (input, context) => {
    const entries = {};
    if (input[_CRT] != null) {
        entries[_CRT] = input[_CRT];
    }
    if (input[_SF] != null) {
        const memberEntries = se_ScanFilters(input[_SF]);
        if (input[_SF]?.length === 0) {
            entries.ScanFilters = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ScanFilters.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_StopStackSetOperationInput = (input, context) => {
    const entries = {};
    if (input[_SSN] != null) {
        entries[_SSN] = input[_SSN];
    }
    if (input[_OI] != null) {
        entries[_OI] = input[_OI];
    }
    if (input[_CA] != null) {
        entries[_CA] = input[_CA];
    }
    return entries;
};
const se_Tag = (input, context) => {
    const entries = {};
    if (input[_K] != null) {
        entries[_K] = input[_K];
    }
    if (input[_Val] != null) {
        entries[_Val] = input[_Val];
    }
    return entries;
};
const se_Tags = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = se_Tag(entry);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`member.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const se_TemplateConfiguration = (input, context) => {
    const entries = {};
    if (input[_DPe] != null) {
        entries[_DPe] = input[_DPe];
    }
    if (input[_URP] != null) {
        entries[_URP] = input[_URP];
    }
    return entries;
};
const se_TemplateSummaryConfig = (input, context) => {
    const entries = {};
    if (input[_TURTAW] != null) {
        entries[_TURTAW] = input[_TURTAW];
    }
    return entries;
};
const se_TestTypeInput = (input, context) => {
    const entries = {};
    if (input[_Ar] != null) {
        entries[_Ar] = input[_Ar];
    }
    if (input[_T] != null) {
        entries[_T] = input[_T];
    }
    if (input[_TN] != null) {
        entries[_TN] = input[_TN];
    }
    if (input[_VI] != null) {
        entries[_VI] = input[_VI];
    }
    if (input[_LDB] != null) {
        entries[_LDB] = input[_LDB];
    }
    return entries;
};
const se_TypeConfigurationIdentifier = (input, context) => {
    const entries = {};
    if (input[_TA] != null) {
        entries[_TA] = input[_TA];
    }
    if (input[_TCA] != null) {
        entries[_TCA] = input[_TCA];
    }
    if (input[_TCAy] != null) {
        entries[_TCAy] = input[_TCAy];
    }
    if (input[_T] != null) {
        entries[_T] = input[_T];
    }
    if (input[_TN] != null) {
        entries[_TN] = input[_TN];
    }
    return entries;
};
const se_TypeConfigurationIdentifiers = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = se_TypeConfigurationIdentifier(entry);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`member.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const se_TypeFilters = (input, context) => {
    const entries = {};
    if (input[_Ca] != null) {
        entries[_Ca] = input[_Ca];
    }
    if (input[_PI] != null) {
        entries[_PI] = input[_PI];
    }
    if (input[_TNP] != null) {
        entries[_TNP] = input[_TNP];
    }
    return entries;
};
const se_UpdateGeneratedTemplateInput = (input, context) => {
    const entries = {};
    if (input[_GTN] != null) {
        entries[_GTN] = input[_GTN];
    }
    if (input[_NGTN] != null) {
        entries[_NGTN] = input[_NGTN];
    }
    if (input[_AR] != null) {
        const memberEntries = se_ResourceDefinitions(input[_AR]);
        if (input[_AR]?.length === 0) {
            entries.AddResources = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `AddResources.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_RRe] != null) {
        const memberEntries = se_JazzLogicalResourceIds(input[_RRe]);
        if (input[_RRe]?.length === 0) {
            entries.RemoveResources = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `RemoveResources.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_RAR] != null) {
        entries[_RAR] = input[_RAR];
    }
    if (input[_TC] != null) {
        const memberEntries = se_TemplateConfiguration(input[_TC]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TemplateConfiguration.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_UpdateStackInput = (input, context) => {
    const entries = {};
    if (input[_SN] != null) {
        entries[_SN] = input[_SN];
    }
    if (input[_TB] != null) {
        entries[_TB] = input[_TB];
    }
    if (input[_TURL] != null) {
        entries[_TURL] = input[_TURL];
    }
    if (input[_UPT] != null) {
        entries[_UPT] = input[_UPT];
    }
    if (input[_SPDUB] != null) {
        entries[_SPDUB] = input[_SPDUB];
    }
    if (input[_SPDUURL] != null) {
        entries[_SPDUURL] = input[_SPDUURL];
    }
    if (input[_P] != null) {
        const memberEntries = se_Parameters(input[_P]);
        if (input[_P]?.length === 0) {
            entries.Parameters = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Parameters.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_C] != null) {
        const memberEntries = se_Capabilities(input[_C]);
        if (input[_C]?.length === 0) {
            entries.Capabilities = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Capabilities.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_RTe] != null) {
        const memberEntries = se_ResourceTypes(input[_RTe]);
        if (input[_RTe]?.length === 0) {
            entries.ResourceTypes = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ResourceTypes.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_RARN] != null) {
        entries[_RARN] = input[_RARN];
    }
    if (input[_RC] != null) {
        const memberEntries = se_RollbackConfiguration(input[_RC]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `RollbackConfiguration.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_SPB] != null) {
        entries[_SPB] = input[_SPB];
    }
    if (input[_SPURL] != null) {
        entries[_SPURL] = input[_SPURL];
    }
    if (input[_NARN] != null) {
        const memberEntries = se_NotificationARNs(input[_NARN]);
        if (input[_NARN]?.length === 0) {
            entries.NotificationARNs = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `NotificationARNs.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_Ta] != null) {
        const memberEntries = se_Tags(input[_Ta]);
        if (input[_Ta]?.length === 0) {
            entries.Tags = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Tags.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_DR] != null) {
        entries[_DR] = input[_DR];
    }
    if (input[_CRT] != null) {
        entries[_CRT] = input[_CRT];
    }
    if (input[_REOC] != null) {
        entries[_REOC] = input[_REOC];
    }
    return entries;
};
const se_UpdateStackInstancesInput = (input, context) => {
    const entries = {};
    if (input[_SSN] != null) {
        entries[_SSN] = input[_SSN];
    }
    if (input[_Ac] != null) {
        const memberEntries = se_AccountList(input[_Ac]);
        if (input[_Ac]?.length === 0) {
            entries.Accounts = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Accounts.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_DTep] != null) {
        const memberEntries = se_DeploymentTargets(input[_DTep]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `DeploymentTargets.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_Re] != null) {
        const memberEntries = se_RegionList(input[_Re]);
        if (input[_Re]?.length === 0) {
            entries.Regions = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Regions.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_PO] != null) {
        const memberEntries = se_Parameters(input[_PO]);
        if (input[_PO]?.length === 0) {
            entries.ParameterOverrides = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ParameterOverrides.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_OP] != null) {
        const memberEntries = se_StackSetOperationPreferences(input[_OP]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `OperationPreferences.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_OI] === undefined) {
        input[_OI] = uuid.v4();
    }
    if (input[_OI] != null) {
        entries[_OI] = input[_OI];
    }
    if (input[_CA] != null) {
        entries[_CA] = input[_CA];
    }
    return entries;
};
const se_UpdateStackSetInput = (input, context) => {
    const entries = {};
    if (input[_SSN] != null) {
        entries[_SSN] = input[_SSN];
    }
    if (input[_D] != null) {
        entries[_D] = input[_D];
    }
    if (input[_TB] != null) {
        entries[_TB] = input[_TB];
    }
    if (input[_TURL] != null) {
        entries[_TURL] = input[_TURL];
    }
    if (input[_UPT] != null) {
        entries[_UPT] = input[_UPT];
    }
    if (input[_P] != null) {
        const memberEntries = se_Parameters(input[_P]);
        if (input[_P]?.length === 0) {
            entries.Parameters = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Parameters.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_C] != null) {
        const memberEntries = se_Capabilities(input[_C]);
        if (input[_C]?.length === 0) {
            entries.Capabilities = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Capabilities.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_Ta] != null) {
        const memberEntries = se_Tags(input[_Ta]);
        if (input[_Ta]?.length === 0) {
            entries.Tags = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Tags.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_OP] != null) {
        const memberEntries = se_StackSetOperationPreferences(input[_OP]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `OperationPreferences.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_ARARN] != null) {
        entries[_ARARN] = input[_ARARN];
    }
    if (input[_ERN] != null) {
        entries[_ERN] = input[_ERN];
    }
    if (input[_DTep] != null) {
        const memberEntries = se_DeploymentTargets(input[_DTep]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `DeploymentTargets.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_PM] != null) {
        entries[_PM] = input[_PM];
    }
    if (input[_AD] != null) {
        const memberEntries = se_AutoDeployment(input[_AD]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `AutoDeployment.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_OI] === undefined) {
        input[_OI] = uuid.v4();
    }
    if (input[_OI] != null) {
        entries[_OI] = input[_OI];
    }
    if (input[_Ac] != null) {
        const memberEntries = se_AccountList(input[_Ac]);
        if (input[_Ac]?.length === 0) {
            entries.Accounts = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Accounts.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_Re] != null) {
        const memberEntries = se_RegionList(input[_Re]);
        if (input[_Re]?.length === 0) {
            entries.Regions = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Regions.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_CA] != null) {
        entries[_CA] = input[_CA];
    }
    if (input[_ME] != null) {
        const memberEntries = se_ManagedExecution(input[_ME]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ManagedExecution.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_UpdateTerminationProtectionInput = (input, context) => {
    const entries = {};
    if (input[_ETP] != null) {
        entries[_ETP] = input[_ETP];
    }
    if (input[_SN] != null) {
        entries[_SN] = input[_SN];
    }
    return entries;
};
const se_ValidateTemplateInput = (input, context) => {
    const entries = {};
    if (input[_TB] != null) {
        entries[_TB] = input[_TB];
    }
    if (input[_TURL] != null) {
        entries[_TURL] = input[_TURL];
    }
    return entries;
};
const de_AccountGateResult = (output, context) => {
    const contents = {};
    if (output[_S] != null) {
        contents[_S] = smithyClient.expectString(output[_S]);
    }
    if (output[_SRt] != null) {
        contents[_SRt] = smithyClient.expectString(output[_SRt]);
    }
    return contents;
};
const de_AccountLimit = (output, context) => {
    const contents = {};
    if (output[_N] != null) {
        contents[_N] = smithyClient.expectString(output[_N]);
    }
    if (output[_Val] != null) {
        contents[_Val] = smithyClient.strictParseInt32(output[_Val]);
    }
    return contents;
};
const de_AccountLimitList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_AccountLimit(entry);
    });
};
const de_AccountList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return smithyClient.expectString(entry);
    });
};
const de_ActivateOrganizationsAccessOutput = (output, context) => {
    const contents = {};
    return contents;
};
const de_ActivateTypeOutput = (output, context) => {
    const contents = {};
    if (output[_Ar] != null) {
        contents[_Ar] = smithyClient.expectString(output[_Ar]);
    }
    return contents;
};
const de_AllowedValues = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return smithyClient.expectString(entry);
    });
};
const de_AlreadyExistsException = (output, context) => {
    const contents = {};
    if (output[_M] != null) {
        contents[_M] = smithyClient.expectString(output[_M]);
    }
    return contents;
};
const de_AutoDeployment = (output, context) => {
    const contents = {};
    if (output[_E] != null) {
        contents[_E] = smithyClient.parseBoolean(output[_E]);
    }
    if (output[_RSOAR] != null) {
        contents[_RSOAR] = smithyClient.parseBoolean(output[_RSOAR]);
    }
    return contents;
};
const de_BatchDescribeTypeConfigurationsError = (output, context) => {
    const contents = {};
    if (output[_EC] != null) {
        contents[_EC] = smithyClient.expectString(output[_EC]);
    }
    if (output[_EM] != null) {
        contents[_EM] = smithyClient.expectString(output[_EM]);
    }
    if (output[_TCIy] != null) {
        contents[_TCIy] = de_TypeConfigurationIdentifier(output[_TCIy]);
    }
    return contents;
};
const de_BatchDescribeTypeConfigurationsErrors = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_BatchDescribeTypeConfigurationsError(entry);
    });
};
const de_BatchDescribeTypeConfigurationsOutput = (output, context) => {
    const contents = {};
    if (String(output.Errors).trim() === "") {
        contents[_Er] = [];
    }
    else if (output[_Er] != null && output[_Er][_m] != null) {
        contents[_Er] = de_BatchDescribeTypeConfigurationsErrors(smithyClient.getArrayIfSingleItem(output[_Er][_m]));
    }
    if (String(output.UnprocessedTypeConfigurations).trim() === "") {
        contents[_UTC] = [];
    }
    else if (output[_UTC] != null && output[_UTC][_m] != null) {
        contents[_UTC] = de_UnprocessedTypeConfigurations(smithyClient.getArrayIfSingleItem(output[_UTC][_m]));
    }
    if (String(output.TypeConfigurations).trim() === "") {
        contents[_TCy] = [];
    }
    else if (output[_TCy] != null && output[_TCy][_m] != null) {
        contents[_TCy] = de_TypeConfigurationDetailsList(smithyClient.getArrayIfSingleItem(output[_TCy][_m]));
    }
    return contents;
};
const de_Capabilities = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return smithyClient.expectString(entry);
    });
};
const de_CFNRegistryException = (output, context) => {
    const contents = {};
    if (output[_M] != null) {
        contents[_M] = smithyClient.expectString(output[_M]);
    }
    return contents;
};
const de_Change = (output, context) => {
    const contents = {};
    if (output[_T] != null) {
        contents[_T] = smithyClient.expectString(output[_T]);
    }
    if (output[_HIC] != null) {
        contents[_HIC] = smithyClient.strictParseInt32(output[_HIC]);
    }
    if (output[_RCe] != null) {
        contents[_RCe] = de_ResourceChange(output[_RCe]);
    }
    return contents;
};
const de_Changes = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Change(entry);
    });
};
const de_ChangeSetHook = (output, context) => {
    const contents = {};
    if (output[_IP] != null) {
        contents[_IP] = smithyClient.expectString(output[_IP]);
    }
    if (output[_FM] != null) {
        contents[_FM] = smithyClient.expectString(output[_FM]);
    }
    if (output[_TN] != null) {
        contents[_TN] = smithyClient.expectString(output[_TN]);
    }
    if (output[_TVI] != null) {
        contents[_TVI] = smithyClient.expectString(output[_TVI]);
    }
    if (output[_TCVI] != null) {
        contents[_TCVI] = smithyClient.expectString(output[_TCVI]);
    }
    if (output[_TD] != null) {
        contents[_TD] = de_ChangeSetHookTargetDetails(output[_TD]);
    }
    return contents;
};
const de_ChangeSetHookResourceTargetDetails = (output, context) => {
    const contents = {};
    if (output[_LRI] != null) {
        contents[_LRI] = smithyClient.expectString(output[_LRI]);
    }
    if (output[_RTes] != null) {
        contents[_RTes] = smithyClient.expectString(output[_RTes]);
    }
    if (output[_RA] != null) {
        contents[_RA] = smithyClient.expectString(output[_RA]);
    }
    return contents;
};
const de_ChangeSetHooks = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ChangeSetHook(entry);
    });
};
const de_ChangeSetHookTargetDetails = (output, context) => {
    const contents = {};
    if (output[_TTa] != null) {
        contents[_TTa] = smithyClient.expectString(output[_TTa]);
    }
    if (output[_RTD] != null) {
        contents[_RTD] = de_ChangeSetHookResourceTargetDetails(output[_RTD]);
    }
    return contents;
};
const de_ChangeSetNotFoundException = (output, context) => {
    const contents = {};
    if (output[_M] != null) {
        contents[_M] = smithyClient.expectString(output[_M]);
    }
    return contents;
};
const de_ChangeSetSummaries = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ChangeSetSummary(entry);
    });
};
const de_ChangeSetSummary = (output, context) => {
    const contents = {};
    if (output[_SI] != null) {
        contents[_SI] = smithyClient.expectString(output[_SI]);
    }
    if (output[_SN] != null) {
        contents[_SN] = smithyClient.expectString(output[_SN]);
    }
    if (output[_CSIh] != null) {
        contents[_CSIh] = smithyClient.expectString(output[_CSIh]);
    }
    if (output[_CSN] != null) {
        contents[_CSN] = smithyClient.expectString(output[_CSN]);
    }
    if (output[_ES] != null) {
        contents[_ES] = smithyClient.expectString(output[_ES]);
    }
    if (output[_S] != null) {
        contents[_S] = smithyClient.expectString(output[_S]);
    }
    if (output[_SRt] != null) {
        contents[_SRt] = smithyClient.expectString(output[_SRt]);
    }
    if (output[_CTr] != null) {
        contents[_CTr] = smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(output[_CTr]));
    }
    if (output[_D] != null) {
        contents[_D] = smithyClient.expectString(output[_D]);
    }
    if (output[_INS] != null) {
        contents[_INS] = smithyClient.parseBoolean(output[_INS]);
    }
    if (output[_PCSI] != null) {
        contents[_PCSI] = smithyClient.expectString(output[_PCSI]);
    }
    if (output[_RCSI] != null) {
        contents[_RCSI] = smithyClient.expectString(output[_RCSI]);
    }
    if (output[_IER] != null) {
        contents[_IER] = smithyClient.parseBoolean(output[_IER]);
    }
    return contents;
};
const de_ConcurrentResourcesLimitExceededException = (output, context) => {
    const contents = {};
    if (output[_M] != null) {
        contents[_M] = smithyClient.expectString(output[_M]);
    }
    return contents;
};
const de_ContinueUpdateRollbackOutput = (output, context) => {
    const contents = {};
    return contents;
};
const de_CreateChangeSetOutput = (output, context) => {
    const contents = {};
    if (output[_I] != null) {
        contents[_I] = smithyClient.expectString(output[_I]);
    }
    if (output[_SI] != null) {
        contents[_SI] = smithyClient.expectString(output[_SI]);
    }
    return contents;
};
const de_CreatedButModifiedException = (output, context) => {
    const contents = {};
    if (output[_M] != null) {
        contents[_M] = smithyClient.expectString(output[_M]);
    }
    return contents;
};
const de_CreateGeneratedTemplateOutput = (output, context) => {
    const contents = {};
    if (output[_GTI] != null) {
        contents[_GTI] = smithyClient.expectString(output[_GTI]);
    }
    return contents;
};
const de_CreateStackInstancesOutput = (output, context) => {
    const contents = {};
    if (output[_OI] != null) {
        contents[_OI] = smithyClient.expectString(output[_OI]);
    }
    return contents;
};
const de_CreateStackOutput = (output, context) => {
    const contents = {};
    if (output[_SI] != null) {
        contents[_SI] = smithyClient.expectString(output[_SI]);
    }
    return contents;
};
const de_CreateStackRefactorOutput = (output, context) => {
    const contents = {};
    if (output[_SRI] != null) {
        contents[_SRI] = smithyClient.expectString(output[_SRI]);
    }
    return contents;
};
const de_CreateStackSetOutput = (output, context) => {
    const contents = {};
    if (output[_SSI] != null) {
        contents[_SSI] = smithyClient.expectString(output[_SSI]);
    }
    return contents;
};
const de_DeactivateOrganizationsAccessOutput = (output, context) => {
    const contents = {};
    return contents;
};
const de_DeactivateTypeOutput = (output, context) => {
    const contents = {};
    return contents;
};
const de_DeleteChangeSetOutput = (output, context) => {
    const contents = {};
    return contents;
};
const de_DeleteStackInstancesOutput = (output, context) => {
    const contents = {};
    if (output[_OI] != null) {
        contents[_OI] = smithyClient.expectString(output[_OI]);
    }
    return contents;
};
const de_DeleteStackSetOutput = (output, context) => {
    const contents = {};
    return contents;
};
const de_DeploymentTargets = (output, context) => {
    const contents = {};
    if (String(output.Accounts).trim() === "") {
        contents[_Ac] = [];
    }
    else if (output[_Ac] != null && output[_Ac][_m] != null) {
        contents[_Ac] = de_AccountList(smithyClient.getArrayIfSingleItem(output[_Ac][_m]));
    }
    if (output[_AUc] != null) {
        contents[_AUc] = smithyClient.expectString(output[_AUc]);
    }
    if (String(output.OrganizationalUnitIds).trim() === "") {
        contents[_OUI] = [];
    }
    else if (output[_OUI] != null && output[_OUI][_m] != null) {
        contents[_OUI] = de_OrganizationalUnitIdList(smithyClient.getArrayIfSingleItem(output[_OUI][_m]));
    }
    if (output[_AFT] != null) {
        contents[_AFT] = smithyClient.expectString(output[_AFT]);
    }
    return contents;
};
const de_DeregisterTypeOutput = (output, context) => {
    const contents = {};
    return contents;
};
const de_DescribeAccountLimitsOutput = (output, context) => {
    const contents = {};
    if (String(output.AccountLimits).trim() === "") {
        contents[_AL] = [];
    }
    else if (output[_AL] != null && output[_AL][_m] != null) {
        contents[_AL] = de_AccountLimitList(smithyClient.getArrayIfSingleItem(output[_AL][_m]));
    }
    if (output[_NT] != null) {
        contents[_NT] = smithyClient.expectString(output[_NT]);
    }
    return contents;
};
const de_DescribeChangeSetHooksOutput = (output, context) => {
    const contents = {};
    if (output[_CSIh] != null) {
        contents[_CSIh] = smithyClient.expectString(output[_CSIh]);
    }
    if (output[_CSN] != null) {
        contents[_CSN] = smithyClient.expectString(output[_CSN]);
    }
    if (String(output.Hooks).trim() === "") {
        contents[_H] = [];
    }
    else if (output[_H] != null && output[_H][_m] != null) {
        contents[_H] = de_ChangeSetHooks(smithyClient.getArrayIfSingleItem(output[_H][_m]));
    }
    if (output[_S] != null) {
        contents[_S] = smithyClient.expectString(output[_S]);
    }
    if (output[_NT] != null) {
        contents[_NT] = smithyClient.expectString(output[_NT]);
    }
    if (output[_SI] != null) {
        contents[_SI] = smithyClient.expectString(output[_SI]);
    }
    if (output[_SN] != null) {
        contents[_SN] = smithyClient.expectString(output[_SN]);
    }
    return contents;
};
const de_DescribeChangeSetOutput = (output, context) => {
    const contents = {};
    if (output[_CSN] != null) {
        contents[_CSN] = smithyClient.expectString(output[_CSN]);
    }
    if (output[_CSIh] != null) {
        contents[_CSIh] = smithyClient.expectString(output[_CSIh]);
    }
    if (output[_SI] != null) {
        contents[_SI] = smithyClient.expectString(output[_SI]);
    }
    if (output[_SN] != null) {
        contents[_SN] = smithyClient.expectString(output[_SN]);
    }
    if (output[_D] != null) {
        contents[_D] = smithyClient.expectString(output[_D]);
    }
    if (String(output.Parameters).trim() === "") {
        contents[_P] = [];
    }
    else if (output[_P] != null && output[_P][_m] != null) {
        contents[_P] = de_Parameters(smithyClient.getArrayIfSingleItem(output[_P][_m]));
    }
    if (output[_CTr] != null) {
        contents[_CTr] = smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(output[_CTr]));
    }
    if (output[_ES] != null) {
        contents[_ES] = smithyClient.expectString(output[_ES]);
    }
    if (output[_S] != null) {
        contents[_S] = smithyClient.expectString(output[_S]);
    }
    if (output[_SRt] != null) {
        contents[_SRt] = smithyClient.expectString(output[_SRt]);
    }
    if (String(output.NotificationARNs).trim() === "") {
        contents[_NARN] = [];
    }
    else if (output[_NARN] != null && output[_NARN][_m] != null) {
        contents[_NARN] = de_NotificationARNs(smithyClient.getArrayIfSingleItem(output[_NARN][_m]));
    }
    if (output[_RC] != null) {
        contents[_RC] = de_RollbackConfiguration(output[_RC]);
    }
    if (String(output.Capabilities).trim() === "") {
        contents[_C] = [];
    }
    else if (output[_C] != null && output[_C][_m] != null) {
        contents[_C] = de_Capabilities(smithyClient.getArrayIfSingleItem(output[_C][_m]));
    }
    if (String(output.Tags).trim() === "") {
        contents[_Ta] = [];
    }
    else if (output[_Ta] != null && output[_Ta][_m] != null) {
        contents[_Ta] = de_Tags(smithyClient.getArrayIfSingleItem(output[_Ta][_m]));
    }
    if (String(output.Changes).trim() === "") {
        contents[_Ch] = [];
    }
    else if (output[_Ch] != null && output[_Ch][_m] != null) {
        contents[_Ch] = de_Changes(smithyClient.getArrayIfSingleItem(output[_Ch][_m]));
    }
    if (output[_NT] != null) {
        contents[_NT] = smithyClient.expectString(output[_NT]);
    }
    if (output[_INS] != null) {
        contents[_INS] = smithyClient.parseBoolean(output[_INS]);
    }
    if (output[_PCSI] != null) {
        contents[_PCSI] = smithyClient.expectString(output[_PCSI]);
    }
    if (output[_RCSI] != null) {
        contents[_RCSI] = smithyClient.expectString(output[_RCSI]);
    }
    if (output[_OSF] != null) {
        contents[_OSF] = smithyClient.expectString(output[_OSF]);
    }
    if (output[_IER] != null) {
        contents[_IER] = smithyClient.parseBoolean(output[_IER]);
    }
    return contents;
};
const de_DescribeGeneratedTemplateOutput = (output, context) => {
    const contents = {};
    if (output[_GTI] != null) {
        contents[_GTI] = smithyClient.expectString(output[_GTI]);
    }
    if (output[_GTN] != null) {
        contents[_GTN] = smithyClient.expectString(output[_GTN]);
    }
    if (String(output.Resources).trim() === "") {
        contents[_R] = [];
    }
    else if (output[_R] != null && output[_R][_m] != null) {
        contents[_R] = de_ResourceDetails(smithyClient.getArrayIfSingleItem(output[_R][_m]));
    }
    if (output[_S] != null) {
        contents[_S] = smithyClient.expectString(output[_S]);
    }
    if (output[_SRt] != null) {
        contents[_SRt] = smithyClient.expectString(output[_SRt]);
    }
    if (output[_CTr] != null) {
        contents[_CTr] = smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(output[_CTr]));
    }
    if (output[_LUT] != null) {
        contents[_LUT] = smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(output[_LUT]));
    }
    if (output[_Pr] != null) {
        contents[_Pr] = de_TemplateProgress(output[_Pr]);
    }
    if (output[_SI] != null) {
        contents[_SI] = smithyClient.expectString(output[_SI]);
    }
    if (output[_TC] != null) {
        contents[_TC] = de_TemplateConfiguration(output[_TC]);
    }
    if (output[_TW] != null) {
        contents[_TW] = smithyClient.strictParseInt32(output[_TW]);
    }
    return contents;
};
const de_DescribeOrganizationsAccessOutput = (output, context) => {
    const contents = {};
    if (output[_S] != null) {
        contents[_S] = smithyClient.expectString(output[_S]);
    }
    return contents;
};
const de_DescribePublisherOutput = (output, context) => {
    const contents = {};
    if (output[_PI] != null) {
        contents[_PI] = smithyClient.expectString(output[_PI]);
    }
    if (output[_PS] != null) {
        contents[_PS] = smithyClient.expectString(output[_PS]);
    }
    if (output[_IPd] != null) {
        contents[_IPd] = smithyClient.expectString(output[_IPd]);
    }
    if (output[_PP] != null) {
        contents[_PP] = smithyClient.expectString(output[_PP]);
    }
    return contents;
};
const de_DescribeResourceScanOutput = (output, context) => {
    const contents = {};
    if (output[_RSI] != null) {
        contents[_RSI] = smithyClient.expectString(output[_RSI]);
    }
    if (output[_S] != null) {
        contents[_S] = smithyClient.expectString(output[_S]);
    }
    if (output[_SRt] != null) {
        contents[_SRt] = smithyClient.expectString(output[_SRt]);
    }
    if (output[_ST] != null) {
        contents[_ST] = smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(output[_ST]));
    }
    if (output[_ET] != null) {
        contents[_ET] = smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(output[_ET]));
    }
    if (output[_PC] != null) {
        contents[_PC] = smithyClient.strictParseFloat(output[_PC]);
    }
    if (String(output.ResourceTypes).trim() === "") {
        contents[_RTe] = [];
    }
    else if (output[_RTe] != null && output[_RTe][_m] != null) {
        contents[_RTe] = de_ResourceTypes(smithyClient.getArrayIfSingleItem(output[_RTe][_m]));
    }
    if (output[_RSes] != null) {
        contents[_RSes] = smithyClient.strictParseInt32(output[_RSes]);
    }
    if (output[_RRes] != null) {
        contents[_RRes] = smithyClient.strictParseInt32(output[_RRes]);
    }
    if (String(output.ScanFilters).trim() === "") {
        contents[_SF] = [];
    }
    else if (output[_SF] != null && output[_SF][_m] != null) {
        contents[_SF] = de_ScanFilters(smithyClient.getArrayIfSingleItem(output[_SF][_m]));
    }
    return contents;
};
const de_DescribeStackDriftDetectionStatusOutput = (output, context) => {
    const contents = {};
    if (output[_SI] != null) {
        contents[_SI] = smithyClient.expectString(output[_SI]);
    }
    if (output[_SDDI] != null) {
        contents[_SDDI] = smithyClient.expectString(output[_SDDI]);
    }
    if (output[_SDS] != null) {
        contents[_SDS] = smithyClient.expectString(output[_SDS]);
    }
    if (output[_DSet] != null) {
        contents[_DSet] = smithyClient.expectString(output[_DSet]);
    }
    if (output[_DSRet] != null) {
        contents[_DSRet] = smithyClient.expectString(output[_DSRet]);
    }
    if (output[_DSRC] != null) {
        contents[_DSRC] = smithyClient.strictParseInt32(output[_DSRC]);
    }
    if (output[_Ti] != null) {
        contents[_Ti] = smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(output[_Ti]));
    }
    return contents;
};
const de_DescribeStackEventsOutput = (output, context) => {
    const contents = {};
    if (String(output.StackEvents).trim() === "") {
        contents[_SE] = [];
    }
    else if (output[_SE] != null && output[_SE][_m] != null) {
        contents[_SE] = de_StackEvents(smithyClient.getArrayIfSingleItem(output[_SE][_m]));
    }
    if (output[_NT] != null) {
        contents[_NT] = smithyClient.expectString(output[_NT]);
    }
    return contents;
};
const de_DescribeStackInstanceOutput = (output, context) => {
    const contents = {};
    if (output[_SIta] != null) {
        contents[_SIta] = de_StackInstance(output[_SIta]);
    }
    return contents;
};
const de_DescribeStackRefactorOutput = (output, context) => {
    const contents = {};
    if (output[_D] != null) {
        contents[_D] = smithyClient.expectString(output[_D]);
    }
    if (output[_SRI] != null) {
        contents[_SRI] = smithyClient.expectString(output[_SRI]);
    }
    if (String(output.StackIds).trim() === "") {
        contents[_SIt] = [];
    }
    else if (output[_SIt] != null && output[_SIt][_m] != null) {
        contents[_SIt] = de_StackIds(smithyClient.getArrayIfSingleItem(output[_SIt][_m]));
    }
    if (output[_ES] != null) {
        contents[_ES] = smithyClient.expectString(output[_ES]);
    }
    if (output[_ESRx] != null) {
        contents[_ESRx] = smithyClient.expectString(output[_ESRx]);
    }
    if (output[_S] != null) {
        contents[_S] = smithyClient.expectString(output[_S]);
    }
    if (output[_SRt] != null) {
        contents[_SRt] = smithyClient.expectString(output[_SRt]);
    }
    return contents;
};
const de_DescribeStackResourceDriftsOutput = (output, context) => {
    const contents = {};
    if (String(output.StackResourceDrifts).trim() === "") {
        contents[_SRD] = [];
    }
    else if (output[_SRD] != null && output[_SRD][_m] != null) {
        contents[_SRD] = de_StackResourceDrifts(smithyClient.getArrayIfSingleItem(output[_SRD][_m]));
    }
    if (output[_NT] != null) {
        contents[_NT] = smithyClient.expectString(output[_NT]);
    }
    return contents;
};
const de_DescribeStackResourceOutput = (output, context) => {
    const contents = {};
    if (output[_SRDt] != null) {
        contents[_SRDt] = de_StackResourceDetail(output[_SRDt]);
    }
    return contents;
};
const de_DescribeStackResourcesOutput = (output, context) => {
    const contents = {};
    if (String(output.StackResources).trim() === "") {
        contents[_SRta] = [];
    }
    else if (output[_SRta] != null && output[_SRta][_m] != null) {
        contents[_SRta] = de_StackResources(smithyClient.getArrayIfSingleItem(output[_SRta][_m]));
    }
    return contents;
};
const de_DescribeStackSetOperationOutput = (output, context) => {
    const contents = {};
    if (output[_SSO] != null) {
        contents[_SSO] = de_StackSetOperation(output[_SSO]);
    }
    return contents;
};
const de_DescribeStackSetOutput = (output, context) => {
    const contents = {};
    if (output[_SS] != null) {
        contents[_SS] = de_StackSet(output[_SS]);
    }
    return contents;
};
const de_DescribeStacksOutput = (output, context) => {
    const contents = {};
    if (String(output.Stacks).trim() === "") {
        contents[_St] = [];
    }
    else if (output[_St] != null && output[_St][_m] != null) {
        contents[_St] = de_Stacks(smithyClient.getArrayIfSingleItem(output[_St][_m]));
    }
    if (output[_NT] != null) {
        contents[_NT] = smithyClient.expectString(output[_NT]);
    }
    return contents;
};
const de_DescribeTypeOutput = (output, context) => {
    const contents = {};
    if (output[_Ar] != null) {
        contents[_Ar] = smithyClient.expectString(output[_Ar]);
    }
    if (output[_T] != null) {
        contents[_T] = smithyClient.expectString(output[_T]);
    }
    if (output[_TN] != null) {
        contents[_TN] = smithyClient.expectString(output[_TN]);
    }
    if (output[_DVI] != null) {
        contents[_DVI] = smithyClient.expectString(output[_DVI]);
    }
    if (output[_IDV] != null) {
        contents[_IDV] = smithyClient.parseBoolean(output[_IDV]);
    }
    if (output[_TTS] != null) {
        contents[_TTS] = smithyClient.expectString(output[_TTS]);
    }
    if (output[_TTSD] != null) {
        contents[_TTSD] = smithyClient.expectString(output[_TTSD]);
    }
    if (output[_D] != null) {
        contents[_D] = smithyClient.expectString(output[_D]);
    }
    if (output[_Sc] != null) {
        contents[_Sc] = smithyClient.expectString(output[_Sc]);
    }
    if (output[_PTr] != null) {
        contents[_PTr] = smithyClient.expectString(output[_PTr]);
    }
    if (output[_DSep] != null) {
        contents[_DSep] = smithyClient.expectString(output[_DSep]);
    }
    if (output[_LC] != null) {
        contents[_LC] = de_LoggingConfig(output[_LC]);
    }
    if (String(output.RequiredActivatedTypes).trim() === "") {
        contents[_RAT] = [];
    }
    else if (output[_RAT] != null && output[_RAT][_m] != null) {
        contents[_RAT] = de_RequiredActivatedTypes(smithyClient.getArrayIfSingleItem(output[_RAT][_m]));
    }
    if (output[_ERA] != null) {
        contents[_ERA] = smithyClient.expectString(output[_ERA]);
    }
    if (output[_Vi] != null) {
        contents[_Vi] = smithyClient.expectString(output[_Vi]);
    }
    if (output[_SU] != null) {
        contents[_SU] = smithyClient.expectString(output[_SU]);
    }
    if (output[_DU] != null) {
        contents[_DU] = smithyClient.expectString(output[_DU]);
    }
    if (output[_LU] != null) {
        contents[_LU] = smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(output[_LU]));
    }
    if (output[_TCi] != null) {
        contents[_TCi] = smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(output[_TCi]));
    }
    if (output[_CSo] != null) {
        contents[_CSo] = smithyClient.expectString(output[_CSo]);
    }
    if (output[_PI] != null) {
        contents[_PI] = smithyClient.expectString(output[_PI]);
    }
    if (output[_OTN] != null) {
        contents[_OTN] = smithyClient.expectString(output[_OTN]);
    }
    if (output[_OTA] != null) {
        contents[_OTA] = smithyClient.expectString(output[_OTA]);
    }
    if (output[_PVN] != null) {
        contents[_PVN] = smithyClient.expectString(output[_PVN]);
    }
    if (output[_LPV] != null) {
        contents[_LPV] = smithyClient.expectString(output[_LPV]);
    }
    if (output[_IA] != null) {
        contents[_IA] = smithyClient.parseBoolean(output[_IA]);
    }
    if (output[_AU] != null) {
        contents[_AU] = smithyClient.parseBoolean(output[_AU]);
    }
    return contents;
};
const de_DescribeTypeRegistrationOutput = (output, context) => {
    const contents = {};
    if (output[_PSr] != null) {
        contents[_PSr] = smithyClient.expectString(output[_PSr]);
    }
    if (output[_D] != null) {
        contents[_D] = smithyClient.expectString(output[_D]);
    }
    if (output[_TA] != null) {
        contents[_TA] = smithyClient.expectString(output[_TA]);
    }
    if (output[_TVA] != null) {
        contents[_TVA] = smithyClient.expectString(output[_TVA]);
    }
    return contents;
};
const de_DetectStackDriftOutput = (output, context) => {
    const contents = {};
    if (output[_SDDI] != null) {
        contents[_SDDI] = smithyClient.expectString(output[_SDDI]);
    }
    return contents;
};
const de_DetectStackResourceDriftOutput = (output, context) => {
    const contents = {};
    if (output[_SRDta] != null) {
        contents[_SRDta] = de_StackResourceDrift(output[_SRDta]);
    }
    return contents;
};
const de_DetectStackSetDriftOutput = (output, context) => {
    const contents = {};
    if (output[_OI] != null) {
        contents[_OI] = smithyClient.expectString(output[_OI]);
    }
    return contents;
};
const de_EstimateTemplateCostOutput = (output, context) => {
    const contents = {};
    if (output[_U] != null) {
        contents[_U] = smithyClient.expectString(output[_U]);
    }
    return contents;
};
const de_ExecuteChangeSetOutput = (output, context) => {
    const contents = {};
    return contents;
};
const de_Export = (output, context) => {
    const contents = {};
    if (output[_ESI] != null) {
        contents[_ESI] = smithyClient.expectString(output[_ESI]);
    }
    if (output[_N] != null) {
        contents[_N] = smithyClient.expectString(output[_N]);
    }
    if (output[_Val] != null) {
        contents[_Val] = smithyClient.expectString(output[_Val]);
    }
    return contents;
};
const de_Exports = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Export(entry);
    });
};
const de_GeneratedTemplateNotFoundException = (output, context) => {
    const contents = {};
    if (output[_M] != null) {
        contents[_M] = smithyClient.expectString(output[_M]);
    }
    return contents;
};
const de_GetGeneratedTemplateOutput = (output, context) => {
    const contents = {};
    if (output[_S] != null) {
        contents[_S] = smithyClient.expectString(output[_S]);
    }
    if (output[_TB] != null) {
        contents[_TB] = smithyClient.expectString(output[_TB]);
    }
    return contents;
};
const de_GetStackPolicyOutput = (output, context) => {
    const contents = {};
    if (output[_SPB] != null) {
        contents[_SPB] = smithyClient.expectString(output[_SPB]);
    }
    return contents;
};
const de_GetTemplateOutput = (output, context) => {
    const contents = {};
    if (output[_TB] != null) {
        contents[_TB] = smithyClient.expectString(output[_TB]);
    }
    if (String(output.StagesAvailable).trim() === "") {
        contents[_SA] = [];
    }
    else if (output[_SA] != null && output[_SA][_m] != null) {
        contents[_SA] = de_StageList(smithyClient.getArrayIfSingleItem(output[_SA][_m]));
    }
    return contents;
};
const de_GetTemplateSummaryOutput = (output, context) => {
    const contents = {};
    if (String(output.Parameters).trim() === "") {
        contents[_P] = [];
    }
    else if (output[_P] != null && output[_P][_m] != null) {
        contents[_P] = de_ParameterDeclarations(smithyClient.getArrayIfSingleItem(output[_P][_m]));
    }
    if (output[_D] != null) {
        contents[_D] = smithyClient.expectString(output[_D]);
    }
    if (String(output.Capabilities).trim() === "") {
        contents[_C] = [];
    }
    else if (output[_C] != null && output[_C][_m] != null) {
        contents[_C] = de_Capabilities(smithyClient.getArrayIfSingleItem(output[_C][_m]));
    }
    if (output[_CR] != null) {
        contents[_CR] = smithyClient.expectString(output[_CR]);
    }
    if (String(output.ResourceTypes).trim() === "") {
        contents[_RTe] = [];
    }
    else if (output[_RTe] != null && output[_RTe][_m] != null) {
        contents[_RTe] = de_ResourceTypes(smithyClient.getArrayIfSingleItem(output[_RTe][_m]));
    }
    if (output[_V] != null) {
        contents[_V] = smithyClient.expectString(output[_V]);
    }
    if (output[_Me] != null) {
        contents[_Me] = smithyClient.expectString(output[_Me]);
    }
    if (String(output.DeclaredTransforms).trim() === "") {
        contents[_DTec] = [];
    }
    else if (output[_DTec] != null && output[_DTec][_m] != null) {
        contents[_DTec] = de_TransformsList(smithyClient.getArrayIfSingleItem(output[_DTec][_m]));
    }
    if (String(output.ResourceIdentifierSummaries).trim() === "") {
        contents[_RIS] = [];
    }
    else if (output[_RIS] != null && output[_RIS][_m] != null) {
        contents[_RIS] = de_ResourceIdentifierSummaries(smithyClient.getArrayIfSingleItem(output[_RIS][_m]));
    }
    if (output[_W] != null) {
        contents[_W] = de_Warnings(output[_W]);
    }
    return contents;
};
const de_HookResultNotFoundException = (output, context) => {
    const contents = {};
    if (output[_M] != null) {
        contents[_M] = smithyClient.expectString(output[_M]);
    }
    return contents;
};
const de_HookResultSummaries = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_HookResultSummary(entry);
    });
};
const de_HookResultSummary = (output, context) => {
    const contents = {};
    if (output[_HRI] != null) {
        contents[_HRI] = smithyClient.expectString(output[_HRI]);
    }
    if (output[_IP] != null) {
        contents[_IP] = smithyClient.expectString(output[_IP]);
    }
    if (output[_FM] != null) {
        contents[_FM] = smithyClient.expectString(output[_FM]);
    }
    if (output[_TN] != null) {
        contents[_TN] = smithyClient.expectString(output[_TN]);
    }
    if (output[_TVI] != null) {
        contents[_TVI] = smithyClient.expectString(output[_TVI]);
    }
    if (output[_TCVI] != null) {
        contents[_TCVI] = smithyClient.expectString(output[_TCVI]);
    }
    if (output[_S] != null) {
        contents[_S] = smithyClient.expectString(output[_S]);
    }
    if (output[_HSR] != null) {
        contents[_HSR] = smithyClient.expectString(output[_HSR]);
    }
    if (output[_IAn] != null) {
        contents[_IAn] = smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(output[_IAn]));
    }
    if (output[_TTa] != null) {
        contents[_TTa] = smithyClient.expectString(output[_TTa]);
    }
    if (output[_TI] != null) {
        contents[_TI] = smithyClient.expectString(output[_TI]);
    }
    if (output[_TA] != null) {
        contents[_TA] = smithyClient.expectString(output[_TA]);
    }
    if (output[_HET] != null) {
        contents[_HET] = smithyClient.expectString(output[_HET]);
    }
    return contents;
};
const de_Imports = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return smithyClient.expectString(entry);
    });
};
const de_ImportStacksToStackSetOutput = (output, context) => {
    const contents = {};
    if (output[_OI] != null) {
        contents[_OI] = smithyClient.expectString(output[_OI]);
    }
    return contents;
};
const de_InsufficientCapabilitiesException = (output, context) => {
    const contents = {};
    if (output[_M] != null) {
        contents[_M] = smithyClient.expectString(output[_M]);
    }
    return contents;
};
const de_InvalidChangeSetStatusException = (output, context) => {
    const contents = {};
    if (output[_M] != null) {
        contents[_M] = smithyClient.expectString(output[_M]);
    }
    return contents;
};
const de_InvalidOperationException = (output, context) => {
    const contents = {};
    if (output[_M] != null) {
        contents[_M] = smithyClient.expectString(output[_M]);
    }
    return contents;
};
const de_InvalidStateTransitionException = (output, context) => {
    const contents = {};
    if (output[_M] != null) {
        contents[_M] = smithyClient.expectString(output[_M]);
    }
    return contents;
};
const de_JazzResourceIdentifierProperties = (output, context) => {
    return output.reduce((acc, pair) => {
        if (pair["value"] === null) {
            return acc;
        }
        acc[pair["key"]] = smithyClient.expectString(pair["value"]);
        return acc;
    }, {});
};
const de_LimitExceededException = (output, context) => {
    const contents = {};
    if (output[_M] != null) {
        contents[_M] = smithyClient.expectString(output[_M]);
    }
    return contents;
};
const de_ListChangeSetsOutput = (output, context) => {
    const contents = {};
    if (String(output.Summaries).trim() === "") {
        contents[_Su] = [];
    }
    else if (output[_Su] != null && output[_Su][_m] != null) {
        contents[_Su] = de_ChangeSetSummaries(smithyClient.getArrayIfSingleItem(output[_Su][_m]));
    }
    if (output[_NT] != null) {
        contents[_NT] = smithyClient.expectString(output[_NT]);
    }
    return contents;
};
const de_ListExportsOutput = (output, context) => {
    const contents = {};
    if (String(output.Exports).trim() === "") {
        contents[_Ex] = [];
    }
    else if (output[_Ex] != null && output[_Ex][_m] != null) {
        contents[_Ex] = de_Exports(smithyClient.getArrayIfSingleItem(output[_Ex][_m]));
    }
    if (output[_NT] != null) {
        contents[_NT] = smithyClient.expectString(output[_NT]);
    }
    return contents;
};
const de_ListGeneratedTemplatesOutput = (output, context) => {
    const contents = {};
    if (String(output.Summaries).trim() === "") {
        contents[_Su] = [];
    }
    else if (output[_Su] != null && output[_Su][_m] != null) {
        contents[_Su] = de_TemplateSummaries(smithyClient.getArrayIfSingleItem(output[_Su][_m]));
    }
    if (output[_NT] != null) {
        contents[_NT] = smithyClient.expectString(output[_NT]);
    }
    return contents;
};
const de_ListHookResultsOutput = (output, context) => {
    const contents = {};
    if (output[_TTa] != null) {
        contents[_TTa] = smithyClient.expectString(output[_TTa]);
    }
    if (output[_TI] != null) {
        contents[_TI] = smithyClient.expectString(output[_TI]);
    }
    if (String(output.HookResults).trim() === "") {
        contents[_HR] = [];
    }
    else if (output[_HR] != null && output[_HR][_m] != null) {
        contents[_HR] = de_HookResultSummaries(smithyClient.getArrayIfSingleItem(output[_HR][_m]));
    }
    if (output[_NT] != null) {
        contents[_NT] = smithyClient.expectString(output[_NT]);
    }
    return contents;
};
const de_ListImportsOutput = (output, context) => {
    const contents = {};
    if (String(output.Imports).trim() === "") {
        contents[_Im] = [];
    }
    else if (output[_Im] != null && output[_Im][_m] != null) {
        contents[_Im] = de_Imports(smithyClient.getArrayIfSingleItem(output[_Im][_m]));
    }
    if (output[_NT] != null) {
        contents[_NT] = smithyClient.expectString(output[_NT]);
    }
    return contents;
};
const de_ListResourceScanRelatedResourcesOutput = (output, context) => {
    const contents = {};
    if (String(output.RelatedResources).trim() === "") {
        contents[_RRel] = [];
    }
    else if (output[_RRel] != null && output[_RRel][_m] != null) {
        contents[_RRel] = de_RelatedResources(smithyClient.getArrayIfSingleItem(output[_RRel][_m]));
    }
    if (output[_NT] != null) {
        contents[_NT] = smithyClient.expectString(output[_NT]);
    }
    return contents;
};
const de_ListResourceScanResourcesOutput = (output, context) => {
    const contents = {};
    if (String(output.Resources).trim() === "") {
        contents[_R] = [];
    }
    else if (output[_R] != null && output[_R][_m] != null) {
        contents[_R] = de_ScannedResources(smithyClient.getArrayIfSingleItem(output[_R][_m]));
    }
    if (output[_NT] != null) {
        contents[_NT] = smithyClient.expectString(output[_NT]);
    }
    return contents;
};
const de_ListResourceScansOutput = (output, context) => {
    const contents = {};
    if (String(output.ResourceScanSummaries).trim() === "") {
        contents[_RSS] = [];
    }
    else if (output[_RSS] != null && output[_RSS][_m] != null) {
        contents[_RSS] = de_ResourceScanSummaries(smithyClient.getArrayIfSingleItem(output[_RSS][_m]));
    }
    if (output[_NT] != null) {
        contents[_NT] = smithyClient.expectString(output[_NT]);
    }
    return contents;
};
const de_ListStackInstanceResourceDriftsOutput = (output, context) => {
    const contents = {};
    if (String(output.Summaries).trim() === "") {
        contents[_Su] = [];
    }
    else if (output[_Su] != null && output[_Su][_m] != null) {
        contents[_Su] = de_StackInstanceResourceDriftsSummaries(smithyClient.getArrayIfSingleItem(output[_Su][_m]));
    }
    if (output[_NT] != null) {
        contents[_NT] = smithyClient.expectString(output[_NT]);
    }
    return contents;
};
const de_ListStackInstancesOutput = (output, context) => {
    const contents = {};
    if (String(output.Summaries).trim() === "") {
        contents[_Su] = [];
    }
    else if (output[_Su] != null && output[_Su][_m] != null) {
        contents[_Su] = de_StackInstanceSummaries(smithyClient.getArrayIfSingleItem(output[_Su][_m]));
    }
    if (output[_NT] != null) {
        contents[_NT] = smithyClient.expectString(output[_NT]);
    }
    return contents;
};
const de_ListStackRefactorActionsOutput = (output, context) => {
    const contents = {};
    if (String(output.StackRefactorActions).trim() === "") {
        contents[_SRA] = [];
    }
    else if (output[_SRA] != null && output[_SRA][_m] != null) {
        contents[_SRA] = de_StackRefactorActions(smithyClient.getArrayIfSingleItem(output[_SRA][_m]));
    }
    if (output[_NT] != null) {
        contents[_NT] = smithyClient.expectString(output[_NT]);
    }
    return contents;
};
const de_ListStackRefactorsOutput = (output, context) => {
    const contents = {};
    if (String(output.StackRefactorSummaries).trim() === "") {
        contents[_SRSt] = [];
    }
    else if (output[_SRSt] != null && output[_SRSt][_m] != null) {
        contents[_SRSt] = de_StackRefactorSummaries(smithyClient.getArrayIfSingleItem(output[_SRSt][_m]));
    }
    if (output[_NT] != null) {
        contents[_NT] = smithyClient.expectString(output[_NT]);
    }
    return contents;
};
const de_ListStackResourcesOutput = (output, context) => {
    const contents = {};
    if (String(output.StackResourceSummaries).trim() === "") {
        contents[_SRSta] = [];
    }
    else if (output[_SRSta] != null && output[_SRSta][_m] != null) {
        contents[_SRSta] = de_StackResourceSummaries(smithyClient.getArrayIfSingleItem(output[_SRSta][_m]));
    }
    if (output[_NT] != null) {
        contents[_NT] = smithyClient.expectString(output[_NT]);
    }
    return contents;
};
const de_ListStackSetAutoDeploymentTargetsOutput = (output, context) => {
    const contents = {};
    if (String(output.Summaries).trim() === "") {
        contents[_Su] = [];
    }
    else if (output[_Su] != null && output[_Su][_m] != null) {
        contents[_Su] = de_StackSetAutoDeploymentTargetSummaries(smithyClient.getArrayIfSingleItem(output[_Su][_m]));
    }
    if (output[_NT] != null) {
        contents[_NT] = smithyClient.expectString(output[_NT]);
    }
    return contents;
};
const de_ListStackSetOperationResultsOutput = (output, context) => {
    const contents = {};
    if (String(output.Summaries).trim() === "") {
        contents[_Su] = [];
    }
    else if (output[_Su] != null && output[_Su][_m] != null) {
        contents[_Su] = de_StackSetOperationResultSummaries(smithyClient.getArrayIfSingleItem(output[_Su][_m]));
    }
    if (output[_NT] != null) {
        contents[_NT] = smithyClient.expectString(output[_NT]);
    }
    return contents;
};
const de_ListStackSetOperationsOutput = (output, context) => {
    const contents = {};
    if (String(output.Summaries).trim() === "") {
        contents[_Su] = [];
    }
    else if (output[_Su] != null && output[_Su][_m] != null) {
        contents[_Su] = de_StackSetOperationSummaries(smithyClient.getArrayIfSingleItem(output[_Su][_m]));
    }
    if (output[_NT] != null) {
        contents[_NT] = smithyClient.expectString(output[_NT]);
    }
    return contents;
};
const de_ListStackSetsOutput = (output, context) => {
    const contents = {};
    if (String(output.Summaries).trim() === "") {
        contents[_Su] = [];
    }
    else if (output[_Su] != null && output[_Su][_m] != null) {
        contents[_Su] = de_StackSetSummaries(smithyClient.getArrayIfSingleItem(output[_Su][_m]));
    }
    if (output[_NT] != null) {
        contents[_NT] = smithyClient.expectString(output[_NT]);
    }
    return contents;
};
const de_ListStacksOutput = (output, context) => {
    const contents = {};
    if (String(output.StackSummaries).trim() === "") {
        contents[_SSt] = [];
    }
    else if (output[_SSt] != null && output[_SSt][_m] != null) {
        contents[_SSt] = de_StackSummaries(smithyClient.getArrayIfSingleItem(output[_SSt][_m]));
    }
    if (output[_NT] != null) {
        contents[_NT] = smithyClient.expectString(output[_NT]);
    }
    return contents;
};
const de_ListTypeRegistrationsOutput = (output, context) => {
    const contents = {};
    if (String(output.RegistrationTokenList).trim() === "") {
        contents[_RTL] = [];
    }
    else if (output[_RTL] != null && output[_RTL][_m] != null) {
        contents[_RTL] = de_RegistrationTokenList(smithyClient.getArrayIfSingleItem(output[_RTL][_m]));
    }
    if (output[_NT] != null) {
        contents[_NT] = smithyClient.expectString(output[_NT]);
    }
    return contents;
};
const de_ListTypesOutput = (output, context) => {
    const contents = {};
    if (String(output.TypeSummaries).trim() === "") {
        contents[_TSy] = [];
    }
    else if (output[_TSy] != null && output[_TSy][_m] != null) {
        contents[_TSy] = de_TypeSummaries(smithyClient.getArrayIfSingleItem(output[_TSy][_m]));
    }
    if (output[_NT] != null) {
        contents[_NT] = smithyClient.expectString(output[_NT]);
    }
    return contents;
};
const de_ListTypeVersionsOutput = (output, context) => {
    const contents = {};
    if (String(output.TypeVersionSummaries).trim() === "") {
        contents[_TVS] = [];
    }
    else if (output[_TVS] != null && output[_TVS][_m] != null) {
        contents[_TVS] = de_TypeVersionSummaries(smithyClient.getArrayIfSingleItem(output[_TVS][_m]));
    }
    if (output[_NT] != null) {
        contents[_NT] = smithyClient.expectString(output[_NT]);
    }
    return contents;
};
const de_LoggingConfig = (output, context) => {
    const contents = {};
    if (output[_LRA] != null) {
        contents[_LRA] = smithyClient.expectString(output[_LRA]);
    }
    if (output[_LGN] != null) {
        contents[_LGN] = smithyClient.expectString(output[_LGN]);
    }
    return contents;
};
const de_LogicalResourceIds = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return smithyClient.expectString(entry);
    });
};
const de_ManagedExecution = (output, context) => {
    const contents = {};
    if (output[_Act] != null) {
        contents[_Act] = smithyClient.parseBoolean(output[_Act]);
    }
    return contents;
};
const de_ModuleInfo = (output, context) => {
    const contents = {};
    if (output[_TH] != null) {
        contents[_TH] = smithyClient.expectString(output[_TH]);
    }
    if (output[_LIH] != null) {
        contents[_LIH] = smithyClient.expectString(output[_LIH]);
    }
    return contents;
};
const de_NameAlreadyExistsException = (output, context) => {
    const contents = {};
    if (output[_M] != null) {
        contents[_M] = smithyClient.expectString(output[_M]);
    }
    return contents;
};
const de_NotificationARNs = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return smithyClient.expectString(entry);
    });
};
const de_OperationIdAlreadyExistsException = (output, context) => {
    const contents = {};
    if (output[_M] != null) {
        contents[_M] = smithyClient.expectString(output[_M]);
    }
    return contents;
};
const de_OperationInProgressException = (output, context) => {
    const contents = {};
    if (output[_M] != null) {
        contents[_M] = smithyClient.expectString(output[_M]);
    }
    return contents;
};
const de_OperationNotFoundException = (output, context) => {
    const contents = {};
    if (output[_M] != null) {
        contents[_M] = smithyClient.expectString(output[_M]);
    }
    return contents;
};
const de_OperationStatusCheckFailedException = (output, context) => {
    const contents = {};
    if (output[_M] != null) {
        contents[_M] = smithyClient.expectString(output[_M]);
    }
    return contents;
};
const de_OrganizationalUnitIdList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return smithyClient.expectString(entry);
    });
};
const de_Output = (output, context) => {
    const contents = {};
    if (output[_OK] != null) {
        contents[_OK] = smithyClient.expectString(output[_OK]);
    }
    if (output[_OV] != null) {
        contents[_OV] = smithyClient.expectString(output[_OV]);
    }
    if (output[_D] != null) {
        contents[_D] = smithyClient.expectString(output[_D]);
    }
    if (output[_EN] != null) {
        contents[_EN] = smithyClient.expectString(output[_EN]);
    }
    return contents;
};
const de_Outputs = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Output(entry);
    });
};
const de_Parameter = (output, context) => {
    const contents = {};
    if (output[_PK] != null) {
        contents[_PK] = smithyClient.expectString(output[_PK]);
    }
    if (output[_PV] != null) {
        contents[_PV] = smithyClient.expectString(output[_PV]);
    }
    if (output[_UPV] != null) {
        contents[_UPV] = smithyClient.parseBoolean(output[_UPV]);
    }
    if (output[_RV] != null) {
        contents[_RV] = smithyClient.expectString(output[_RV]);
    }
    return contents;
};
const de_ParameterConstraints = (output, context) => {
    const contents = {};
    if (String(output.AllowedValues).trim() === "") {
        contents[_AV] = [];
    }
    else if (output[_AV] != null && output[_AV][_m] != null) {
        contents[_AV] = de_AllowedValues(smithyClient.getArrayIfSingleItem(output[_AV][_m]));
    }
    return contents;
};
const de_ParameterDeclaration = (output, context) => {
    const contents = {};
    if (output[_PK] != null) {
        contents[_PK] = smithyClient.expectString(output[_PK]);
    }
    if (output[_DV] != null) {
        contents[_DV] = smithyClient.expectString(output[_DV]);
    }
    if (output[_PTa] != null) {
        contents[_PTa] = smithyClient.expectString(output[_PTa]);
    }
    if (output[_NE] != null) {
        contents[_NE] = smithyClient.parseBoolean(output[_NE]);
    }
    if (output[_D] != null) {
        contents[_D] = smithyClient.expectString(output[_D]);
    }
    if (output[_PCa] != null) {
        contents[_PCa] = de_ParameterConstraints(output[_PCa]);
    }
    return contents;
};
const de_ParameterDeclarations = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ParameterDeclaration(entry);
    });
};
const de_Parameters = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Parameter(entry);
    });
};
const de_PhysicalResourceIdContext = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_PhysicalResourceIdContextKeyValuePair(entry);
    });
};
const de_PhysicalResourceIdContextKeyValuePair = (output, context) => {
    const contents = {};
    if (output[_K] != null) {
        contents[_K] = smithyClient.expectString(output[_K]);
    }
    if (output[_Val] != null) {
        contents[_Val] = smithyClient.expectString(output[_Val]);
    }
    return contents;
};
const de_PropertyDifference = (output, context) => {
    const contents = {};
    if (output[_PPr] != null) {
        contents[_PPr] = smithyClient.expectString(output[_PPr]);
    }
    if (output[_EV] != null) {
        contents[_EV] = smithyClient.expectString(output[_EV]);
    }
    if (output[_AVc] != null) {
        contents[_AVc] = smithyClient.expectString(output[_AVc]);
    }
    if (output[_DTi] != null) {
        contents[_DTi] = smithyClient.expectString(output[_DTi]);
    }
    return contents;
};
const de_PropertyDifferences = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_PropertyDifference(entry);
    });
};
const de_PublishTypeOutput = (output, context) => {
    const contents = {};
    if (output[_PTA] != null) {
        contents[_PTA] = smithyClient.expectString(output[_PTA]);
    }
    return contents;
};
const de_RecordHandlerProgressOutput = (output, context) => {
    const contents = {};
    return contents;
};
const de_RegionList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return smithyClient.expectString(entry);
    });
};
const de_RegisterPublisherOutput = (output, context) => {
    const contents = {};
    if (output[_PI] != null) {
        contents[_PI] = smithyClient.expectString(output[_PI]);
    }
    return contents;
};
const de_RegisterTypeOutput = (output, context) => {
    const contents = {};
    if (output[_RTeg] != null) {
        contents[_RTeg] = smithyClient.expectString(output[_RTeg]);
    }
    return contents;
};
const de_RegistrationTokenList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return smithyClient.expectString(entry);
    });
};
const de_RelatedResources = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ScannedResource(entry);
    });
};
const de_RequiredActivatedType = (output, context) => {
    const contents = {};
    if (output[_TNA] != null) {
        contents[_TNA] = smithyClient.expectString(output[_TNA]);
    }
    if (output[_OTN] != null) {
        contents[_OTN] = smithyClient.expectString(output[_OTN]);
    }
    if (output[_PI] != null) {
        contents[_PI] = smithyClient.expectString(output[_PI]);
    }
    if (String(output.SupportedMajorVersions).trim() === "") {
        contents[_SMV] = [];
    }
    else if (output[_SMV] != null && output[_SMV][_m] != null) {
        contents[_SMV] = de_SupportedMajorVersions(smithyClient.getArrayIfSingleItem(output[_SMV][_m]));
    }
    return contents;
};
const de_RequiredActivatedTypes = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_RequiredActivatedType(entry);
    });
};
const de_ResourceChange = (output, context) => {
    const contents = {};
    if (output[_PA] != null) {
        contents[_PA] = smithyClient.expectString(output[_PA]);
    }
    if (output[_A] != null) {
        contents[_A] = smithyClient.expectString(output[_A]);
    }
    if (output[_LRI] != null) {
        contents[_LRI] = smithyClient.expectString(output[_LRI]);
    }
    if (output[_PRI] != null) {
        contents[_PRI] = smithyClient.expectString(output[_PRI]);
    }
    if (output[_RTes] != null) {
        contents[_RTes] = smithyClient.expectString(output[_RTes]);
    }
    if (output[_Rep] != null) {
        contents[_Rep] = smithyClient.expectString(output[_Rep]);
    }
    if (String(output.Scope).trim() === "") {
        contents[_Sco] = [];
    }
    else if (output[_Sco] != null && output[_Sco][_m] != null) {
        contents[_Sco] = de_Scope(smithyClient.getArrayIfSingleItem(output[_Sco][_m]));
    }
    if (String(output.Details).trim() === "") {
        contents[_Det] = [];
    }
    else if (output[_Det] != null && output[_Det][_m] != null) {
        contents[_Det] = de_ResourceChangeDetails(smithyClient.getArrayIfSingleItem(output[_Det][_m]));
    }
    if (output[_CSIh] != null) {
        contents[_CSIh] = smithyClient.expectString(output[_CSIh]);
    }
    if (output[_MI] != null) {
        contents[_MI] = de_ModuleInfo(output[_MI]);
    }
    if (output[_BC] != null) {
        contents[_BC] = smithyClient.expectString(output[_BC]);
    }
    if (output[_AC] != null) {
        contents[_AC] = smithyClient.expectString(output[_AC]);
    }
    return contents;
};
const de_ResourceChangeDetail = (output, context) => {
    const contents = {};
    if (output[_Tar] != null) {
        contents[_Tar] = de_ResourceTargetDefinition(output[_Tar]);
    }
    if (output[_Ev] != null) {
        contents[_Ev] = smithyClient.expectString(output[_Ev]);
    }
    if (output[_CSh] != null) {
        contents[_CSh] = smithyClient.expectString(output[_CSh]);
    }
    if (output[_CE] != null) {
        contents[_CE] = smithyClient.expectString(output[_CE]);
    }
    return contents;
};
const de_ResourceChangeDetails = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ResourceChangeDetail(entry);
    });
};
const de_ResourceDetail = (output, context) => {
    const contents = {};
    if (output[_RTes] != null) {
        contents[_RTes] = smithyClient.expectString(output[_RTes]);
    }
    if (output[_LRI] != null) {
        contents[_LRI] = smithyClient.expectString(output[_LRI]);
    }
    if (String(output.ResourceIdentifier).trim() === "") {
        contents[_RI] = {};
    }
    else if (output[_RI] != null && output[_RI][_e] != null) {
        contents[_RI] = de_ResourceIdentifierProperties(smithyClient.getArrayIfSingleItem(output[_RI][_e]));
    }
    if (output[_RSeso] != null) {
        contents[_RSeso] = smithyClient.expectString(output[_RSeso]);
    }
    if (output[_RSR] != null) {
        contents[_RSR] = smithyClient.expectString(output[_RSR]);
    }
    if (String(output.Warnings).trim() === "") {
        contents[_W] = [];
    }
    else if (output[_W] != null && output[_W][_m] != null) {
        contents[_W] = de_WarningDetails(smithyClient.getArrayIfSingleItem(output[_W][_m]));
    }
    return contents;
};
const de_ResourceDetails = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ResourceDetail(entry);
    });
};
const de_ResourceIdentifierProperties = (output, context) => {
    return output.reduce((acc, pair) => {
        if (pair["value"] === null) {
            return acc;
        }
        acc[pair["key"]] = smithyClient.expectString(pair["value"]);
        return acc;
    }, {});
};
const de_ResourceIdentifiers = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return smithyClient.expectString(entry);
    });
};
const de_ResourceIdentifierSummaries = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ResourceIdentifierSummary(entry);
    });
};
const de_ResourceIdentifierSummary = (output, context) => {
    const contents = {};
    if (output[_RTes] != null) {
        contents[_RTes] = smithyClient.expectString(output[_RTes]);
    }
    if (String(output.LogicalResourceIds).trim() === "") {
        contents[_LRIo] = [];
    }
    else if (output[_LRIo] != null && output[_LRIo][_m] != null) {
        contents[_LRIo] = de_LogicalResourceIds(smithyClient.getArrayIfSingleItem(output[_LRIo][_m]));
    }
    if (String(output.ResourceIdentifiers).trim() === "") {
        contents[_RIe] = [];
    }
    else if (output[_RIe] != null && output[_RIe][_m] != null) {
        contents[_RIe] = de_ResourceIdentifiers(smithyClient.getArrayIfSingleItem(output[_RIe][_m]));
    }
    return contents;
};
const de_ResourceLocation = (output, context) => {
    const contents = {};
    if (output[_SN] != null) {
        contents[_SN] = smithyClient.expectString(output[_SN]);
    }
    if (output[_LRI] != null) {
        contents[_LRI] = smithyClient.expectString(output[_LRI]);
    }
    return contents;
};
const de_ResourceMapping = (output, context) => {
    const contents = {};
    if (output[_So] != null) {
        contents[_So] = de_ResourceLocation(output[_So]);
    }
    if (output[_De] != null) {
        contents[_De] = de_ResourceLocation(output[_De]);
    }
    return contents;
};
const de_ResourceScanInProgressException = (output, context) => {
    const contents = {};
    if (output[_M] != null) {
        contents[_M] = smithyClient.expectString(output[_M]);
    }
    return contents;
};
const de_ResourceScanLimitExceededException = (output, context) => {
    const contents = {};
    if (output[_M] != null) {
        contents[_M] = smithyClient.expectString(output[_M]);
    }
    return contents;
};
const de_ResourceScanNotFoundException = (output, context) => {
    const contents = {};
    if (output[_M] != null) {
        contents[_M] = smithyClient.expectString(output[_M]);
    }
    return contents;
};
const de_ResourceScanSummaries = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ResourceScanSummary(entry);
    });
};
const de_ResourceScanSummary = (output, context) => {
    const contents = {};
    if (output[_RSI] != null) {
        contents[_RSI] = smithyClient.expectString(output[_RSI]);
    }
    if (output[_S] != null) {
        contents[_S] = smithyClient.expectString(output[_S]);
    }
    if (output[_SRt] != null) {
        contents[_SRt] = smithyClient.expectString(output[_SRt]);
    }
    if (output[_ST] != null) {
        contents[_ST] = smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(output[_ST]));
    }
    if (output[_ET] != null) {
        contents[_ET] = smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(output[_ET]));
    }
    if (output[_PC] != null) {
        contents[_PC] = smithyClient.strictParseFloat(output[_PC]);
    }
    if (output[_STc] != null) {
        contents[_STc] = smithyClient.expectString(output[_STc]);
    }
    return contents;
};
const de_ResourceTargetDefinition = (output, context) => {
    const contents = {};
    if (output[_At] != null) {
        contents[_At] = smithyClient.expectString(output[_At]);
    }
    if (output[_N] != null) {
        contents[_N] = smithyClient.expectString(output[_N]);
    }
    if (output[_RReq] != null) {
        contents[_RReq] = smithyClient.expectString(output[_RReq]);
    }
    if (output[_Pa] != null) {
        contents[_Pa] = smithyClient.expectString(output[_Pa]);
    }
    if (output[_BV] != null) {
        contents[_BV] = smithyClient.expectString(output[_BV]);
    }
    if (output[_AVf] != null) {
        contents[_AVf] = smithyClient.expectString(output[_AVf]);
    }
    if (output[_ACT] != null) {
        contents[_ACT] = smithyClient.expectString(output[_ACT]);
    }
    return contents;
};
const de_ResourceTypeFilters = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return smithyClient.expectString(entry);
    });
};
const de_ResourceTypes = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return smithyClient.expectString(entry);
    });
};
const de_RollbackConfiguration = (output, context) => {
    const contents = {};
    if (String(output.RollbackTriggers).trim() === "") {
        contents[_RTo] = [];
    }
    else if (output[_RTo] != null && output[_RTo][_m] != null) {
        contents[_RTo] = de_RollbackTriggers(smithyClient.getArrayIfSingleItem(output[_RTo][_m]));
    }
    if (output[_MTIM] != null) {
        contents[_MTIM] = smithyClient.strictParseInt32(output[_MTIM]);
    }
    return contents;
};
const de_RollbackStackOutput = (output, context) => {
    const contents = {};
    if (output[_SI] != null) {
        contents[_SI] = smithyClient.expectString(output[_SI]);
    }
    return contents;
};
const de_RollbackTrigger = (output, context) => {
    const contents = {};
    if (output[_Ar] != null) {
        contents[_Ar] = smithyClient.expectString(output[_Ar]);
    }
    if (output[_T] != null) {
        contents[_T] = smithyClient.expectString(output[_T]);
    }
    return contents;
};
const de_RollbackTriggers = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_RollbackTrigger(entry);
    });
};
const de_ScanFilter = (output, context) => {
    const contents = {};
    if (String(output.Types).trim() === "") {
        contents[_Ty] = [];
    }
    else if (output[_Ty] != null && output[_Ty][_m] != null) {
        contents[_Ty] = de_ResourceTypeFilters(smithyClient.getArrayIfSingleItem(output[_Ty][_m]));
    }
    return contents;
};
const de_ScanFilters = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ScanFilter(entry);
    });
};
const de_ScannedResource = (output, context) => {
    const contents = {};
    if (output[_RTes] != null) {
        contents[_RTes] = smithyClient.expectString(output[_RTes]);
    }
    if (String(output.ResourceIdentifier).trim() === "") {
        contents[_RI] = {};
    }
    else if (output[_RI] != null && output[_RI][_e] != null) {
        contents[_RI] = de_JazzResourceIdentifierProperties(smithyClient.getArrayIfSingleItem(output[_RI][_e]));
    }
    if (output[_MBS] != null) {
        contents[_MBS] = smithyClient.parseBoolean(output[_MBS]);
    }
    return contents;
};
const de_ScannedResources = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ScannedResource(entry);
    });
};
const de_Scope = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return smithyClient.expectString(entry);
    });
};
const de_SetTypeConfigurationOutput = (output, context) => {
    const contents = {};
    if (output[_CAonf] != null) {
        contents[_CAonf] = smithyClient.expectString(output[_CAonf]);
    }
    return contents;
};
const de_SetTypeDefaultVersionOutput = (output, context) => {
    const contents = {};
    return contents;
};
const de_Stack = (output, context) => {
    const contents = {};
    if (output[_SI] != null) {
        contents[_SI] = smithyClient.expectString(output[_SI]);
    }
    if (output[_SN] != null) {
        contents[_SN] = smithyClient.expectString(output[_SN]);
    }
    if (output[_CSIh] != null) {
        contents[_CSIh] = smithyClient.expectString(output[_CSIh]);
    }
    if (output[_D] != null) {
        contents[_D] = smithyClient.expectString(output[_D]);
    }
    if (String(output.Parameters).trim() === "") {
        contents[_P] = [];
    }
    else if (output[_P] != null && output[_P][_m] != null) {
        contents[_P] = de_Parameters(smithyClient.getArrayIfSingleItem(output[_P][_m]));
    }
    if (output[_CTr] != null) {
        contents[_CTr] = smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(output[_CTr]));
    }
    if (output[_DTel] != null) {
        contents[_DTel] = smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(output[_DTel]));
    }
    if (output[_LUT] != null) {
        contents[_LUT] = smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(output[_LUT]));
    }
    if (output[_RC] != null) {
        contents[_RC] = de_RollbackConfiguration(output[_RC]);
    }
    if (output[_SSta] != null) {
        contents[_SSta] = smithyClient.expectString(output[_SSta]);
    }
    if (output[_SSR] != null) {
        contents[_SSR] = smithyClient.expectString(output[_SSR]);
    }
    if (output[_DR] != null) {
        contents[_DR] = smithyClient.parseBoolean(output[_DR]);
    }
    if (String(output.NotificationARNs).trim() === "") {
        contents[_NARN] = [];
    }
    else if (output[_NARN] != null && output[_NARN][_m] != null) {
        contents[_NARN] = de_NotificationARNs(smithyClient.getArrayIfSingleItem(output[_NARN][_m]));
    }
    if (output[_TIM] != null) {
        contents[_TIM] = smithyClient.strictParseInt32(output[_TIM]);
    }
    if (String(output.Capabilities).trim() === "") {
        contents[_C] = [];
    }
    else if (output[_C] != null && output[_C][_m] != null) {
        contents[_C] = de_Capabilities(smithyClient.getArrayIfSingleItem(output[_C][_m]));
    }
    if (String(output.Outputs).trim() === "") {
        contents[_O] = [];
    }
    else if (output[_O] != null && output[_O][_m] != null) {
        contents[_O] = de_Outputs(smithyClient.getArrayIfSingleItem(output[_O][_m]));
    }
    if (output[_RARN] != null) {
        contents[_RARN] = smithyClient.expectString(output[_RARN]);
    }
    if (String(output.Tags).trim() === "") {
        contents[_Ta] = [];
    }
    else if (output[_Ta] != null && output[_Ta][_m] != null) {
        contents[_Ta] = de_Tags(smithyClient.getArrayIfSingleItem(output[_Ta][_m]));
    }
    if (output[_ETP] != null) {
        contents[_ETP] = smithyClient.parseBoolean(output[_ETP]);
    }
    if (output[_PIa] != null) {
        contents[_PIa] = smithyClient.expectString(output[_PIa]);
    }
    if (output[_RIo] != null) {
        contents[_RIo] = smithyClient.expectString(output[_RIo]);
    }
    if (output[_DI] != null) {
        contents[_DI] = de_StackDriftInformation(output[_DI]);
    }
    if (output[_REOC] != null) {
        contents[_REOC] = smithyClient.parseBoolean(output[_REOC]);
    }
    if (output[_DM] != null) {
        contents[_DM] = smithyClient.expectString(output[_DM]);
    }
    if (output[_DSeta] != null) {
        contents[_DSeta] = smithyClient.expectString(output[_DSeta]);
    }
    return contents;
};
const de_StackDriftInformation = (output, context) => {
    const contents = {};
    if (output[_SDS] != null) {
        contents[_SDS] = smithyClient.expectString(output[_SDS]);
    }
    if (output[_LCT] != null) {
        contents[_LCT] = smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(output[_LCT]));
    }
    return contents;
};
const de_StackDriftInformationSummary = (output, context) => {
    const contents = {};
    if (output[_SDS] != null) {
        contents[_SDS] = smithyClient.expectString(output[_SDS]);
    }
    if (output[_LCT] != null) {
        contents[_LCT] = smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(output[_LCT]));
    }
    return contents;
};
const de_StackEvent = (output, context) => {
    const contents = {};
    if (output[_SI] != null) {
        contents[_SI] = smithyClient.expectString(output[_SI]);
    }
    if (output[_EI] != null) {
        contents[_EI] = smithyClient.expectString(output[_EI]);
    }
    if (output[_SN] != null) {
        contents[_SN] = smithyClient.expectString(output[_SN]);
    }
    if (output[_LRI] != null) {
        contents[_LRI] = smithyClient.expectString(output[_LRI]);
    }
    if (output[_PRI] != null) {
        contents[_PRI] = smithyClient.expectString(output[_PRI]);
    }
    if (output[_RTes] != null) {
        contents[_RTes] = smithyClient.expectString(output[_RTes]);
    }
    if (output[_Ti] != null) {
        contents[_Ti] = smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(output[_Ti]));
    }
    if (output[_RSeso] != null) {
        contents[_RSeso] = smithyClient.expectString(output[_RSeso]);
    }
    if (output[_RSR] != null) {
        contents[_RSR] = smithyClient.expectString(output[_RSR]);
    }
    if (output[_RPe] != null) {
        contents[_RPe] = smithyClient.expectString(output[_RPe]);
    }
    if (output[_CRT] != null) {
        contents[_CRT] = smithyClient.expectString(output[_CRT]);
    }
    if (output[_HT] != null) {
        contents[_HT] = smithyClient.expectString(output[_HT]);
    }
    if (output[_HS] != null) {
        contents[_HS] = smithyClient.expectString(output[_HS]);
    }
    if (output[_HSR] != null) {
        contents[_HSR] = smithyClient.expectString(output[_HSR]);
    }
    if (output[_HIP] != null) {
        contents[_HIP] = smithyClient.expectString(output[_HIP]);
    }
    if (output[_HII] != null) {
        contents[_HII] = smithyClient.expectString(output[_HII]);
    }
    if (output[_HFM] != null) {
        contents[_HFM] = smithyClient.expectString(output[_HFM]);
    }
    if (output[_DSeta] != null) {
        contents[_DSeta] = smithyClient.expectString(output[_DSeta]);
    }
    return contents;
};
const de_StackEvents = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_StackEvent(entry);
    });
};
const de_StackIds = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return smithyClient.expectString(entry);
    });
};
const de_StackInstance = (output, context) => {
    const contents = {};
    if (output[_SSI] != null) {
        contents[_SSI] = smithyClient.expectString(output[_SSI]);
    }
    if (output[_Reg] != null) {
        contents[_Reg] = smithyClient.expectString(output[_Reg]);
    }
    if (output[_Acc] != null) {
        contents[_Acc] = smithyClient.expectString(output[_Acc]);
    }
    if (output[_SI] != null) {
        contents[_SI] = smithyClient.expectString(output[_SI]);
    }
    if (String(output.ParameterOverrides).trim() === "") {
        contents[_PO] = [];
    }
    else if (output[_PO] != null && output[_PO][_m] != null) {
        contents[_PO] = de_Parameters(smithyClient.getArrayIfSingleItem(output[_PO][_m]));
    }
    if (output[_S] != null) {
        contents[_S] = smithyClient.expectString(output[_S]);
    }
    if (output[_SIS] != null) {
        contents[_SIS] = de_StackInstanceComprehensiveStatus(output[_SIS]);
    }
    if (output[_SRt] != null) {
        contents[_SRt] = smithyClient.expectString(output[_SRt]);
    }
    if (output[_OUIr] != null) {
        contents[_OUIr] = smithyClient.expectString(output[_OUIr]);
    }
    if (output[_DSr] != null) {
        contents[_DSr] = smithyClient.expectString(output[_DSr]);
    }
    if (output[_LDCT] != null) {
        contents[_LDCT] = smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(output[_LDCT]));
    }
    if (output[_LOI] != null) {
        contents[_LOI] = smithyClient.expectString(output[_LOI]);
    }
    return contents;
};
const de_StackInstanceComprehensiveStatus = (output, context) => {
    const contents = {};
    if (output[_DSeta] != null) {
        contents[_DSeta] = smithyClient.expectString(output[_DSeta]);
    }
    return contents;
};
const de_StackInstanceNotFoundException = (output, context) => {
    const contents = {};
    if (output[_M] != null) {
        contents[_M] = smithyClient.expectString(output[_M]);
    }
    return contents;
};
const de_StackInstanceResourceDriftsSummaries = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_StackInstanceResourceDriftsSummary(entry);
    });
};
const de_StackInstanceResourceDriftsSummary = (output, context) => {
    const contents = {};
    if (output[_SI] != null) {
        contents[_SI] = smithyClient.expectString(output[_SI]);
    }
    if (output[_LRI] != null) {
        contents[_LRI] = smithyClient.expectString(output[_LRI]);
    }
    if (output[_PRI] != null) {
        contents[_PRI] = smithyClient.expectString(output[_PRI]);
    }
    if (String(output.PhysicalResourceIdContext).trim() === "") {
        contents[_PRIC] = [];
    }
    else if (output[_PRIC] != null && output[_PRIC][_m] != null) {
        contents[_PRIC] = de_PhysicalResourceIdContext(smithyClient.getArrayIfSingleItem(output[_PRIC][_m]));
    }
    if (output[_RTes] != null) {
        contents[_RTes] = smithyClient.expectString(output[_RTes]);
    }
    if (String(output.PropertyDifferences).trim() === "") {
        contents[_PD] = [];
    }
    else if (output[_PD] != null && output[_PD][_m] != null) {
        contents[_PD] = de_PropertyDifferences(smithyClient.getArrayIfSingleItem(output[_PD][_m]));
    }
    if (output[_SRDS] != null) {
        contents[_SRDS] = smithyClient.expectString(output[_SRDS]);
    }
    if (output[_Ti] != null) {
        contents[_Ti] = smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(output[_Ti]));
    }
    return contents;
};
const de_StackInstanceSummaries = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_StackInstanceSummary(entry);
    });
};
const de_StackInstanceSummary = (output, context) => {
    const contents = {};
    if (output[_SSI] != null) {
        contents[_SSI] = smithyClient.expectString(output[_SSI]);
    }
    if (output[_Reg] != null) {
        contents[_Reg] = smithyClient.expectString(output[_Reg]);
    }
    if (output[_Acc] != null) {
        contents[_Acc] = smithyClient.expectString(output[_Acc]);
    }
    if (output[_SI] != null) {
        contents[_SI] = smithyClient.expectString(output[_SI]);
    }
    if (output[_S] != null) {
        contents[_S] = smithyClient.expectString(output[_S]);
    }
    if (output[_SRt] != null) {
        contents[_SRt] = smithyClient.expectString(output[_SRt]);
    }
    if (output[_SIS] != null) {
        contents[_SIS] = de_StackInstanceComprehensiveStatus(output[_SIS]);
    }
    if (output[_OUIr] != null) {
        contents[_OUIr] = smithyClient.expectString(output[_OUIr]);
    }
    if (output[_DSr] != null) {
        contents[_DSr] = smithyClient.expectString(output[_DSr]);
    }
    if (output[_LDCT] != null) {
        contents[_LDCT] = smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(output[_LDCT]));
    }
    if (output[_LOI] != null) {
        contents[_LOI] = smithyClient.expectString(output[_LOI]);
    }
    return contents;
};
const de_StackNotFoundException = (output, context) => {
    const contents = {};
    if (output[_M] != null) {
        contents[_M] = smithyClient.expectString(output[_M]);
    }
    return contents;
};
const de_StackRefactorAction = (output, context) => {
    const contents = {};
    if (output[_A] != null) {
        contents[_A] = smithyClient.expectString(output[_A]);
    }
    if (output[_En] != null) {
        contents[_En] = smithyClient.expectString(output[_En]);
    }
    if (output[_PRI] != null) {
        contents[_PRI] = smithyClient.expectString(output[_PRI]);
    }
    if (output[_RI] != null) {
        contents[_RI] = smithyClient.expectString(output[_RI]);
    }
    if (output[_D] != null) {
        contents[_D] = smithyClient.expectString(output[_D]);
    }
    if (output[_Dete] != null) {
        contents[_Dete] = smithyClient.expectString(output[_Dete]);
    }
    if (output[_DRe] != null) {
        contents[_DRe] = smithyClient.expectString(output[_DRe]);
    }
    if (String(output.TagResources).trim() === "") {
        contents[_TR] = [];
    }
    else if (output[_TR] != null && output[_TR][_m] != null) {
        contents[_TR] = de_StackRefactorTagResources(smithyClient.getArrayIfSingleItem(output[_TR][_m]));
    }
    if (String(output.UntagResources).trim() === "") {
        contents[_UR] = [];
    }
    else if (output[_UR] != null && output[_UR][_m] != null) {
        contents[_UR] = de_StackRefactorUntagResources(smithyClient.getArrayIfSingleItem(output[_UR][_m]));
    }
    if (output[_RMes] != null) {
        contents[_RMes] = de_ResourceMapping(output[_RMes]);
    }
    return contents;
};
const de_StackRefactorActions = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_StackRefactorAction(entry);
    });
};
const de_StackRefactorNotFoundException = (output, context) => {
    const contents = {};
    if (output[_M] != null) {
        contents[_M] = smithyClient.expectString(output[_M]);
    }
    return contents;
};
const de_StackRefactorSummaries = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_StackRefactorSummary(entry);
    });
};
const de_StackRefactorSummary = (output, context) => {
    const contents = {};
    if (output[_SRI] != null) {
        contents[_SRI] = smithyClient.expectString(output[_SRI]);
    }
    if (output[_D] != null) {
        contents[_D] = smithyClient.expectString(output[_D]);
    }
    if (output[_ES] != null) {
        contents[_ES] = smithyClient.expectString(output[_ES]);
    }
    if (output[_ESRx] != null) {
        contents[_ESRx] = smithyClient.expectString(output[_ESRx]);
    }
    if (output[_S] != null) {
        contents[_S] = smithyClient.expectString(output[_S]);
    }
    if (output[_SRt] != null) {
        contents[_SRt] = smithyClient.expectString(output[_SRt]);
    }
    return contents;
};
const de_StackRefactorTagResources = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Tag(entry);
    });
};
const de_StackRefactorUntagResources = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return smithyClient.expectString(entry);
    });
};
const de_StackResource = (output, context) => {
    const contents = {};
    if (output[_SN] != null) {
        contents[_SN] = smithyClient.expectString(output[_SN]);
    }
    if (output[_SI] != null) {
        contents[_SI] = smithyClient.expectString(output[_SI]);
    }
    if (output[_LRI] != null) {
        contents[_LRI] = smithyClient.expectString(output[_LRI]);
    }
    if (output[_PRI] != null) {
        contents[_PRI] = smithyClient.expectString(output[_PRI]);
    }
    if (output[_RTes] != null) {
        contents[_RTes] = smithyClient.expectString(output[_RTes]);
    }
    if (output[_Ti] != null) {
        contents[_Ti] = smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(output[_Ti]));
    }
    if (output[_RSeso] != null) {
        contents[_RSeso] = smithyClient.expectString(output[_RSeso]);
    }
    if (output[_RSR] != null) {
        contents[_RSR] = smithyClient.expectString(output[_RSR]);
    }
    if (output[_D] != null) {
        contents[_D] = smithyClient.expectString(output[_D]);
    }
    if (output[_DI] != null) {
        contents[_DI] = de_StackResourceDriftInformation(output[_DI]);
    }
    if (output[_MI] != null) {
        contents[_MI] = de_ModuleInfo(output[_MI]);
    }
    return contents;
};
const de_StackResourceDetail = (output, context) => {
    const contents = {};
    if (output[_SN] != null) {
        contents[_SN] = smithyClient.expectString(output[_SN]);
    }
    if (output[_SI] != null) {
        contents[_SI] = smithyClient.expectString(output[_SI]);
    }
    if (output[_LRI] != null) {
        contents[_LRI] = smithyClient.expectString(output[_LRI]);
    }
    if (output[_PRI] != null) {
        contents[_PRI] = smithyClient.expectString(output[_PRI]);
    }
    if (output[_RTes] != null) {
        contents[_RTes] = smithyClient.expectString(output[_RTes]);
    }
    if (output[_LUTa] != null) {
        contents[_LUTa] = smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(output[_LUTa]));
    }
    if (output[_RSeso] != null) {
        contents[_RSeso] = smithyClient.expectString(output[_RSeso]);
    }
    if (output[_RSR] != null) {
        contents[_RSR] = smithyClient.expectString(output[_RSR]);
    }
    if (output[_D] != null) {
        contents[_D] = smithyClient.expectString(output[_D]);
    }
    if (output[_Me] != null) {
        contents[_Me] = smithyClient.expectString(output[_Me]);
    }
    if (output[_DI] != null) {
        contents[_DI] = de_StackResourceDriftInformation(output[_DI]);
    }
    if (output[_MI] != null) {
        contents[_MI] = de_ModuleInfo(output[_MI]);
    }
    return contents;
};
const de_StackResourceDrift = (output, context) => {
    const contents = {};
    if (output[_SI] != null) {
        contents[_SI] = smithyClient.expectString(output[_SI]);
    }
    if (output[_LRI] != null) {
        contents[_LRI] = smithyClient.expectString(output[_LRI]);
    }
    if (output[_PRI] != null) {
        contents[_PRI] = smithyClient.expectString(output[_PRI]);
    }
    if (String(output.PhysicalResourceIdContext).trim() === "") {
        contents[_PRIC] = [];
    }
    else if (output[_PRIC] != null && output[_PRIC][_m] != null) {
        contents[_PRIC] = de_PhysicalResourceIdContext(smithyClient.getArrayIfSingleItem(output[_PRIC][_m]));
    }
    if (output[_RTes] != null) {
        contents[_RTes] = smithyClient.expectString(output[_RTes]);
    }
    if (output[_EP] != null) {
        contents[_EP] = smithyClient.expectString(output[_EP]);
    }
    if (output[_AP] != null) {
        contents[_AP] = smithyClient.expectString(output[_AP]);
    }
    if (String(output.PropertyDifferences).trim() === "") {
        contents[_PD] = [];
    }
    else if (output[_PD] != null && output[_PD][_m] != null) {
        contents[_PD] = de_PropertyDifferences(smithyClient.getArrayIfSingleItem(output[_PD][_m]));
    }
    if (output[_SRDS] != null) {
        contents[_SRDS] = smithyClient.expectString(output[_SRDS]);
    }
    if (output[_Ti] != null) {
        contents[_Ti] = smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(output[_Ti]));
    }
    if (output[_MI] != null) {
        contents[_MI] = de_ModuleInfo(output[_MI]);
    }
    if (output[_DSRr] != null) {
        contents[_DSRr] = smithyClient.expectString(output[_DSRr]);
    }
    return contents;
};
const de_StackResourceDriftInformation = (output, context) => {
    const contents = {};
    if (output[_SRDS] != null) {
        contents[_SRDS] = smithyClient.expectString(output[_SRDS]);
    }
    if (output[_LCT] != null) {
        contents[_LCT] = smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(output[_LCT]));
    }
    return contents;
};
const de_StackResourceDriftInformationSummary = (output, context) => {
    const contents = {};
    if (output[_SRDS] != null) {
        contents[_SRDS] = smithyClient.expectString(output[_SRDS]);
    }
    if (output[_LCT] != null) {
        contents[_LCT] = smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(output[_LCT]));
    }
    return contents;
};
const de_StackResourceDrifts = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_StackResourceDrift(entry);
    });
};
const de_StackResources = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_StackResource(entry);
    });
};
const de_StackResourceSummaries = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_StackResourceSummary(entry);
    });
};
const de_StackResourceSummary = (output, context) => {
    const contents = {};
    if (output[_LRI] != null) {
        contents[_LRI] = smithyClient.expectString(output[_LRI]);
    }
    if (output[_PRI] != null) {
        contents[_PRI] = smithyClient.expectString(output[_PRI]);
    }
    if (output[_RTes] != null) {
        contents[_RTes] = smithyClient.expectString(output[_RTes]);
    }
    if (output[_LUTa] != null) {
        contents[_LUTa] = smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(output[_LUTa]));
    }
    if (output[_RSeso] != null) {
        contents[_RSeso] = smithyClient.expectString(output[_RSeso]);
    }
    if (output[_RSR] != null) {
        contents[_RSR] = smithyClient.expectString(output[_RSR]);
    }
    if (output[_DI] != null) {
        contents[_DI] = de_StackResourceDriftInformationSummary(output[_DI]);
    }
    if (output[_MI] != null) {
        contents[_MI] = de_ModuleInfo(output[_MI]);
    }
    return contents;
};
const de_Stacks = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Stack(entry);
    });
};
const de_StackSet = (output, context) => {
    const contents = {};
    if (output[_SSN] != null) {
        contents[_SSN] = smithyClient.expectString(output[_SSN]);
    }
    if (output[_SSI] != null) {
        contents[_SSI] = smithyClient.expectString(output[_SSI]);
    }
    if (output[_D] != null) {
        contents[_D] = smithyClient.expectString(output[_D]);
    }
    if (output[_S] != null) {
        contents[_S] = smithyClient.expectString(output[_S]);
    }
    if (output[_TB] != null) {
        contents[_TB] = smithyClient.expectString(output[_TB]);
    }
    if (String(output.Parameters).trim() === "") {
        contents[_P] = [];
    }
    else if (output[_P] != null && output[_P][_m] != null) {
        contents[_P] = de_Parameters(smithyClient.getArrayIfSingleItem(output[_P][_m]));
    }
    if (String(output.Capabilities).trim() === "") {
        contents[_C] = [];
    }
    else if (output[_C] != null && output[_C][_m] != null) {
        contents[_C] = de_Capabilities(smithyClient.getArrayIfSingleItem(output[_C][_m]));
    }
    if (String(output.Tags).trim() === "") {
        contents[_Ta] = [];
    }
    else if (output[_Ta] != null && output[_Ta][_m] != null) {
        contents[_Ta] = de_Tags(smithyClient.getArrayIfSingleItem(output[_Ta][_m]));
    }
    if (output[_SSARN] != null) {
        contents[_SSARN] = smithyClient.expectString(output[_SSARN]);
    }
    if (output[_ARARN] != null) {
        contents[_ARARN] = smithyClient.expectString(output[_ARARN]);
    }
    if (output[_ERN] != null) {
        contents[_ERN] = smithyClient.expectString(output[_ERN]);
    }
    if (output[_SSDDD] != null) {
        contents[_SSDDD] = de_StackSetDriftDetectionDetails(output[_SSDDD]);
    }
    if (output[_AD] != null) {
        contents[_AD] = de_AutoDeployment(output[_AD]);
    }
    if (output[_PM] != null) {
        contents[_PM] = smithyClient.expectString(output[_PM]);
    }
    if (String(output.OrganizationalUnitIds).trim() === "") {
        contents[_OUI] = [];
    }
    else if (output[_OUI] != null && output[_OUI][_m] != null) {
        contents[_OUI] = de_OrganizationalUnitIdList(smithyClient.getArrayIfSingleItem(output[_OUI][_m]));
    }
    if (output[_ME] != null) {
        contents[_ME] = de_ManagedExecution(output[_ME]);
    }
    if (String(output.Regions).trim() === "") {
        contents[_Re] = [];
    }
    else if (output[_Re] != null && output[_Re][_m] != null) {
        contents[_Re] = de_RegionList(smithyClient.getArrayIfSingleItem(output[_Re][_m]));
    }
    return contents;
};
const de_StackSetAutoDeploymentTargetSummaries = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_StackSetAutoDeploymentTargetSummary(entry);
    });
};
const de_StackSetAutoDeploymentTargetSummary = (output, context) => {
    const contents = {};
    if (output[_OUIr] != null) {
        contents[_OUIr] = smithyClient.expectString(output[_OUIr]);
    }
    if (String(output.Regions).trim() === "") {
        contents[_Re] = [];
    }
    else if (output[_Re] != null && output[_Re][_m] != null) {
        contents[_Re] = de_RegionList(smithyClient.getArrayIfSingleItem(output[_Re][_m]));
    }
    return contents;
};
const de_StackSetDriftDetectionDetails = (output, context) => {
    const contents = {};
    if (output[_DSr] != null) {
        contents[_DSr] = smithyClient.expectString(output[_DSr]);
    }
    if (output[_DDS] != null) {
        contents[_DDS] = smithyClient.expectString(output[_DDS]);
    }
    if (output[_LDCT] != null) {
        contents[_LDCT] = smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(output[_LDCT]));
    }
    if (output[_TSIC] != null) {
        contents[_TSIC] = smithyClient.strictParseInt32(output[_TSIC]);
    }
    if (output[_DSIC] != null) {
        contents[_DSIC] = smithyClient.strictParseInt32(output[_DSIC]);
    }
    if (output[_ISSIC] != null) {
        contents[_ISSIC] = smithyClient.strictParseInt32(output[_ISSIC]);
    }
    if (output[_IPSIC] != null) {
        contents[_IPSIC] = smithyClient.strictParseInt32(output[_IPSIC]);
    }
    if (output[_FSIC] != null) {
        contents[_FSIC] = smithyClient.strictParseInt32(output[_FSIC]);
    }
    return contents;
};
const de_StackSetNotEmptyException = (output, context) => {
    const contents = {};
    if (output[_M] != null) {
        contents[_M] = smithyClient.expectString(output[_M]);
    }
    return contents;
};
const de_StackSetNotFoundException = (output, context) => {
    const contents = {};
    if (output[_M] != null) {
        contents[_M] = smithyClient.expectString(output[_M]);
    }
    return contents;
};
const de_StackSetOperation = (output, context) => {
    const contents = {};
    if (output[_OI] != null) {
        contents[_OI] = smithyClient.expectString(output[_OI]);
    }
    if (output[_SSI] != null) {
        contents[_SSI] = smithyClient.expectString(output[_SSI]);
    }
    if (output[_A] != null) {
        contents[_A] = smithyClient.expectString(output[_A]);
    }
    if (output[_S] != null) {
        contents[_S] = smithyClient.expectString(output[_S]);
    }
    if (output[_OP] != null) {
        contents[_OP] = de_StackSetOperationPreferences(output[_OP]);
    }
    if (output[_RSe] != null) {
        contents[_RSe] = smithyClient.parseBoolean(output[_RSe]);
    }
    if (output[_ARARN] != null) {
        contents[_ARARN] = smithyClient.expectString(output[_ARARN]);
    }
    if (output[_ERN] != null) {
        contents[_ERN] = smithyClient.expectString(output[_ERN]);
    }
    if (output[_CTre] != null) {
        contents[_CTre] = smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(output[_CTre]));
    }
    if (output[_ETn] != null) {
        contents[_ETn] = smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(output[_ETn]));
    }
    if (output[_DTep] != null) {
        contents[_DTep] = de_DeploymentTargets(output[_DTep]);
    }
    if (output[_SSDDD] != null) {
        contents[_SSDDD] = de_StackSetDriftDetectionDetails(output[_SSDDD]);
    }
    if (output[_SRt] != null) {
        contents[_SRt] = smithyClient.expectString(output[_SRt]);
    }
    if (output[_SDt] != null) {
        contents[_SDt] = de_StackSetOperationStatusDetails(output[_SDt]);
    }
    return contents;
};
const de_StackSetOperationPreferences = (output, context) => {
    const contents = {};
    if (output[_RCT] != null) {
        contents[_RCT] = smithyClient.expectString(output[_RCT]);
    }
    if (String(output.RegionOrder).trim() === "") {
        contents[_RO] = [];
    }
    else if (output[_RO] != null && output[_RO][_m] != null) {
        contents[_RO] = de_RegionList(smithyClient.getArrayIfSingleItem(output[_RO][_m]));
    }
    if (output[_FTC] != null) {
        contents[_FTC] = smithyClient.strictParseInt32(output[_FTC]);
    }
    if (output[_FTP] != null) {
        contents[_FTP] = smithyClient.strictParseInt32(output[_FTP]);
    }
    if (output[_MCC] != null) {
        contents[_MCC] = smithyClient.strictParseInt32(output[_MCC]);
    }
    if (output[_MCP] != null) {
        contents[_MCP] = smithyClient.strictParseInt32(output[_MCP]);
    }
    if (output[_CM] != null) {
        contents[_CM] = smithyClient.expectString(output[_CM]);
    }
    return contents;
};
const de_StackSetOperationResultSummaries = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_StackSetOperationResultSummary(entry);
    });
};
const de_StackSetOperationResultSummary = (output, context) => {
    const contents = {};
    if (output[_Acc] != null) {
        contents[_Acc] = smithyClient.expectString(output[_Acc]);
    }
    if (output[_Reg] != null) {
        contents[_Reg] = smithyClient.expectString(output[_Reg]);
    }
    if (output[_S] != null) {
        contents[_S] = smithyClient.expectString(output[_S]);
    }
    if (output[_SRt] != null) {
        contents[_SRt] = smithyClient.expectString(output[_SRt]);
    }
    if (output[_AGR] != null) {
        contents[_AGR] = de_AccountGateResult(output[_AGR]);
    }
    if (output[_OUIr] != null) {
        contents[_OUIr] = smithyClient.expectString(output[_OUIr]);
    }
    return contents;
};
const de_StackSetOperationStatusDetails = (output, context) => {
    const contents = {};
    if (output[_FSIC] != null) {
        contents[_FSIC] = smithyClient.strictParseInt32(output[_FSIC]);
    }
    return contents;
};
const de_StackSetOperationSummaries = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_StackSetOperationSummary(entry);
    });
};
const de_StackSetOperationSummary = (output, context) => {
    const contents = {};
    if (output[_OI] != null) {
        contents[_OI] = smithyClient.expectString(output[_OI]);
    }
    if (output[_A] != null) {
        contents[_A] = smithyClient.expectString(output[_A]);
    }
    if (output[_S] != null) {
        contents[_S] = smithyClient.expectString(output[_S]);
    }
    if (output[_CTre] != null) {
        contents[_CTre] = smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(output[_CTre]));
    }
    if (output[_ETn] != null) {
        contents[_ETn] = smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(output[_ETn]));
    }
    if (output[_SRt] != null) {
        contents[_SRt] = smithyClient.expectString(output[_SRt]);
    }
    if (output[_SDt] != null) {
        contents[_SDt] = de_StackSetOperationStatusDetails(output[_SDt]);
    }
    if (output[_OP] != null) {
        contents[_OP] = de_StackSetOperationPreferences(output[_OP]);
    }
    return contents;
};
const de_StackSetSummaries = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_StackSetSummary(entry);
    });
};
const de_StackSetSummary = (output, context) => {
    const contents = {};
    if (output[_SSN] != null) {
        contents[_SSN] = smithyClient.expectString(output[_SSN]);
    }
    if (output[_SSI] != null) {
        contents[_SSI] = smithyClient.expectString(output[_SSI]);
    }
    if (output[_D] != null) {
        contents[_D] = smithyClient.expectString(output[_D]);
    }
    if (output[_S] != null) {
        contents[_S] = smithyClient.expectString(output[_S]);
    }
    if (output[_AD] != null) {
        contents[_AD] = de_AutoDeployment(output[_AD]);
    }
    if (output[_PM] != null) {
        contents[_PM] = smithyClient.expectString(output[_PM]);
    }
    if (output[_DSr] != null) {
        contents[_DSr] = smithyClient.expectString(output[_DSr]);
    }
    if (output[_LDCT] != null) {
        contents[_LDCT] = smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(output[_LDCT]));
    }
    if (output[_ME] != null) {
        contents[_ME] = de_ManagedExecution(output[_ME]);
    }
    return contents;
};
const de_StackSummaries = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_StackSummary(entry);
    });
};
const de_StackSummary = (output, context) => {
    const contents = {};
    if (output[_SI] != null) {
        contents[_SI] = smithyClient.expectString(output[_SI]);
    }
    if (output[_SN] != null) {
        contents[_SN] = smithyClient.expectString(output[_SN]);
    }
    if (output[_TDe] != null) {
        contents[_TDe] = smithyClient.expectString(output[_TDe]);
    }
    if (output[_CTr] != null) {
        contents[_CTr] = smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(output[_CTr]));
    }
    if (output[_LUT] != null) {
        contents[_LUT] = smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(output[_LUT]));
    }
    if (output[_DTel] != null) {
        contents[_DTel] = smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(output[_DTel]));
    }
    if (output[_SSta] != null) {
        contents[_SSta] = smithyClient.expectString(output[_SSta]);
    }
    if (output[_SSR] != null) {
        contents[_SSR] = smithyClient.expectString(output[_SSR]);
    }
    if (output[_PIa] != null) {
        contents[_PIa] = smithyClient.expectString(output[_PIa]);
    }
    if (output[_RIo] != null) {
        contents[_RIo] = smithyClient.expectString(output[_RIo]);
    }
    if (output[_DI] != null) {
        contents[_DI] = de_StackDriftInformationSummary(output[_DI]);
    }
    return contents;
};
const de_StageList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return smithyClient.expectString(entry);
    });
};
const de_StaleRequestException = (output, context) => {
    const contents = {};
    if (output[_M] != null) {
        contents[_M] = smithyClient.expectString(output[_M]);
    }
    return contents;
};
const de_StartResourceScanOutput = (output, context) => {
    const contents = {};
    if (output[_RSI] != null) {
        contents[_RSI] = smithyClient.expectString(output[_RSI]);
    }
    return contents;
};
const de_StopStackSetOperationOutput = (output, context) => {
    const contents = {};
    return contents;
};
const de_SupportedMajorVersions = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return smithyClient.strictParseInt32(entry);
    });
};
const de_Tag = (output, context) => {
    const contents = {};
    if (output[_K] != null) {
        contents[_K] = smithyClient.expectString(output[_K]);
    }
    if (output[_Val] != null) {
        contents[_Val] = smithyClient.expectString(output[_Val]);
    }
    return contents;
};
const de_Tags = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Tag(entry);
    });
};
const de_TemplateConfiguration = (output, context) => {
    const contents = {};
    if (output[_DPe] != null) {
        contents[_DPe] = smithyClient.expectString(output[_DPe]);
    }
    if (output[_URP] != null) {
        contents[_URP] = smithyClient.expectString(output[_URP]);
    }
    return contents;
};
const de_TemplateParameter = (output, context) => {
    const contents = {};
    if (output[_PK] != null) {
        contents[_PK] = smithyClient.expectString(output[_PK]);
    }
    if (output[_DV] != null) {
        contents[_DV] = smithyClient.expectString(output[_DV]);
    }
    if (output[_NE] != null) {
        contents[_NE] = smithyClient.parseBoolean(output[_NE]);
    }
    if (output[_D] != null) {
        contents[_D] = smithyClient.expectString(output[_D]);
    }
    return contents;
};
const de_TemplateParameters = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_TemplateParameter(entry);
    });
};
const de_TemplateProgress = (output, context) => {
    const contents = {};
    if (output[_RSesou] != null) {
        contents[_RSesou] = smithyClient.strictParseInt32(output[_RSesou]);
    }
    if (output[_RF] != null) {
        contents[_RF] = smithyClient.strictParseInt32(output[_RF]);
    }
    if (output[_RPes] != null) {
        contents[_RPes] = smithyClient.strictParseInt32(output[_RPes]);
    }
    if (output[_RPeso] != null) {
        contents[_RPeso] = smithyClient.strictParseInt32(output[_RPeso]);
    }
    return contents;
};
const de_TemplateSummaries = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_TemplateSummary(entry);
    });
};
const de_TemplateSummary = (output, context) => {
    const contents = {};
    if (output[_GTI] != null) {
        contents[_GTI] = smithyClient.expectString(output[_GTI]);
    }
    if (output[_GTN] != null) {
        contents[_GTN] = smithyClient.expectString(output[_GTN]);
    }
    if (output[_S] != null) {
        contents[_S] = smithyClient.expectString(output[_S]);
    }
    if (output[_SRt] != null) {
        contents[_SRt] = smithyClient.expectString(output[_SRt]);
    }
    if (output[_CTr] != null) {
        contents[_CTr] = smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(output[_CTr]));
    }
    if (output[_LUT] != null) {
        contents[_LUT] = smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(output[_LUT]));
    }
    if (output[_NOR] != null) {
        contents[_NOR] = smithyClient.strictParseInt32(output[_NOR]);
    }
    return contents;
};
const de_TestTypeOutput = (output, context) => {
    const contents = {};
    if (output[_TVA] != null) {
        contents[_TVA] = smithyClient.expectString(output[_TVA]);
    }
    return contents;
};
const de_TokenAlreadyExistsException = (output, context) => {
    const contents = {};
    if (output[_M] != null) {
        contents[_M] = smithyClient.expectString(output[_M]);
    }
    return contents;
};
const de_TransformsList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return smithyClient.expectString(entry);
    });
};
const de_TypeConfigurationDetails = (output, context) => {
    const contents = {};
    if (output[_Ar] != null) {
        contents[_Ar] = smithyClient.expectString(output[_Ar]);
    }
    if (output[_Al] != null) {
        contents[_Al] = smithyClient.expectString(output[_Al]);
    }
    if (output[_Co] != null) {
        contents[_Co] = smithyClient.expectString(output[_Co]);
    }
    if (output[_LU] != null) {
        contents[_LU] = smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(output[_LU]));
    }
    if (output[_TA] != null) {
        contents[_TA] = smithyClient.expectString(output[_TA]);
    }
    if (output[_TN] != null) {
        contents[_TN] = smithyClient.expectString(output[_TN]);
    }
    if (output[_IDC] != null) {
        contents[_IDC] = smithyClient.parseBoolean(output[_IDC]);
    }
    return contents;
};
const de_TypeConfigurationDetailsList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_TypeConfigurationDetails(entry);
    });
};
const de_TypeConfigurationIdentifier = (output, context) => {
    const contents = {};
    if (output[_TA] != null) {
        contents[_TA] = smithyClient.expectString(output[_TA]);
    }
    if (output[_TCA] != null) {
        contents[_TCA] = smithyClient.expectString(output[_TCA]);
    }
    if (output[_TCAy] != null) {
        contents[_TCAy] = smithyClient.expectString(output[_TCAy]);
    }
    if (output[_T] != null) {
        contents[_T] = smithyClient.expectString(output[_T]);
    }
    if (output[_TN] != null) {
        contents[_TN] = smithyClient.expectString(output[_TN]);
    }
    return contents;
};
const de_TypeConfigurationNotFoundException = (output, context) => {
    const contents = {};
    if (output[_M] != null) {
        contents[_M] = smithyClient.expectString(output[_M]);
    }
    return contents;
};
const de_TypeNotFoundException = (output, context) => {
    const contents = {};
    if (output[_M] != null) {
        contents[_M] = smithyClient.expectString(output[_M]);
    }
    return contents;
};
const de_TypeSummaries = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_TypeSummary(entry);
    });
};
const de_TypeSummary = (output, context) => {
    const contents = {};
    if (output[_T] != null) {
        contents[_T] = smithyClient.expectString(output[_T]);
    }
    if (output[_TN] != null) {
        contents[_TN] = smithyClient.expectString(output[_TN]);
    }
    if (output[_DVI] != null) {
        contents[_DVI] = smithyClient.expectString(output[_DVI]);
    }
    if (output[_TA] != null) {
        contents[_TA] = smithyClient.expectString(output[_TA]);
    }
    if (output[_LU] != null) {
        contents[_LU] = smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(output[_LU]));
    }
    if (output[_D] != null) {
        contents[_D] = smithyClient.expectString(output[_D]);
    }
    if (output[_PI] != null) {
        contents[_PI] = smithyClient.expectString(output[_PI]);
    }
    if (output[_OTN] != null) {
        contents[_OTN] = smithyClient.expectString(output[_OTN]);
    }
    if (output[_PVN] != null) {
        contents[_PVN] = smithyClient.expectString(output[_PVN]);
    }
    if (output[_LPV] != null) {
        contents[_LPV] = smithyClient.expectString(output[_LPV]);
    }
    if (output[_PIu] != null) {
        contents[_PIu] = smithyClient.expectString(output[_PIu]);
    }
    if (output[_PN] != null) {
        contents[_PN] = smithyClient.expectString(output[_PN]);
    }
    if (output[_IA] != null) {
        contents[_IA] = smithyClient.parseBoolean(output[_IA]);
    }
    return contents;
};
const de_TypeVersionSummaries = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_TypeVersionSummary(entry);
    });
};
const de_TypeVersionSummary = (output, context) => {
    const contents = {};
    if (output[_T] != null) {
        contents[_T] = smithyClient.expectString(output[_T]);
    }
    if (output[_TN] != null) {
        contents[_TN] = smithyClient.expectString(output[_TN]);
    }
    if (output[_VI] != null) {
        contents[_VI] = smithyClient.expectString(output[_VI]);
    }
    if (output[_IDV] != null) {
        contents[_IDV] = smithyClient.parseBoolean(output[_IDV]);
    }
    if (output[_Ar] != null) {
        contents[_Ar] = smithyClient.expectString(output[_Ar]);
    }
    if (output[_TCi] != null) {
        contents[_TCi] = smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(output[_TCi]));
    }
    if (output[_D] != null) {
        contents[_D] = smithyClient.expectString(output[_D]);
    }
    if (output[_PVN] != null) {
        contents[_PVN] = smithyClient.expectString(output[_PVN]);
    }
    return contents;
};
const de_UnprocessedTypeConfigurations = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_TypeConfigurationIdentifier(entry);
    });
};
const de_UpdateGeneratedTemplateOutput = (output, context) => {
    const contents = {};
    if (output[_GTI] != null) {
        contents[_GTI] = smithyClient.expectString(output[_GTI]);
    }
    return contents;
};
const de_UpdateStackInstancesOutput = (output, context) => {
    const contents = {};
    if (output[_OI] != null) {
        contents[_OI] = smithyClient.expectString(output[_OI]);
    }
    return contents;
};
const de_UpdateStackOutput = (output, context) => {
    const contents = {};
    if (output[_SI] != null) {
        contents[_SI] = smithyClient.expectString(output[_SI]);
    }
    return contents;
};
const de_UpdateStackSetOutput = (output, context) => {
    const contents = {};
    if (output[_OI] != null) {
        contents[_OI] = smithyClient.expectString(output[_OI]);
    }
    return contents;
};
const de_UpdateTerminationProtectionOutput = (output, context) => {
    const contents = {};
    if (output[_SI] != null) {
        contents[_SI] = smithyClient.expectString(output[_SI]);
    }
    return contents;
};
const de_ValidateTemplateOutput = (output, context) => {
    const contents = {};
    if (String(output.Parameters).trim() === "") {
        contents[_P] = [];
    }
    else if (output[_P] != null && output[_P][_m] != null) {
        contents[_P] = de_TemplateParameters(smithyClient.getArrayIfSingleItem(output[_P][_m]));
    }
    if (output[_D] != null) {
        contents[_D] = smithyClient.expectString(output[_D]);
    }
    if (String(output.Capabilities).trim() === "") {
        contents[_C] = [];
    }
    else if (output[_C] != null && output[_C][_m] != null) {
        contents[_C] = de_Capabilities(smithyClient.getArrayIfSingleItem(output[_C][_m]));
    }
    if (output[_CR] != null) {
        contents[_CR] = smithyClient.expectString(output[_CR]);
    }
    if (String(output.DeclaredTransforms).trim() === "") {
        contents[_DTec] = [];
    }
    else if (output[_DTec] != null && output[_DTec][_m] != null) {
        contents[_DTec] = de_TransformsList(smithyClient.getArrayIfSingleItem(output[_DTec][_m]));
    }
    return contents;
};
const de_WarningDetail = (output, context) => {
    const contents = {};
    if (output[_T] != null) {
        contents[_T] = smithyClient.expectString(output[_T]);
    }
    if (String(output.Properties).trim() === "") {
        contents[_Pro] = [];
    }
    else if (output[_Pro] != null && output[_Pro][_m] != null) {
        contents[_Pro] = de_WarningProperties(smithyClient.getArrayIfSingleItem(output[_Pro][_m]));
    }
    return contents;
};
const de_WarningDetails = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_WarningDetail(entry);
    });
};
const de_WarningProperties = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_WarningProperty(entry);
    });
};
const de_WarningProperty = (output, context) => {
    const contents = {};
    if (output[_PPr] != null) {
        contents[_PPr] = smithyClient.expectString(output[_PPr]);
    }
    if (output[_Req] != null) {
        contents[_Req] = smithyClient.parseBoolean(output[_Req]);
    }
    if (output[_D] != null) {
        contents[_D] = smithyClient.expectString(output[_D]);
    }
    return contents;
};
const de_Warnings = (output, context) => {
    const contents = {};
    if (String(output.UnrecognizedResourceTypes).trim() === "") {
        contents[_URT] = [];
    }
    else if (output[_URT] != null && output[_URT][_m] != null) {
        contents[_URT] = de_ResourceTypes(smithyClient.getArrayIfSingleItem(output[_URT][_m]));
    }
    return contents;
};
const deserializeMetadata = (output) => ({
    httpStatusCode: output.statusCode,
    requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
    extendedRequestId: output.headers["x-amz-id-2"],
    cfId: output.headers["x-amz-cf-id"],
});
const throwDefaultError = smithyClient.withBaseException(CloudFormationServiceException);
const buildHttpRpcRequest = async (context, headers, path, resolvedHostname, body) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const contents = {
        protocol,
        hostname,
        port,
        method: "POST",
        path: basePath.endsWith("/") ? basePath.slice(0, -1) + path : basePath + path,
        headers,
    };
    if (body !== undefined) {
        contents.body = body;
    }
    return new protocolHttp.HttpRequest(contents);
};
const SHARED_HEADERS = {
    "content-type": "application/x-www-form-urlencoded",
};
const _ = "2010-05-15";
const _A = "Action";
const _AC = "AfterContext";
const _ACT = "AttributeChangeType";
const _AD = "AutoDeployment";
const _AFT = "AccountFilterType";
const _AGR = "AccountGateResult";
const _AL = "AccountLimits";
const _AOA = "ActivateOrganizationsAccess";
const _AP = "ActualProperties";
const _AR = "AddResources";
const _ARARN = "AdministrationRoleARN";
const _AT = "ActivateType";
const _ATAC = "AcceptTermsAndConditions";
const _AU = "AutoUpdate";
const _AUc = "AccountsUrl";
const _AV = "AllowedValues";
const _AVc = "ActualValue";
const _AVf = "AfterValue";
const _Ac = "Accounts";
const _Acc = "Account";
const _Act = "Active";
const _Al = "Alias";
const _Ar = "Arn";
const _At = "Attribute";
const _BC = "BeforeContext";
const _BDTC = "BatchDescribeTypeConfigurations";
const _BT = "BearerToken";
const _BV = "BeforeValue";
const _C = "Capabilities";
const _CA = "CallAs";
const _CAo = "ConnectionArn";
const _CAon = "ConfigurationAlias";
const _CAonf = "ConfigurationArn";
const _CCS = "CreateChangeSet";
const _CE = "CausingEntity";
const _CGT = "CreateGeneratedTemplate";
const _CM = "ConcurrencyMode";
const _COS = "CurrentOperationStatus";
const _CR = "CapabilitiesReason";
const _CRT = "ClientRequestToken";
const _CS = "CreateStack";
const _CSI = "CreateStackInstances";
const _CSIh = "ChangeSetId";
const _CSN = "ChangeSetName";
const _CSR = "CreateStackRefactor";
const _CSS = "CreateStackSet";
const _CST = "ChangeSetType";
const _CSh = "ChangeSource";
const _CSo = "ConfigurationSchema";
const _CT = "ClientToken";
const _CTr = "CreationTime";
const _CTre = "CreationTimestamp";
const _CUR = "ContinueUpdateRollback";
const _CUS = "CancelUpdateStack";
const _Ca = "Category";
const _Ch = "Changes";
const _Co = "Configuration";
const _D = "Description";
const _DAL = "DescribeAccountLimits";
const _DCS = "DeleteChangeSet";
const _DCSH = "DescribeChangeSetHooks";
const _DCSe = "DescribeChangeSet";
const _DDS = "DriftDetectionStatus";
const _DGT = "DeleteGeneratedTemplate";
const _DGTe = "DescribeGeneratedTemplate";
const _DI = "DriftInformation";
const _DM = "DeletionMode";
const _DOA = "DeactivateOrganizationsAccess";
const _DOAe = "DescribeOrganizationsAccess";
const _DP = "DescribePublisher";
const _DPe = "DeletionPolicy";
const _DR = "DisableRollback";
const _DRS = "DescribeResourceScan";
const _DRe = "DetectionReason";
const _DS = "DeleteStack";
const _DSD = "DetectStackDrift";
const _DSDDS = "DescribeStackDriftDetectionStatus";
const _DSE = "DescribeStackEvents";
const _DSI = "DeleteStackInstances";
const _DSIC = "DriftedStackInstancesCount";
const _DSIe = "DescribeStackInstance";
const _DSR = "DescribeStackRefactor";
const _DSRC = "DriftedStackResourceCount";
const _DSRD = "DescribeStackResourceDrifts";
const _DSRDe = "DetectStackResourceDrift";
const _DSRe = "DescribeStackResource";
const _DSRes = "DescribeStackResources";
const _DSRet = "DetectionStatusReason";
const _DSRr = "DriftStatusReason";
const _DSS = "DeleteStackSet";
const _DSSD = "DetectStackSetDrift";
const _DSSO = "DescribeStackSetOperation";
const _DSSe = "DescribeStackSet";
const _DSe = "DescribeStacks";
const _DSep = "DeprecatedStatus";
const _DSet = "DetectionStatus";
const _DSeta = "DetailedStatus";
const _DSr = "DriftStatus";
const _DT = "DeactivateType";
const _DTR = "DescribeTypeRegistration";
const _DTe = "DeregisterType";
const _DTec = "DeclaredTransforms";
const _DTel = "DeletionTime";
const _DTep = "DeploymentTargets";
const _DTes = "DescribeType";
const _DTi = "DifferenceType";
const _DU = "DocumentationUrl";
const _DV = "DefaultValue";
const _DVI = "DefaultVersionId";
const _De = "Destination";
const _Det = "Details";
const _Dete = "Detection";
const _E = "Enabled";
const _EC = "ErrorCode";
const _ECS = "ExecuteChangeSet";
const _EI = "EventId";
const _EM = "ErrorMessage";
const _EN = "ExportName";
const _EP = "ExpectedProperties";
const _ERA = "ExecutionRoleArn";
const _ERN = "ExecutionRoleName";
const _ES = "ExecutionStatus";
const _ESC = "EnableStackCreation";
const _ESF = "ExecutionStatusFilter";
const _ESI = "ExportingStackId";
const _ESR = "ExecuteStackRefactor";
const _ESRx = "ExecutionStatusReason";
const _ET = "EndTime";
const _ETC = "EstimateTemplateCost";
const _ETP = "EnableTerminationProtection";
const _ETn = "EndTimestamp";
const _EV = "ExpectedValue";
const _En = "Entity";
const _Er = "Errors";
const _Ev = "Evaluation";
const _Ex = "Exports";
const _F = "Format";
const _FM = "FailureMode";
const _FSIC = "FailedStackInstancesCount";
const _FTC = "FailureToleranceCount";
const _FTP = "FailureTolerancePercentage";
const _Fi = "Filters";
const _GGT = "GetGeneratedTemplate";
const _GSP = "GetStackPolicy";
const _GT = "GetTemplate";
const _GTI = "GeneratedTemplateId";
const _GTN = "GeneratedTemplateName";
const _GTS = "GetTemplateSummary";
const _H = "Hooks";
const _HET = "HookExecutionTarget";
const _HFM = "HookFailureMode";
const _HIC = "HookInvocationCount";
const _HII = "HookInvocationId";
const _HIP = "HookInvocationPoint";
const _HR = "HookResults";
const _HRI = "HookResultId";
const _HS = "HookStatus";
const _HSR = "HookStatusReason";
const _HT = "HookType";
const _I = "Id";
const _IA = "IsActivated";
const _IAn = "InvokedAt";
const _IDC = "IsDefaultConfiguration";
const _IDV = "IsDefaultVersion";
const _IER = "ImportExistingResources";
const _INS = "IncludeNestedStacks";
const _IP = "InvocationPoint";
const _IPSIC = "InProgressStackInstancesCount";
const _IPV = "IncludePropertyValues";
const _IPd = "IdentityProvider";
const _ISSIC = "InSyncStackInstancesCount";
const _ISTSS = "ImportStacksToStackSet";
const _Im = "Imports";
const _K = "Key";
const _LC = "LoggingConfig";
const _LCS = "ListChangeSets";
const _LCT = "LastCheckTimestamp";
const _LDB = "LogDeliveryBucket";
const _LDCT = "LastDriftCheckTimestamp";
const _LE = "ListExports";
const _LGN = "LogGroupName";
const _LGT = "ListGeneratedTemplates";
const _LHR = "ListHookResults";
const _LI = "ListImports";
const _LIH = "LogicalIdHierarchy";
const _LOI = "LastOperationId";
const _LPV = "LatestPublicVersion";
const _LRA = "LogRoleArn";
const _LRI = "LogicalResourceId";
const _LRIo = "LogicalResourceIds";
const _LRS = "ListResourceScans";
const _LRSR = "ListResourceScanResources";
const _LRSRR = "ListResourceScanRelatedResources";
const _LS = "ListStacks";
const _LSI = "ListStackInstances";
const _LSIRD = "ListStackInstanceResourceDrifts";
const _LSR = "ListStackRefactors";
const _LSRA = "ListStackRefactorActions";
const _LSRi = "ListStackResources";
const _LSS = "ListStackSets";
const _LSSADT = "ListStackSetAutoDeploymentTargets";
const _LSSO = "ListStackSetOperations";
const _LSSOR = "ListStackSetOperationResults";
const _LT = "ListTypes";
const _LTR = "ListTypeRegistrations";
const _LTV = "ListTypeVersions";
const _LU = "LastUpdated";
const _LUT = "LastUpdatedTime";
const _LUTa = "LastUpdatedTimestamp";
const _M = "Message";
const _MBS = "ManagedByStack";
const _MCC = "MaxConcurrentCount";
const _MCP = "MaxConcurrentPercentage";
const _ME = "ManagedExecution";
const _MI = "ModuleInfo";
const _MR = "MaxResults";
const _MTIM = "MonitoringTimeInMinutes";
const _MV = "MajorVersion";
const _Me = "Metadata";
const _N = "Name";
const _NARN = "NotificationARNs";
const _NE = "NoEcho";
const _NGTN = "NewGeneratedTemplateName";
const _NOR = "NumberOfResources";
const _NT = "NextToken";
const _O = "Outputs";
const _OF = "OnFailure";
const _OI = "OperationId";
const _OK = "OutputKey";
const _OP = "OperationPreferences";
const _OS = "OperationStatus";
const _OSF = "OnStackFailure";
const _OTA = "OriginalTypeArn";
const _OTN = "OriginalTypeName";
const _OUI = "OrganizationalUnitIds";
const _OUIr = "OrganizationalUnitId";
const _OV = "OutputValue";
const _P = "Parameters";
const _PA = "PolicyAction";
const _PC = "PercentageCompleted";
const _PCSI = "ParentChangeSetId";
const _PCa = "ParameterConstraints";
const _PD = "PropertyDifferences";
const _PI = "PublisherId";
const _PIa = "ParentId";
const _PIu = "PublisherIdentity";
const _PK = "ParameterKey";
const _PM = "PermissionModel";
const _PN = "PublisherName";
const _PO = "ParameterOverrides";
const _PP = "PublisherProfile";
const _PPr = "PropertyPath";
const _PRI = "PhysicalResourceId";
const _PRIC = "PhysicalResourceIdContext";
const _PS = "PublisherStatus";
const _PSr = "ProgressStatus";
const _PT = "PublishType";
const _PTA = "PublicTypeArn";
const _PTa = "ParameterType";
const _PTr = "ProvisioningType";
const _PV = "ParameterValue";
const _PVN = "PublicVersionNumber";
const _Pa = "Path";
const _Pr = "Progress";
const _Pro = "Properties";
const _R = "Resources";
const _RA = "ResourceAction";
const _RAR = "RefreshAllResources";
const _RARN = "RoleARN";
const _RAT = "RequiredActivatedTypes";
const _RC = "RollbackConfiguration";
const _RCSI = "RootChangeSetId";
const _RCT = "RegionConcurrencyType";
const _RCe = "ResourceChange";
const _REOC = "RetainExceptOnCreate";
const _RF = "ResourcesFailed";
const _RHP = "RecordHandlerProgress";
const _RI = "ResourceIdentifier";
const _RIS = "ResourceIdentifierSummaries";
const _RIe = "ResourceIdentifiers";
const _RIo = "RootId";
const _RM = "ResourceMappings";
const _RMe = "ResourceModel";
const _RMes = "ResourceMapping";
const _RO = "RegionOrder";
const _RP = "RegisterPublisher";
const _RPe = "ResourceProperties";
const _RPes = "ResourcesProcessing";
const _RPeso = "ResourcesPending";
const _RR = "RetainResources";
const _RRe = "RemoveResources";
const _RRel = "RelatedResources";
const _RReq = "RequiresRecreation";
const _RRes = "ResourcesRead";
const _RS = "RollbackStack";
const _RSF = "RegistrationStatusFilter";
const _RSI = "ResourceScanId";
const _RSOAR = "RetainStacksOnAccountRemoval";
const _RSR = "ResourceStatusReason";
const _RSS = "ResourceScanSummaries";
const _RSe = "RetainStacks";
const _RSes = "ResourcesScanned";
const _RSeso = "ResourceStatus";
const _RSesou = "ResourcesSucceeded";
const _RT = "RegisterType";
const _RTD = "ResourceTargetDetails";
const _RTI = "ResourcesToImport";
const _RTL = "RegistrationTokenList";
const _RTP = "ResourceTypePrefix";
const _RTS = "ResourcesToSkip";
const _RTe = "ResourceTypes";
const _RTeg = "RegistrationToken";
const _RTes = "ResourceType";
const _RTo = "RollbackTriggers";
const _RV = "ResolvedValue";
const _Re = "Regions";
const _Reg = "Region";
const _Rep = "Replacement";
const _Req = "Required";
const _S = "Status";
const _SA = "StagesAvailable";
const _SD = "StackDefinitions";
const _SDDI = "StackDriftDetectionId";
const _SDS = "StackDriftStatus";
const _SDt = "StatusDetails";
const _SE = "StackEvents";
const _SF = "ScanFilters";
const _SHP = "SchemaHandlerPackage";
const _SI = "StackId";
const _SIA = "StackInstanceAccount";
const _SIR = "StackInstanceRegion";
const _SIRDS = "StackInstanceResourceDriftStatuses";
const _SIS = "StackInstanceStatus";
const _SIU = "StackIdsUrl";
const _SIt = "StackIds";
const _SIta = "StackInstance";
const _SM = "StatusMessage";
const _SMV = "SupportedMajorVersions";
const _SN = "StackName";
const _SPB = "StackPolicyBody";
const _SPDUB = "StackPolicyDuringUpdateBody";
const _SPDUURL = "StackPolicyDuringUpdateURL";
const _SPURL = "StackPolicyURL";
const _SR = "SignalResource";
const _SRA = "StackRefactorActions";
const _SRD = "StackResourceDrifts";
const _SRDS = "StackResourceDriftStatus";
const _SRDSF = "StackResourceDriftStatusFilters";
const _SRDt = "StackResourceDetail";
const _SRDta = "StackResourceDrift";
const _SRI = "StackRefactorId";
const _SRS = "StartResourceScan";
const _SRSt = "StackRefactorSummaries";
const _SRSta = "StackResourceSummaries";
const _SRt = "StatusReason";
const _SRta = "StackResources";
const _SS = "StackSet";
const _SSARN = "StackSetARN";
const _SSDDD = "StackSetDriftDetectionDetails";
const _SSF = "StackStatusFilter";
const _SSI = "StackSetId";
const _SSN = "StackSetName";
const _SSO = "StackSetOperation";
const _SSP = "SetStackPolicy";
const _SSR = "StackStatusReason";
const _SSSO = "StopStackSetOperation";
const _SSt = "StackSummaries";
const _SSta = "StackStatus";
const _ST = "StartTime";
const _STC = "SetTypeConfiguration";
const _STDV = "SetTypeDefaultVersion";
const _STF = "ScanTypeFilter";
const _STc = "ScanType";
const _SU = "SourceUrl";
const _Sc = "Schema";
const _Sco = "Scope";
const _So = "Source";
const _St = "Stacks";
const _Su = "Summaries";
const _T = "Type";
const _TA = "TypeArn";
const _TB = "TemplateBody";
const _TC = "TemplateConfiguration";
const _TCA = "TypeConfigurationAlias";
const _TCAy = "TypeConfigurationArn";
const _TCI = "TypeConfigurationIdentifiers";
const _TCIy = "TypeConfigurationIdentifier";
const _TCVI = "TypeConfigurationVersionId";
const _TCi = "TimeCreated";
const _TCy = "TypeConfigurations";
const _TD = "TargetDetails";
const _TDe = "TemplateDescription";
const _TH = "TypeHierarchy";
const _TI = "TargetId";
const _TIM = "TimeoutInMinutes";
const _TK = "TagKey";
const _TN = "TypeName";
const _TNA = "TypeNameAlias";
const _TNP = "TypeNamePrefix";
const _TR = "TagResources";
const _TS = "TemplateStage";
const _TSC = "TemplateSummaryConfig";
const _TSIC = "TotalStackInstancesCount";
const _TSy = "TypeSummaries";
const _TT = "TestType";
const _TTS = "TypeTestsStatus";
const _TTSD = "TypeTestsStatusDescription";
const _TTa = "TargetType";
const _TURL = "TemplateURL";
const _TURTAW = "TreatUnrecognizedResourceTypesAsWarnings";
const _TV = "TagValue";
const _TVA = "TypeVersionArn";
const _TVI = "TypeVersionId";
const _TVS = "TypeVersionSummaries";
const _TW = "TotalWarnings";
const _Ta = "Tags";
const _Tar = "Target";
const _Ti = "Timestamp";
const _Ty = "Types";
const _U = "Url";
const _UGT = "UpdateGeneratedTemplate";
const _UI = "UniqueId";
const _UPT = "UsePreviousTemplate";
const _UPV = "UsePreviousValue";
const _UR = "UntagResources";
const _URP = "UpdateReplacePolicy";
const _URT = "UnrecognizedResourceTypes";
const _US = "UpdateStack";
const _USI = "UpdateStackInstances";
const _USS = "UpdateStackSet";
const _UTC = "UnprocessedTypeConfigurations";
const _UTP = "UpdateTerminationProtection";
const _V = "Version";
const _VB = "VersionBump";
const _VI = "VersionId";
const _VT = "ValidateTemplate";
const _Va = "Values";
const _Val = "Value";
const _Vi = "Visibility";
const _W = "Warnings";
const _e = "entry";
const _m = "member";
const buildFormUrlencodedString = (formEntries) => Object.entries(formEntries)
    .map(([key, value]) => smithyClient.extendedEncodeURIComponent(key) + "=" + smithyClient.extendedEncodeURIComponent(value))
    .join("&");
const loadQueryErrorCode = (output, data) => {
    if (data.Error?.Code !== undefined) {
        return data.Error.Code;
    }
    if (output.statusCode == 404) {
        return "NotFound";
    }
};

class ActivateOrganizationsAccessCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("CloudFormation", "ActivateOrganizationsAccess", {})
    .n("CloudFormationClient", "ActivateOrganizationsAccessCommand")
    .f(void 0, void 0)
    .ser(se_ActivateOrganizationsAccessCommand)
    .de(de_ActivateOrganizationsAccessCommand)
    .build() {
}

class ActivateTypeCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("CloudFormation", "ActivateType", {})
    .n("CloudFormationClient", "ActivateTypeCommand")
    .f(void 0, void 0)
    .ser(se_ActivateTypeCommand)
    .de(de_ActivateTypeCommand)
    .build() {
}

class BatchDescribeTypeConfigurationsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("CloudFormation", "BatchDescribeTypeConfigurations", {})
    .n("CloudFormationClient", "BatchDescribeTypeConfigurationsCommand")
    .f(void 0, void 0)
    .ser(se_BatchDescribeTypeConfigurationsCommand)
    .de(de_BatchDescribeTypeConfigurationsCommand)
    .build() {
}

class CancelUpdateStackCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("CloudFormation", "CancelUpdateStack", {})
    .n("CloudFormationClient", "CancelUpdateStackCommand")
    .f(void 0, void 0)
    .ser(se_CancelUpdateStackCommand)
    .de(de_CancelUpdateStackCommand)
    .build() {
}

class ContinueUpdateRollbackCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("CloudFormation", "ContinueUpdateRollback", {})
    .n("CloudFormationClient", "ContinueUpdateRollbackCommand")
    .f(void 0, void 0)
    .ser(se_ContinueUpdateRollbackCommand)
    .de(de_ContinueUpdateRollbackCommand)
    .build() {
}

class CreateChangeSetCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("CloudFormation", "CreateChangeSet", {})
    .n("CloudFormationClient", "CreateChangeSetCommand")
    .f(void 0, void 0)
    .ser(se_CreateChangeSetCommand)
    .de(de_CreateChangeSetCommand)
    .build() {
}

class CreateGeneratedTemplateCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("CloudFormation", "CreateGeneratedTemplate", {})
    .n("CloudFormationClient", "CreateGeneratedTemplateCommand")
    .f(void 0, void 0)
    .ser(se_CreateGeneratedTemplateCommand)
    .de(de_CreateGeneratedTemplateCommand)
    .build() {
}

class CreateStackCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("CloudFormation", "CreateStack", {})
    .n("CloudFormationClient", "CreateStackCommand")
    .f(void 0, void 0)
    .ser(se_CreateStackCommand)
    .de(de_CreateStackCommand)
    .build() {
}

class CreateStackInstancesCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("CloudFormation", "CreateStackInstances", {})
    .n("CloudFormationClient", "CreateStackInstancesCommand")
    .f(void 0, void 0)
    .ser(se_CreateStackInstancesCommand)
    .de(de_CreateStackInstancesCommand)
    .build() {
}

class CreateStackRefactorCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("CloudFormation", "CreateStackRefactor", {})
    .n("CloudFormationClient", "CreateStackRefactorCommand")
    .f(void 0, void 0)
    .ser(se_CreateStackRefactorCommand)
    .de(de_CreateStackRefactorCommand)
    .build() {
}

class CreateStackSetCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("CloudFormation", "CreateStackSet", {})
    .n("CloudFormationClient", "CreateStackSetCommand")
    .f(void 0, void 0)
    .ser(se_CreateStackSetCommand)
    .de(de_CreateStackSetCommand)
    .build() {
}

class DeactivateOrganizationsAccessCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("CloudFormation", "DeactivateOrganizationsAccess", {})
    .n("CloudFormationClient", "DeactivateOrganizationsAccessCommand")
    .f(void 0, void 0)
    .ser(se_DeactivateOrganizationsAccessCommand)
    .de(de_DeactivateOrganizationsAccessCommand)
    .build() {
}

class DeactivateTypeCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("CloudFormation", "DeactivateType", {})
    .n("CloudFormationClient", "DeactivateTypeCommand")
    .f(void 0, void 0)
    .ser(se_DeactivateTypeCommand)
    .de(de_DeactivateTypeCommand)
    .build() {
}

class DeleteChangeSetCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("CloudFormation", "DeleteChangeSet", {})
    .n("CloudFormationClient", "DeleteChangeSetCommand")
    .f(void 0, void 0)
    .ser(se_DeleteChangeSetCommand)
    .de(de_DeleteChangeSetCommand)
    .build() {
}

class DeleteGeneratedTemplateCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("CloudFormation", "DeleteGeneratedTemplate", {})
    .n("CloudFormationClient", "DeleteGeneratedTemplateCommand")
    .f(void 0, void 0)
    .ser(se_DeleteGeneratedTemplateCommand)
    .de(de_DeleteGeneratedTemplateCommand)
    .build() {
}

class DeleteStackCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("CloudFormation", "DeleteStack", {})
    .n("CloudFormationClient", "DeleteStackCommand")
    .f(void 0, void 0)
    .ser(se_DeleteStackCommand)
    .de(de_DeleteStackCommand)
    .build() {
}

class DeleteStackInstancesCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("CloudFormation", "DeleteStackInstances", {})
    .n("CloudFormationClient", "DeleteStackInstancesCommand")
    .f(void 0, void 0)
    .ser(se_DeleteStackInstancesCommand)
    .de(de_DeleteStackInstancesCommand)
    .build() {
}

class DeleteStackSetCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("CloudFormation", "DeleteStackSet", {})
    .n("CloudFormationClient", "DeleteStackSetCommand")
    .f(void 0, void 0)
    .ser(se_DeleteStackSetCommand)
    .de(de_DeleteStackSetCommand)
    .build() {
}

class DeregisterTypeCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("CloudFormation", "DeregisterType", {})
    .n("CloudFormationClient", "DeregisterTypeCommand")
    .f(void 0, void 0)
    .ser(se_DeregisterTypeCommand)
    .de(de_DeregisterTypeCommand)
    .build() {
}

class DescribeAccountLimitsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("CloudFormation", "DescribeAccountLimits", {})
    .n("CloudFormationClient", "DescribeAccountLimitsCommand")
    .f(void 0, void 0)
    .ser(se_DescribeAccountLimitsCommand)
    .de(de_DescribeAccountLimitsCommand)
    .build() {
}

class DescribeChangeSetCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("CloudFormation", "DescribeChangeSet", {})
    .n("CloudFormationClient", "DescribeChangeSetCommand")
    .f(void 0, void 0)
    .ser(se_DescribeChangeSetCommand)
    .de(de_DescribeChangeSetCommand)
    .build() {
}

class DescribeChangeSetHooksCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("CloudFormation", "DescribeChangeSetHooks", {})
    .n("CloudFormationClient", "DescribeChangeSetHooksCommand")
    .f(void 0, void 0)
    .ser(se_DescribeChangeSetHooksCommand)
    .de(de_DescribeChangeSetHooksCommand)
    .build() {
}

class DescribeGeneratedTemplateCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("CloudFormation", "DescribeGeneratedTemplate", {})
    .n("CloudFormationClient", "DescribeGeneratedTemplateCommand")
    .f(void 0, void 0)
    .ser(se_DescribeGeneratedTemplateCommand)
    .de(de_DescribeGeneratedTemplateCommand)
    .build() {
}

class DescribeOrganizationsAccessCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("CloudFormation", "DescribeOrganizationsAccess", {})
    .n("CloudFormationClient", "DescribeOrganizationsAccessCommand")
    .f(void 0, void 0)
    .ser(se_DescribeOrganizationsAccessCommand)
    .de(de_DescribeOrganizationsAccessCommand)
    .build() {
}

class DescribePublisherCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("CloudFormation", "DescribePublisher", {})
    .n("CloudFormationClient", "DescribePublisherCommand")
    .f(void 0, void 0)
    .ser(se_DescribePublisherCommand)
    .de(de_DescribePublisherCommand)
    .build() {
}

class DescribeResourceScanCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("CloudFormation", "DescribeResourceScan", {})
    .n("CloudFormationClient", "DescribeResourceScanCommand")
    .f(void 0, void 0)
    .ser(se_DescribeResourceScanCommand)
    .de(de_DescribeResourceScanCommand)
    .build() {
}

class DescribeStackDriftDetectionStatusCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("CloudFormation", "DescribeStackDriftDetectionStatus", {})
    .n("CloudFormationClient", "DescribeStackDriftDetectionStatusCommand")
    .f(void 0, void 0)
    .ser(se_DescribeStackDriftDetectionStatusCommand)
    .de(de_DescribeStackDriftDetectionStatusCommand)
    .build() {
}

class DescribeStackEventsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("CloudFormation", "DescribeStackEvents", {})
    .n("CloudFormationClient", "DescribeStackEventsCommand")
    .f(void 0, void 0)
    .ser(se_DescribeStackEventsCommand)
    .de(de_DescribeStackEventsCommand)
    .build() {
}

class DescribeStackInstanceCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("CloudFormation", "DescribeStackInstance", {})
    .n("CloudFormationClient", "DescribeStackInstanceCommand")
    .f(void 0, void 0)
    .ser(se_DescribeStackInstanceCommand)
    .de(de_DescribeStackInstanceCommand)
    .build() {
}

class DescribeStackRefactorCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("CloudFormation", "DescribeStackRefactor", {})
    .n("CloudFormationClient", "DescribeStackRefactorCommand")
    .f(void 0, void 0)
    .ser(se_DescribeStackRefactorCommand)
    .de(de_DescribeStackRefactorCommand)
    .build() {
}

class DescribeStackResourceCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("CloudFormation", "DescribeStackResource", {})
    .n("CloudFormationClient", "DescribeStackResourceCommand")
    .f(void 0, void 0)
    .ser(se_DescribeStackResourceCommand)
    .de(de_DescribeStackResourceCommand)
    .build() {
}

class DescribeStackResourceDriftsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("CloudFormation", "DescribeStackResourceDrifts", {})
    .n("CloudFormationClient", "DescribeStackResourceDriftsCommand")
    .f(void 0, void 0)
    .ser(se_DescribeStackResourceDriftsCommand)
    .de(de_DescribeStackResourceDriftsCommand)
    .build() {
}

class DescribeStackResourcesCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("CloudFormation", "DescribeStackResources", {})
    .n("CloudFormationClient", "DescribeStackResourcesCommand")
    .f(void 0, void 0)
    .ser(se_DescribeStackResourcesCommand)
    .de(de_DescribeStackResourcesCommand)
    .build() {
}

class DescribeStacksCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("CloudFormation", "DescribeStacks", {})
    .n("CloudFormationClient", "DescribeStacksCommand")
    .f(void 0, void 0)
    .ser(se_DescribeStacksCommand)
    .de(de_DescribeStacksCommand)
    .build() {
}

class DescribeStackSetCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("CloudFormation", "DescribeStackSet", {})
    .n("CloudFormationClient", "DescribeStackSetCommand")
    .f(void 0, void 0)
    .ser(se_DescribeStackSetCommand)
    .de(de_DescribeStackSetCommand)
    .build() {
}

class DescribeStackSetOperationCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("CloudFormation", "DescribeStackSetOperation", {})
    .n("CloudFormationClient", "DescribeStackSetOperationCommand")
    .f(void 0, void 0)
    .ser(se_DescribeStackSetOperationCommand)
    .de(de_DescribeStackSetOperationCommand)
    .build() {
}

class DescribeTypeCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("CloudFormation", "DescribeType", {})
    .n("CloudFormationClient", "DescribeTypeCommand")
    .f(void 0, void 0)
    .ser(se_DescribeTypeCommand)
    .de(de_DescribeTypeCommand)
    .build() {
}

class DescribeTypeRegistrationCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("CloudFormation", "DescribeTypeRegistration", {})
    .n("CloudFormationClient", "DescribeTypeRegistrationCommand")
    .f(void 0, void 0)
    .ser(se_DescribeTypeRegistrationCommand)
    .de(de_DescribeTypeRegistrationCommand)
    .build() {
}

class DetectStackDriftCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("CloudFormation", "DetectStackDrift", {})
    .n("CloudFormationClient", "DetectStackDriftCommand")
    .f(void 0, void 0)
    .ser(se_DetectStackDriftCommand)
    .de(de_DetectStackDriftCommand)
    .build() {
}

class DetectStackResourceDriftCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("CloudFormation", "DetectStackResourceDrift", {})
    .n("CloudFormationClient", "DetectStackResourceDriftCommand")
    .f(void 0, void 0)
    .ser(se_DetectStackResourceDriftCommand)
    .de(de_DetectStackResourceDriftCommand)
    .build() {
}

class DetectStackSetDriftCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("CloudFormation", "DetectStackSetDrift", {})
    .n("CloudFormationClient", "DetectStackSetDriftCommand")
    .f(void 0, void 0)
    .ser(se_DetectStackSetDriftCommand)
    .de(de_DetectStackSetDriftCommand)
    .build() {
}

class EstimateTemplateCostCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("CloudFormation", "EstimateTemplateCost", {})
    .n("CloudFormationClient", "EstimateTemplateCostCommand")
    .f(void 0, void 0)
    .ser(se_EstimateTemplateCostCommand)
    .de(de_EstimateTemplateCostCommand)
    .build() {
}

class ExecuteChangeSetCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("CloudFormation", "ExecuteChangeSet", {})
    .n("CloudFormationClient", "ExecuteChangeSetCommand")
    .f(void 0, void 0)
    .ser(se_ExecuteChangeSetCommand)
    .de(de_ExecuteChangeSetCommand)
    .build() {
}

class ExecuteStackRefactorCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("CloudFormation", "ExecuteStackRefactor", {})
    .n("CloudFormationClient", "ExecuteStackRefactorCommand")
    .f(void 0, void 0)
    .ser(se_ExecuteStackRefactorCommand)
    .de(de_ExecuteStackRefactorCommand)
    .build() {
}

class GetGeneratedTemplateCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("CloudFormation", "GetGeneratedTemplate", {})
    .n("CloudFormationClient", "GetGeneratedTemplateCommand")
    .f(void 0, void 0)
    .ser(se_GetGeneratedTemplateCommand)
    .de(de_GetGeneratedTemplateCommand)
    .build() {
}

class GetStackPolicyCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("CloudFormation", "GetStackPolicy", {})
    .n("CloudFormationClient", "GetStackPolicyCommand")
    .f(void 0, void 0)
    .ser(se_GetStackPolicyCommand)
    .de(de_GetStackPolicyCommand)
    .build() {
}

class GetTemplateCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("CloudFormation", "GetTemplate", {})
    .n("CloudFormationClient", "GetTemplateCommand")
    .f(void 0, void 0)
    .ser(se_GetTemplateCommand)
    .de(de_GetTemplateCommand)
    .build() {
}

class GetTemplateSummaryCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("CloudFormation", "GetTemplateSummary", {})
    .n("CloudFormationClient", "GetTemplateSummaryCommand")
    .f(void 0, void 0)
    .ser(se_GetTemplateSummaryCommand)
    .de(de_GetTemplateSummaryCommand)
    .build() {
}

class ImportStacksToStackSetCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("CloudFormation", "ImportStacksToStackSet", {})
    .n("CloudFormationClient", "ImportStacksToStackSetCommand")
    .f(void 0, void 0)
    .ser(se_ImportStacksToStackSetCommand)
    .de(de_ImportStacksToStackSetCommand)
    .build() {
}

class ListChangeSetsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("CloudFormation", "ListChangeSets", {})
    .n("CloudFormationClient", "ListChangeSetsCommand")
    .f(void 0, void 0)
    .ser(se_ListChangeSetsCommand)
    .de(de_ListChangeSetsCommand)
    .build() {
}

class ListExportsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("CloudFormation", "ListExports", {})
    .n("CloudFormationClient", "ListExportsCommand")
    .f(void 0, void 0)
    .ser(se_ListExportsCommand)
    .de(de_ListExportsCommand)
    .build() {
}

class ListGeneratedTemplatesCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("CloudFormation", "ListGeneratedTemplates", {})
    .n("CloudFormationClient", "ListGeneratedTemplatesCommand")
    .f(void 0, void 0)
    .ser(se_ListGeneratedTemplatesCommand)
    .de(de_ListGeneratedTemplatesCommand)
    .build() {
}

class ListHookResultsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("CloudFormation", "ListHookResults", {})
    .n("CloudFormationClient", "ListHookResultsCommand")
    .f(void 0, void 0)
    .ser(se_ListHookResultsCommand)
    .de(de_ListHookResultsCommand)
    .build() {
}

class ListImportsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("CloudFormation", "ListImports", {})
    .n("CloudFormationClient", "ListImportsCommand")
    .f(void 0, void 0)
    .ser(se_ListImportsCommand)
    .de(de_ListImportsCommand)
    .build() {
}

class ListResourceScanRelatedResourcesCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("CloudFormation", "ListResourceScanRelatedResources", {})
    .n("CloudFormationClient", "ListResourceScanRelatedResourcesCommand")
    .f(void 0, void 0)
    .ser(se_ListResourceScanRelatedResourcesCommand)
    .de(de_ListResourceScanRelatedResourcesCommand)
    .build() {
}

class ListResourceScanResourcesCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("CloudFormation", "ListResourceScanResources", {})
    .n("CloudFormationClient", "ListResourceScanResourcesCommand")
    .f(void 0, void 0)
    .ser(se_ListResourceScanResourcesCommand)
    .de(de_ListResourceScanResourcesCommand)
    .build() {
}

class ListResourceScansCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("CloudFormation", "ListResourceScans", {})
    .n("CloudFormationClient", "ListResourceScansCommand")
    .f(void 0, void 0)
    .ser(se_ListResourceScansCommand)
    .de(de_ListResourceScansCommand)
    .build() {
}

class ListStackInstanceResourceDriftsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("CloudFormation", "ListStackInstanceResourceDrifts", {})
    .n("CloudFormationClient", "ListStackInstanceResourceDriftsCommand")
    .f(void 0, void 0)
    .ser(se_ListStackInstanceResourceDriftsCommand)
    .de(de_ListStackInstanceResourceDriftsCommand)
    .build() {
}

class ListStackInstancesCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("CloudFormation", "ListStackInstances", {})
    .n("CloudFormationClient", "ListStackInstancesCommand")
    .f(void 0, void 0)
    .ser(se_ListStackInstancesCommand)
    .de(de_ListStackInstancesCommand)
    .build() {
}

class ListStackRefactorActionsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("CloudFormation", "ListStackRefactorActions", {})
    .n("CloudFormationClient", "ListStackRefactorActionsCommand")
    .f(void 0, void 0)
    .ser(se_ListStackRefactorActionsCommand)
    .de(de_ListStackRefactorActionsCommand)
    .build() {
}

class ListStackRefactorsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("CloudFormation", "ListStackRefactors", {})
    .n("CloudFormationClient", "ListStackRefactorsCommand")
    .f(void 0, void 0)
    .ser(se_ListStackRefactorsCommand)
    .de(de_ListStackRefactorsCommand)
    .build() {
}

class ListStackResourcesCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("CloudFormation", "ListStackResources", {})
    .n("CloudFormationClient", "ListStackResourcesCommand")
    .f(void 0, void 0)
    .ser(se_ListStackResourcesCommand)
    .de(de_ListStackResourcesCommand)
    .build() {
}

class ListStacksCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("CloudFormation", "ListStacks", {})
    .n("CloudFormationClient", "ListStacksCommand")
    .f(void 0, void 0)
    .ser(se_ListStacksCommand)
    .de(de_ListStacksCommand)
    .build() {
}

class ListStackSetAutoDeploymentTargetsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("CloudFormation", "ListStackSetAutoDeploymentTargets", {})
    .n("CloudFormationClient", "ListStackSetAutoDeploymentTargetsCommand")
    .f(void 0, void 0)
    .ser(se_ListStackSetAutoDeploymentTargetsCommand)
    .de(de_ListStackSetAutoDeploymentTargetsCommand)
    .build() {
}

class ListStackSetOperationResultsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("CloudFormation", "ListStackSetOperationResults", {})
    .n("CloudFormationClient", "ListStackSetOperationResultsCommand")
    .f(void 0, void 0)
    .ser(se_ListStackSetOperationResultsCommand)
    .de(de_ListStackSetOperationResultsCommand)
    .build() {
}

class ListStackSetOperationsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("CloudFormation", "ListStackSetOperations", {})
    .n("CloudFormationClient", "ListStackSetOperationsCommand")
    .f(void 0, void 0)
    .ser(se_ListStackSetOperationsCommand)
    .de(de_ListStackSetOperationsCommand)
    .build() {
}

class ListStackSetsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("CloudFormation", "ListStackSets", {})
    .n("CloudFormationClient", "ListStackSetsCommand")
    .f(void 0, void 0)
    .ser(se_ListStackSetsCommand)
    .de(de_ListStackSetsCommand)
    .build() {
}

class ListTypeRegistrationsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("CloudFormation", "ListTypeRegistrations", {})
    .n("CloudFormationClient", "ListTypeRegistrationsCommand")
    .f(void 0, void 0)
    .ser(se_ListTypeRegistrationsCommand)
    .de(de_ListTypeRegistrationsCommand)
    .build() {
}

class ListTypesCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("CloudFormation", "ListTypes", {})
    .n("CloudFormationClient", "ListTypesCommand")
    .f(void 0, void 0)
    .ser(se_ListTypesCommand)
    .de(de_ListTypesCommand)
    .build() {
}

class ListTypeVersionsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("CloudFormation", "ListTypeVersions", {})
    .n("CloudFormationClient", "ListTypeVersionsCommand")
    .f(void 0, void 0)
    .ser(se_ListTypeVersionsCommand)
    .de(de_ListTypeVersionsCommand)
    .build() {
}

class PublishTypeCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("CloudFormation", "PublishType", {})
    .n("CloudFormationClient", "PublishTypeCommand")
    .f(void 0, void 0)
    .ser(se_PublishTypeCommand)
    .de(de_PublishTypeCommand)
    .build() {
}

class RecordHandlerProgressCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("CloudFormation", "RecordHandlerProgress", {})
    .n("CloudFormationClient", "RecordHandlerProgressCommand")
    .f(void 0, void 0)
    .ser(se_RecordHandlerProgressCommand)
    .de(de_RecordHandlerProgressCommand)
    .build() {
}

class RegisterPublisherCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("CloudFormation", "RegisterPublisher", {})
    .n("CloudFormationClient", "RegisterPublisherCommand")
    .f(void 0, void 0)
    .ser(se_RegisterPublisherCommand)
    .de(de_RegisterPublisherCommand)
    .build() {
}

class RegisterTypeCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("CloudFormation", "RegisterType", {})
    .n("CloudFormationClient", "RegisterTypeCommand")
    .f(void 0, void 0)
    .ser(se_RegisterTypeCommand)
    .de(de_RegisterTypeCommand)
    .build() {
}

class RollbackStackCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("CloudFormation", "RollbackStack", {})
    .n("CloudFormationClient", "RollbackStackCommand")
    .f(void 0, void 0)
    .ser(se_RollbackStackCommand)
    .de(de_RollbackStackCommand)
    .build() {
}

class SetStackPolicyCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("CloudFormation", "SetStackPolicy", {})
    .n("CloudFormationClient", "SetStackPolicyCommand")
    .f(void 0, void 0)
    .ser(se_SetStackPolicyCommand)
    .de(de_SetStackPolicyCommand)
    .build() {
}

class SetTypeConfigurationCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("CloudFormation", "SetTypeConfiguration", {})
    .n("CloudFormationClient", "SetTypeConfigurationCommand")
    .f(void 0, void 0)
    .ser(se_SetTypeConfigurationCommand)
    .de(de_SetTypeConfigurationCommand)
    .build() {
}

class SetTypeDefaultVersionCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("CloudFormation", "SetTypeDefaultVersion", {})
    .n("CloudFormationClient", "SetTypeDefaultVersionCommand")
    .f(void 0, void 0)
    .ser(se_SetTypeDefaultVersionCommand)
    .de(de_SetTypeDefaultVersionCommand)
    .build() {
}

class SignalResourceCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("CloudFormation", "SignalResource", {})
    .n("CloudFormationClient", "SignalResourceCommand")
    .f(void 0, void 0)
    .ser(se_SignalResourceCommand)
    .de(de_SignalResourceCommand)
    .build() {
}

class StartResourceScanCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("CloudFormation", "StartResourceScan", {})
    .n("CloudFormationClient", "StartResourceScanCommand")
    .f(void 0, void 0)
    .ser(se_StartResourceScanCommand)
    .de(de_StartResourceScanCommand)
    .build() {
}

class StopStackSetOperationCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("CloudFormation", "StopStackSetOperation", {})
    .n("CloudFormationClient", "StopStackSetOperationCommand")
    .f(void 0, void 0)
    .ser(se_StopStackSetOperationCommand)
    .de(de_StopStackSetOperationCommand)
    .build() {
}

class TestTypeCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("CloudFormation", "TestType", {})
    .n("CloudFormationClient", "TestTypeCommand")
    .f(void 0, void 0)
    .ser(se_TestTypeCommand)
    .de(de_TestTypeCommand)
    .build() {
}

class UpdateGeneratedTemplateCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("CloudFormation", "UpdateGeneratedTemplate", {})
    .n("CloudFormationClient", "UpdateGeneratedTemplateCommand")
    .f(void 0, void 0)
    .ser(se_UpdateGeneratedTemplateCommand)
    .de(de_UpdateGeneratedTemplateCommand)
    .build() {
}

class UpdateStackCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("CloudFormation", "UpdateStack", {})
    .n("CloudFormationClient", "UpdateStackCommand")
    .f(void 0, void 0)
    .ser(se_UpdateStackCommand)
    .de(de_UpdateStackCommand)
    .build() {
}

class UpdateStackInstancesCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("CloudFormation", "UpdateStackInstances", {})
    .n("CloudFormationClient", "UpdateStackInstancesCommand")
    .f(void 0, void 0)
    .ser(se_UpdateStackInstancesCommand)
    .de(de_UpdateStackInstancesCommand)
    .build() {
}

class UpdateStackSetCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("CloudFormation", "UpdateStackSet", {})
    .n("CloudFormationClient", "UpdateStackSetCommand")
    .f(void 0, void 0)
    .ser(se_UpdateStackSetCommand)
    .de(de_UpdateStackSetCommand)
    .build() {
}

class UpdateTerminationProtectionCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("CloudFormation", "UpdateTerminationProtection", {})
    .n("CloudFormationClient", "UpdateTerminationProtectionCommand")
    .f(void 0, void 0)
    .ser(se_UpdateTerminationProtectionCommand)
    .de(de_UpdateTerminationProtectionCommand)
    .build() {
}

class ValidateTemplateCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("CloudFormation", "ValidateTemplate", {})
    .n("CloudFormationClient", "ValidateTemplateCommand")
    .f(void 0, void 0)
    .ser(se_ValidateTemplateCommand)
    .de(de_ValidateTemplateCommand)
    .build() {
}

const commands = {
    ActivateOrganizationsAccessCommand,
    ActivateTypeCommand,
    BatchDescribeTypeConfigurationsCommand,
    CancelUpdateStackCommand,
    ContinueUpdateRollbackCommand,
    CreateChangeSetCommand,
    CreateGeneratedTemplateCommand,
    CreateStackCommand,
    CreateStackInstancesCommand,
    CreateStackRefactorCommand,
    CreateStackSetCommand,
    DeactivateOrganizationsAccessCommand,
    DeactivateTypeCommand,
    DeleteChangeSetCommand,
    DeleteGeneratedTemplateCommand,
    DeleteStackCommand,
    DeleteStackInstancesCommand,
    DeleteStackSetCommand,
    DeregisterTypeCommand,
    DescribeAccountLimitsCommand,
    DescribeChangeSetCommand,
    DescribeChangeSetHooksCommand,
    DescribeGeneratedTemplateCommand,
    DescribeOrganizationsAccessCommand,
    DescribePublisherCommand,
    DescribeResourceScanCommand,
    DescribeStackDriftDetectionStatusCommand,
    DescribeStackEventsCommand,
    DescribeStackInstanceCommand,
    DescribeStackRefactorCommand,
    DescribeStackResourceCommand,
    DescribeStackResourceDriftsCommand,
    DescribeStackResourcesCommand,
    DescribeStacksCommand,
    DescribeStackSetCommand,
    DescribeStackSetOperationCommand,
    DescribeTypeCommand,
    DescribeTypeRegistrationCommand,
    DetectStackDriftCommand,
    DetectStackResourceDriftCommand,
    DetectStackSetDriftCommand,
    EstimateTemplateCostCommand,
    ExecuteChangeSetCommand,
    ExecuteStackRefactorCommand,
    GetGeneratedTemplateCommand,
    GetStackPolicyCommand,
    GetTemplateCommand,
    GetTemplateSummaryCommand,
    ImportStacksToStackSetCommand,
    ListChangeSetsCommand,
    ListExportsCommand,
    ListGeneratedTemplatesCommand,
    ListHookResultsCommand,
    ListImportsCommand,
    ListResourceScanRelatedResourcesCommand,
    ListResourceScanResourcesCommand,
    ListResourceScansCommand,
    ListStackInstanceResourceDriftsCommand,
    ListStackInstancesCommand,
    ListStackRefactorActionsCommand,
    ListStackRefactorsCommand,
    ListStackResourcesCommand,
    ListStacksCommand,
    ListStackSetAutoDeploymentTargetsCommand,
    ListStackSetOperationResultsCommand,
    ListStackSetOperationsCommand,
    ListStackSetsCommand,
    ListTypeRegistrationsCommand,
    ListTypesCommand,
    ListTypeVersionsCommand,
    PublishTypeCommand,
    RecordHandlerProgressCommand,
    RegisterPublisherCommand,
    RegisterTypeCommand,
    RollbackStackCommand,
    SetStackPolicyCommand,
    SetTypeConfigurationCommand,
    SetTypeDefaultVersionCommand,
    SignalResourceCommand,
    StartResourceScanCommand,
    StopStackSetOperationCommand,
    TestTypeCommand,
    UpdateGeneratedTemplateCommand,
    UpdateStackCommand,
    UpdateStackInstancesCommand,
    UpdateStackSetCommand,
    UpdateTerminationProtectionCommand,
    ValidateTemplateCommand,
};
class CloudFormation extends CloudFormationClient {
}
smithyClient.createAggregatedClient(commands, CloudFormation);

const paginateDescribeAccountLimits = core.createPaginator(CloudFormationClient, DescribeAccountLimitsCommand, "NextToken", "NextToken", "");

const paginateDescribeStackEvents = core.createPaginator(CloudFormationClient, DescribeStackEventsCommand, "NextToken", "NextToken", "");

const paginateDescribeStackResourceDrifts = core.createPaginator(CloudFormationClient, DescribeStackResourceDriftsCommand, "NextToken", "NextToken", "MaxResults");

const paginateDescribeStacks = core.createPaginator(CloudFormationClient, DescribeStacksCommand, "NextToken", "NextToken", "");

const paginateListChangeSets = core.createPaginator(CloudFormationClient, ListChangeSetsCommand, "NextToken", "NextToken", "");

const paginateListExports = core.createPaginator(CloudFormationClient, ListExportsCommand, "NextToken", "NextToken", "");

const paginateListGeneratedTemplates = core.createPaginator(CloudFormationClient, ListGeneratedTemplatesCommand, "NextToken", "NextToken", "MaxResults");

const paginateListImports = core.createPaginator(CloudFormationClient, ListImportsCommand, "NextToken", "NextToken", "");

const paginateListResourceScanRelatedResources = core.createPaginator(CloudFormationClient, ListResourceScanRelatedResourcesCommand, "NextToken", "NextToken", "MaxResults");

const paginateListResourceScanResources = core.createPaginator(CloudFormationClient, ListResourceScanResourcesCommand, "NextToken", "NextToken", "MaxResults");

const paginateListResourceScans = core.createPaginator(CloudFormationClient, ListResourceScansCommand, "NextToken", "NextToken", "MaxResults");

const paginateListStackInstances = core.createPaginator(CloudFormationClient, ListStackInstancesCommand, "NextToken", "NextToken", "MaxResults");

const paginateListStackRefactorActions = core.createPaginator(CloudFormationClient, ListStackRefactorActionsCommand, "NextToken", "NextToken", "MaxResults");

const paginateListStackRefactors = core.createPaginator(CloudFormationClient, ListStackRefactorsCommand, "NextToken", "NextToken", "MaxResults");

const paginateListStackResources = core.createPaginator(CloudFormationClient, ListStackResourcesCommand, "NextToken", "NextToken", "");

const paginateListStackSetOperationResults = core.createPaginator(CloudFormationClient, ListStackSetOperationResultsCommand, "NextToken", "NextToken", "MaxResults");

const paginateListStackSetOperations = core.createPaginator(CloudFormationClient, ListStackSetOperationsCommand, "NextToken", "NextToken", "MaxResults");

const paginateListStackSets = core.createPaginator(CloudFormationClient, ListStackSetsCommand, "NextToken", "NextToken", "MaxResults");

const paginateListStacks = core.createPaginator(CloudFormationClient, ListStacksCommand, "NextToken", "NextToken", "");

const paginateListTypeRegistrations = core.createPaginator(CloudFormationClient, ListTypeRegistrationsCommand, "NextToken", "NextToken", "MaxResults");

const paginateListTypeVersions = core.createPaginator(CloudFormationClient, ListTypeVersionsCommand, "NextToken", "NextToken", "MaxResults");

const paginateListTypes = core.createPaginator(CloudFormationClient, ListTypesCommand, "NextToken", "NextToken", "MaxResults");

const checkState$9 = async (client, input) => {
    let reason;
    try {
        const result = await client.send(new DescribeChangeSetCommand(input));
        reason = result;
        try {
            const returnComparator = () => {
                return result.Status;
            };
            if (returnComparator() === "CREATE_COMPLETE") {
                return { state: utilWaiter.WaiterState.SUCCESS, reason };
            }
        }
        catch (e) { }
        try {
            const returnComparator = () => {
                return result.Status;
            };
            if (returnComparator() === "FAILED") {
                return { state: utilWaiter.WaiterState.FAILURE, reason };
            }
        }
        catch (e) { }
    }
    catch (exception) {
        reason = exception;
        if (exception.name && exception.name == "ValidationError") {
            return { state: utilWaiter.WaiterState.FAILURE, reason };
        }
    }
    return { state: utilWaiter.WaiterState.RETRY, reason };
};
const waitForChangeSetCreateComplete = async (params, input) => {
    const serviceDefaults = { minDelay: 30, maxDelay: 120 };
    return utilWaiter.createWaiter({ ...serviceDefaults, ...params }, input, checkState$9);
};
const waitUntilChangeSetCreateComplete = async (params, input) => {
    const serviceDefaults = { minDelay: 30, maxDelay: 120 };
    const result = await utilWaiter.createWaiter({ ...serviceDefaults, ...params }, input, checkState$9);
    return utilWaiter.checkExceptions(result);
};

const checkState$8 = async (client, input) => {
    let reason;
    try {
        const result = await client.send(new DescribeStacksCommand(input));
        reason = result;
        try {
            const returnComparator = () => {
                const flat_1 = [].concat(...result.Stacks);
                const projection_3 = flat_1.map((element_2) => {
                    return element_2.StackStatus;
                });
                return projection_3;
            };
            let allStringEq_5 = returnComparator().length > 0;
            for (const element_4 of returnComparator()) {
                allStringEq_5 = allStringEq_5 && element_4 == "CREATE_COMPLETE";
            }
            if (allStringEq_5) {
                return { state: utilWaiter.WaiterState.SUCCESS, reason };
            }
        }
        catch (e) { }
        try {
            const returnComparator = () => {
                const flat_1 = [].concat(...result.Stacks);
                const projection_3 = flat_1.map((element_2) => {
                    return element_2.StackStatus;
                });
                return projection_3;
            };
            let allStringEq_5 = returnComparator().length > 0;
            for (const element_4 of returnComparator()) {
                allStringEq_5 = allStringEq_5 && element_4 == "UPDATE_COMPLETE";
            }
            if (allStringEq_5) {
                return { state: utilWaiter.WaiterState.SUCCESS, reason };
            }
        }
        catch (e) { }
        try {
            const returnComparator = () => {
                const flat_1 = [].concat(...result.Stacks);
                const projection_3 = flat_1.map((element_2) => {
                    return element_2.StackStatus;
                });
                return projection_3;
            };
            let allStringEq_5 = returnComparator().length > 0;
            for (const element_4 of returnComparator()) {
                allStringEq_5 = allStringEq_5 && element_4 == "UPDATE_IN_PROGRESS";
            }
            if (allStringEq_5) {
                return { state: utilWaiter.WaiterState.SUCCESS, reason };
            }
        }
        catch (e) { }
        try {
            const returnComparator = () => {
                const flat_1 = [].concat(...result.Stacks);
                const projection_3 = flat_1.map((element_2) => {
                    return element_2.StackStatus;
                });
                return projection_3;
            };
            let allStringEq_5 = returnComparator().length > 0;
            for (const element_4 of returnComparator()) {
                allStringEq_5 = allStringEq_5 && element_4 == "UPDATE_COMPLETE_CLEANUP_IN_PROGRESS";
            }
            if (allStringEq_5) {
                return { state: utilWaiter.WaiterState.SUCCESS, reason };
            }
        }
        catch (e) { }
        try {
            const returnComparator = () => {
                const flat_1 = [].concat(...result.Stacks);
                const projection_3 = flat_1.map((element_2) => {
                    return element_2.StackStatus;
                });
                return projection_3;
            };
            let allStringEq_5 = returnComparator().length > 0;
            for (const element_4 of returnComparator()) {
                allStringEq_5 = allStringEq_5 && element_4 == "UPDATE_FAILED";
            }
            if (allStringEq_5) {
                return { state: utilWaiter.WaiterState.SUCCESS, reason };
            }
        }
        catch (e) { }
        try {
            const returnComparator = () => {
                const flat_1 = [].concat(...result.Stacks);
                const projection_3 = flat_1.map((element_2) => {
                    return element_2.StackStatus;
                });
                return projection_3;
            };
            let allStringEq_5 = returnComparator().length > 0;
            for (const element_4 of returnComparator()) {
                allStringEq_5 = allStringEq_5 && element_4 == "UPDATE_ROLLBACK_IN_PROGRESS";
            }
            if (allStringEq_5) {
                return { state: utilWaiter.WaiterState.SUCCESS, reason };
            }
        }
        catch (e) { }
        try {
            const returnComparator = () => {
                const flat_1 = [].concat(...result.Stacks);
                const projection_3 = flat_1.map((element_2) => {
                    return element_2.StackStatus;
                });
                return projection_3;
            };
            let allStringEq_5 = returnComparator().length > 0;
            for (const element_4 of returnComparator()) {
                allStringEq_5 = allStringEq_5 && element_4 == "UPDATE_ROLLBACK_FAILED";
            }
            if (allStringEq_5) {
                return { state: utilWaiter.WaiterState.SUCCESS, reason };
            }
        }
        catch (e) { }
        try {
            const returnComparator = () => {
                const flat_1 = [].concat(...result.Stacks);
                const projection_3 = flat_1.map((element_2) => {
                    return element_2.StackStatus;
                });
                return projection_3;
            };
            let allStringEq_5 = returnComparator().length > 0;
            for (const element_4 of returnComparator()) {
                allStringEq_5 = allStringEq_5 && element_4 == "UPDATE_ROLLBACK_COMPLETE_CLEANUP_IN_PROGRESS";
            }
            if (allStringEq_5) {
                return { state: utilWaiter.WaiterState.SUCCESS, reason };
            }
        }
        catch (e) { }
        try {
            const returnComparator = () => {
                const flat_1 = [].concat(...result.Stacks);
                const projection_3 = flat_1.map((element_2) => {
                    return element_2.StackStatus;
                });
                return projection_3;
            };
            let allStringEq_5 = returnComparator().length > 0;
            for (const element_4 of returnComparator()) {
                allStringEq_5 = allStringEq_5 && element_4 == "UPDATE_ROLLBACK_COMPLETE";
            }
            if (allStringEq_5) {
                return { state: utilWaiter.WaiterState.SUCCESS, reason };
            }
        }
        catch (e) { }
        try {
            const returnComparator = () => {
                const flat_1 = [].concat(...result.Stacks);
                const projection_3 = flat_1.map((element_2) => {
                    return element_2.StackStatus;
                });
                return projection_3;
            };
            for (const anyStringEq_4 of returnComparator()) {
                if (anyStringEq_4 == "CREATE_FAILED") {
                    return { state: utilWaiter.WaiterState.FAILURE, reason };
                }
            }
        }
        catch (e) { }
        try {
            const returnComparator = () => {
                const flat_1 = [].concat(...result.Stacks);
                const projection_3 = flat_1.map((element_2) => {
                    return element_2.StackStatus;
                });
                return projection_3;
            };
            for (const anyStringEq_4 of returnComparator()) {
                if (anyStringEq_4 == "DELETE_COMPLETE") {
                    return { state: utilWaiter.WaiterState.FAILURE, reason };
                }
            }
        }
        catch (e) { }
        try {
            const returnComparator = () => {
                const flat_1 = [].concat(...result.Stacks);
                const projection_3 = flat_1.map((element_2) => {
                    return element_2.StackStatus;
                });
                return projection_3;
            };
            for (const anyStringEq_4 of returnComparator()) {
                if (anyStringEq_4 == "DELETE_FAILED") {
                    return { state: utilWaiter.WaiterState.FAILURE, reason };
                }
            }
        }
        catch (e) { }
        try {
            const returnComparator = () => {
                const flat_1 = [].concat(...result.Stacks);
                const projection_3 = flat_1.map((element_2) => {
                    return element_2.StackStatus;
                });
                return projection_3;
            };
            for (const anyStringEq_4 of returnComparator()) {
                if (anyStringEq_4 == "ROLLBACK_FAILED") {
                    return { state: utilWaiter.WaiterState.FAILURE, reason };
                }
            }
        }
        catch (e) { }
        try {
            const returnComparator = () => {
                const flat_1 = [].concat(...result.Stacks);
                const projection_3 = flat_1.map((element_2) => {
                    return element_2.StackStatus;
                });
                return projection_3;
            };
            for (const anyStringEq_4 of returnComparator()) {
                if (anyStringEq_4 == "ROLLBACK_COMPLETE") {
                    return { state: utilWaiter.WaiterState.FAILURE, reason };
                }
            }
        }
        catch (e) { }
    }
    catch (exception) {
        reason = exception;
        if (exception.name && exception.name == "ValidationError") {
            return { state: utilWaiter.WaiterState.FAILURE, reason };
        }
    }
    return { state: utilWaiter.WaiterState.RETRY, reason };
};
const waitForStackCreateComplete = async (params, input) => {
    const serviceDefaults = { minDelay: 30, maxDelay: 120 };
    return utilWaiter.createWaiter({ ...serviceDefaults, ...params }, input, checkState$8);
};
const waitUntilStackCreateComplete = async (params, input) => {
    const serviceDefaults = { minDelay: 30, maxDelay: 120 };
    const result = await utilWaiter.createWaiter({ ...serviceDefaults, ...params }, input, checkState$8);
    return utilWaiter.checkExceptions(result);
};

const checkState$7 = async (client, input) => {
    let reason;
    try {
        const result = await client.send(new DescribeStacksCommand(input));
        reason = result;
        try {
            const returnComparator = () => {
                const flat_1 = [].concat(...result.Stacks);
                const projection_3 = flat_1.map((element_2) => {
                    return element_2.StackStatus;
                });
                return projection_3;
            };
            let allStringEq_5 = returnComparator().length > 0;
            for (const element_4 of returnComparator()) {
                allStringEq_5 = allStringEq_5 && element_4 == "DELETE_COMPLETE";
            }
            if (allStringEq_5) {
                return { state: utilWaiter.WaiterState.SUCCESS, reason };
            }
        }
        catch (e) { }
        try {
            const returnComparator = () => {
                const flat_1 = [].concat(...result.Stacks);
                const projection_3 = flat_1.map((element_2) => {
                    return element_2.StackStatus;
                });
                return projection_3;
            };
            for (const anyStringEq_4 of returnComparator()) {
                if (anyStringEq_4 == "DELETE_FAILED") {
                    return { state: utilWaiter.WaiterState.FAILURE, reason };
                }
            }
        }
        catch (e) { }
        try {
            const returnComparator = () => {
                const flat_1 = [].concat(...result.Stacks);
                const projection_3 = flat_1.map((element_2) => {
                    return element_2.StackStatus;
                });
                return projection_3;
            };
            for (const anyStringEq_4 of returnComparator()) {
                if (anyStringEq_4 == "CREATE_FAILED") {
                    return { state: utilWaiter.WaiterState.FAILURE, reason };
                }
            }
        }
        catch (e) { }
        try {
            const returnComparator = () => {
                const flat_1 = [].concat(...result.Stacks);
                const projection_3 = flat_1.map((element_2) => {
                    return element_2.StackStatus;
                });
                return projection_3;
            };
            for (const anyStringEq_4 of returnComparator()) {
                if (anyStringEq_4 == "ROLLBACK_FAILED") {
                    return { state: utilWaiter.WaiterState.FAILURE, reason };
                }
            }
        }
        catch (e) { }
        try {
            const returnComparator = () => {
                const flat_1 = [].concat(...result.Stacks);
                const projection_3 = flat_1.map((element_2) => {
                    return element_2.StackStatus;
                });
                return projection_3;
            };
            for (const anyStringEq_4 of returnComparator()) {
                if (anyStringEq_4 == "UPDATE_ROLLBACK_IN_PROGRESS") {
                    return { state: utilWaiter.WaiterState.FAILURE, reason };
                }
            }
        }
        catch (e) { }
        try {
            const returnComparator = () => {
                const flat_1 = [].concat(...result.Stacks);
                const projection_3 = flat_1.map((element_2) => {
                    return element_2.StackStatus;
                });
                return projection_3;
            };
            for (const anyStringEq_4 of returnComparator()) {
                if (anyStringEq_4 == "UPDATE_ROLLBACK_FAILED") {
                    return { state: utilWaiter.WaiterState.FAILURE, reason };
                }
            }
        }
        catch (e) { }
        try {
            const returnComparator = () => {
                const flat_1 = [].concat(...result.Stacks);
                const projection_3 = flat_1.map((element_2) => {
                    return element_2.StackStatus;
                });
                return projection_3;
            };
            for (const anyStringEq_4 of returnComparator()) {
                if (anyStringEq_4 == "UPDATE_ROLLBACK_COMPLETE") {
                    return { state: utilWaiter.WaiterState.FAILURE, reason };
                }
            }
        }
        catch (e) { }
        try {
            const returnComparator = () => {
                const flat_1 = [].concat(...result.Stacks);
                const projection_3 = flat_1.map((element_2) => {
                    return element_2.StackStatus;
                });
                return projection_3;
            };
            for (const anyStringEq_4 of returnComparator()) {
                if (anyStringEq_4 == "UPDATE_COMPLETE") {
                    return { state: utilWaiter.WaiterState.FAILURE, reason };
                }
            }
        }
        catch (e) { }
    }
    catch (exception) {
        reason = exception;
        if (exception.name && exception.name == "ValidationError") {
            return { state: utilWaiter.WaiterState.SUCCESS, reason };
        }
    }
    return { state: utilWaiter.WaiterState.RETRY, reason };
};
const waitForStackDeleteComplete = async (params, input) => {
    const serviceDefaults = { minDelay: 30, maxDelay: 120 };
    return utilWaiter.createWaiter({ ...serviceDefaults, ...params }, input, checkState$7);
};
const waitUntilStackDeleteComplete = async (params, input) => {
    const serviceDefaults = { minDelay: 30, maxDelay: 120 };
    const result = await utilWaiter.createWaiter({ ...serviceDefaults, ...params }, input, checkState$7);
    return utilWaiter.checkExceptions(result);
};

const checkState$6 = async (client, input) => {
    let reason;
    try {
        const result = await client.send(new DescribeStacksCommand(input));
        reason = result;
        return { state: utilWaiter.WaiterState.SUCCESS, reason };
    }
    catch (exception) {
        reason = exception;
        if (exception.name && exception.name == "ValidationError") {
            return { state: utilWaiter.WaiterState.RETRY, reason };
        }
    }
    return { state: utilWaiter.WaiterState.RETRY, reason };
};
const waitForStackExists = async (params, input) => {
    const serviceDefaults = { minDelay: 5, maxDelay: 120 };
    return utilWaiter.createWaiter({ ...serviceDefaults, ...params }, input, checkState$6);
};
const waitUntilStackExists = async (params, input) => {
    const serviceDefaults = { minDelay: 5, maxDelay: 120 };
    const result = await utilWaiter.createWaiter({ ...serviceDefaults, ...params }, input, checkState$6);
    return utilWaiter.checkExceptions(result);
};

const checkState$5 = async (client, input) => {
    let reason;
    try {
        const result = await client.send(new DescribeStacksCommand(input));
        reason = result;
        try {
            const returnComparator = () => {
                const flat_1 = [].concat(...result.Stacks);
                const projection_3 = flat_1.map((element_2) => {
                    return element_2.StackStatus;
                });
                return projection_3;
            };
            let allStringEq_5 = returnComparator().length > 0;
            for (const element_4 of returnComparator()) {
                allStringEq_5 = allStringEq_5 && element_4 == "IMPORT_COMPLETE";
            }
            if (allStringEq_5) {
                return { state: utilWaiter.WaiterState.SUCCESS, reason };
            }
        }
        catch (e) { }
        try {
            const returnComparator = () => {
                const flat_1 = [].concat(...result.Stacks);
                const projection_3 = flat_1.map((element_2) => {
                    return element_2.StackStatus;
                });
                return projection_3;
            };
            for (const anyStringEq_4 of returnComparator()) {
                if (anyStringEq_4 == "ROLLBACK_COMPLETE") {
                    return { state: utilWaiter.WaiterState.FAILURE, reason };
                }
            }
        }
        catch (e) { }
        try {
            const returnComparator = () => {
                const flat_1 = [].concat(...result.Stacks);
                const projection_3 = flat_1.map((element_2) => {
                    return element_2.StackStatus;
                });
                return projection_3;
            };
            for (const anyStringEq_4 of returnComparator()) {
                if (anyStringEq_4 == "ROLLBACK_FAILED") {
                    return { state: utilWaiter.WaiterState.FAILURE, reason };
                }
            }
        }
        catch (e) { }
        try {
            const returnComparator = () => {
                const flat_1 = [].concat(...result.Stacks);
                const projection_3 = flat_1.map((element_2) => {
                    return element_2.StackStatus;
                });
                return projection_3;
            };
            for (const anyStringEq_4 of returnComparator()) {
                if (anyStringEq_4 == "IMPORT_ROLLBACK_IN_PROGRESS") {
                    return { state: utilWaiter.WaiterState.FAILURE, reason };
                }
            }
        }
        catch (e) { }
        try {
            const returnComparator = () => {
                const flat_1 = [].concat(...result.Stacks);
                const projection_3 = flat_1.map((element_2) => {
                    return element_2.StackStatus;
                });
                return projection_3;
            };
            for (const anyStringEq_4 of returnComparator()) {
                if (anyStringEq_4 == "IMPORT_ROLLBACK_FAILED") {
                    return { state: utilWaiter.WaiterState.FAILURE, reason };
                }
            }
        }
        catch (e) { }
        try {
            const returnComparator = () => {
                const flat_1 = [].concat(...result.Stacks);
                const projection_3 = flat_1.map((element_2) => {
                    return element_2.StackStatus;
                });
                return projection_3;
            };
            for (const anyStringEq_4 of returnComparator()) {
                if (anyStringEq_4 == "IMPORT_ROLLBACK_COMPLETE") {
                    return { state: utilWaiter.WaiterState.FAILURE, reason };
                }
            }
        }
        catch (e) { }
    }
    catch (exception) {
        reason = exception;
        if (exception.name && exception.name == "ValidationError") {
            return { state: utilWaiter.WaiterState.FAILURE, reason };
        }
    }
    return { state: utilWaiter.WaiterState.RETRY, reason };
};
const waitForStackImportComplete = async (params, input) => {
    const serviceDefaults = { minDelay: 30, maxDelay: 120 };
    return utilWaiter.createWaiter({ ...serviceDefaults, ...params }, input, checkState$5);
};
const waitUntilStackImportComplete = async (params, input) => {
    const serviceDefaults = { minDelay: 30, maxDelay: 120 };
    const result = await utilWaiter.createWaiter({ ...serviceDefaults, ...params }, input, checkState$5);
    return utilWaiter.checkExceptions(result);
};

const checkState$4 = async (client, input) => {
    let reason;
    try {
        const result = await client.send(new DescribeStackRefactorCommand(input));
        reason = result;
        try {
            const returnComparator = () => {
                return result.Status;
            };
            if (returnComparator() === "CREATE_COMPLETE") {
                return { state: utilWaiter.WaiterState.SUCCESS, reason };
            }
        }
        catch (e) { }
        try {
            const returnComparator = () => {
                return result.Status;
            };
            if (returnComparator() === "CREATE_FAILED") {
                return { state: utilWaiter.WaiterState.FAILURE, reason };
            }
        }
        catch (e) { }
    }
    catch (exception) {
        reason = exception;
        if (exception.name && exception.name == "ValidationError") {
            return { state: utilWaiter.WaiterState.FAILURE, reason };
        }
    }
    return { state: utilWaiter.WaiterState.RETRY, reason };
};
const waitForStackRefactorCreateComplete = async (params, input) => {
    const serviceDefaults = { minDelay: 5, maxDelay: 120 };
    return utilWaiter.createWaiter({ ...serviceDefaults, ...params }, input, checkState$4);
};
const waitUntilStackRefactorCreateComplete = async (params, input) => {
    const serviceDefaults = { minDelay: 5, maxDelay: 120 };
    const result = await utilWaiter.createWaiter({ ...serviceDefaults, ...params }, input, checkState$4);
    return utilWaiter.checkExceptions(result);
};

const checkState$3 = async (client, input) => {
    let reason;
    try {
        const result = await client.send(new DescribeStackRefactorCommand(input));
        reason = result;
        try {
            const returnComparator = () => {
                return result.ExecutionStatus;
            };
            if (returnComparator() === "EXECUTE_COMPLETE") {
                return { state: utilWaiter.WaiterState.SUCCESS, reason };
            }
        }
        catch (e) { }
        try {
            const returnComparator = () => {
                return result.ExecutionStatus;
            };
            if (returnComparator() === "EXECUTE_FAILED") {
                return { state: utilWaiter.WaiterState.FAILURE, reason };
            }
        }
        catch (e) { }
        try {
            const returnComparator = () => {
                return result.ExecutionStatus;
            };
            if (returnComparator() === "ROLLBACK_COMPLETE") {
                return { state: utilWaiter.WaiterState.FAILURE, reason };
            }
        }
        catch (e) { }
    }
    catch (exception) {
        reason = exception;
        if (exception.name && exception.name == "ValidationError") {
            return { state: utilWaiter.WaiterState.FAILURE, reason };
        }
    }
    return { state: utilWaiter.WaiterState.RETRY, reason };
};
const waitForStackRefactorExecuteComplete = async (params, input) => {
    const serviceDefaults = { minDelay: 15, maxDelay: 120 };
    return utilWaiter.createWaiter({ ...serviceDefaults, ...params }, input, checkState$3);
};
const waitUntilStackRefactorExecuteComplete = async (params, input) => {
    const serviceDefaults = { minDelay: 15, maxDelay: 120 };
    const result = await utilWaiter.createWaiter({ ...serviceDefaults, ...params }, input, checkState$3);
    return utilWaiter.checkExceptions(result);
};

const checkState$2 = async (client, input) => {
    let reason;
    try {
        const result = await client.send(new DescribeStacksCommand(input));
        reason = result;
        try {
            const returnComparator = () => {
                const flat_1 = [].concat(...result.Stacks);
                const projection_3 = flat_1.map((element_2) => {
                    return element_2.StackStatus;
                });
                return projection_3;
            };
            let allStringEq_5 = returnComparator().length > 0;
            for (const element_4 of returnComparator()) {
                allStringEq_5 = allStringEq_5 && element_4 == "UPDATE_ROLLBACK_COMPLETE";
            }
            if (allStringEq_5) {
                return { state: utilWaiter.WaiterState.SUCCESS, reason };
            }
        }
        catch (e) { }
        try {
            const returnComparator = () => {
                const flat_1 = [].concat(...result.Stacks);
                const projection_3 = flat_1.map((element_2) => {
                    return element_2.StackStatus;
                });
                return projection_3;
            };
            for (const anyStringEq_4 of returnComparator()) {
                if (anyStringEq_4 == "UPDATE_FAILED") {
                    return { state: utilWaiter.WaiterState.FAILURE, reason };
                }
            }
        }
        catch (e) { }
        try {
            const returnComparator = () => {
                const flat_1 = [].concat(...result.Stacks);
                const projection_3 = flat_1.map((element_2) => {
                    return element_2.StackStatus;
                });
                return projection_3;
            };
            for (const anyStringEq_4 of returnComparator()) {
                if (anyStringEq_4 == "UPDATE_ROLLBACK_FAILED") {
                    return { state: utilWaiter.WaiterState.FAILURE, reason };
                }
            }
        }
        catch (e) { }
        try {
            const returnComparator = () => {
                const flat_1 = [].concat(...result.Stacks);
                const projection_3 = flat_1.map((element_2) => {
                    return element_2.StackStatus;
                });
                return projection_3;
            };
            for (const anyStringEq_4 of returnComparator()) {
                if (anyStringEq_4 == "DELETE_FAILED") {
                    return { state: utilWaiter.WaiterState.FAILURE, reason };
                }
            }
        }
        catch (e) { }
    }
    catch (exception) {
        reason = exception;
        if (exception.name && exception.name == "ValidationError") {
            return { state: utilWaiter.WaiterState.FAILURE, reason };
        }
    }
    return { state: utilWaiter.WaiterState.RETRY, reason };
};
const waitForStackRollbackComplete = async (params, input) => {
    const serviceDefaults = { minDelay: 30, maxDelay: 120 };
    return utilWaiter.createWaiter({ ...serviceDefaults, ...params }, input, checkState$2);
};
const waitUntilStackRollbackComplete = async (params, input) => {
    const serviceDefaults = { minDelay: 30, maxDelay: 120 };
    const result = await utilWaiter.createWaiter({ ...serviceDefaults, ...params }, input, checkState$2);
    return utilWaiter.checkExceptions(result);
};

const checkState$1 = async (client, input) => {
    let reason;
    try {
        const result = await client.send(new DescribeStacksCommand(input));
        reason = result;
        try {
            const returnComparator = () => {
                const flat_1 = [].concat(...result.Stacks);
                const projection_3 = flat_1.map((element_2) => {
                    return element_2.StackStatus;
                });
                return projection_3;
            };
            let allStringEq_5 = returnComparator().length > 0;
            for (const element_4 of returnComparator()) {
                allStringEq_5 = allStringEq_5 && element_4 == "UPDATE_COMPLETE";
            }
            if (allStringEq_5) {
                return { state: utilWaiter.WaiterState.SUCCESS, reason };
            }
        }
        catch (e) { }
        try {
            const returnComparator = () => {
                const flat_1 = [].concat(...result.Stacks);
                const projection_3 = flat_1.map((element_2) => {
                    return element_2.StackStatus;
                });
                return projection_3;
            };
            for (const anyStringEq_4 of returnComparator()) {
                if (anyStringEq_4 == "UPDATE_FAILED") {
                    return { state: utilWaiter.WaiterState.FAILURE, reason };
                }
            }
        }
        catch (e) { }
        try {
            const returnComparator = () => {
                const flat_1 = [].concat(...result.Stacks);
                const projection_3 = flat_1.map((element_2) => {
                    return element_2.StackStatus;
                });
                return projection_3;
            };
            for (const anyStringEq_4 of returnComparator()) {
                if (anyStringEq_4 == "UPDATE_ROLLBACK_FAILED") {
                    return { state: utilWaiter.WaiterState.FAILURE, reason };
                }
            }
        }
        catch (e) { }
        try {
            const returnComparator = () => {
                const flat_1 = [].concat(...result.Stacks);
                const projection_3 = flat_1.map((element_2) => {
                    return element_2.StackStatus;
                });
                return projection_3;
            };
            for (const anyStringEq_4 of returnComparator()) {
                if (anyStringEq_4 == "UPDATE_ROLLBACK_COMPLETE") {
                    return { state: utilWaiter.WaiterState.FAILURE, reason };
                }
            }
        }
        catch (e) { }
    }
    catch (exception) {
        reason = exception;
        if (exception.name && exception.name == "ValidationError") {
            return { state: utilWaiter.WaiterState.FAILURE, reason };
        }
    }
    return { state: utilWaiter.WaiterState.RETRY, reason };
};
const waitForStackUpdateComplete = async (params, input) => {
    const serviceDefaults = { minDelay: 30, maxDelay: 120 };
    return utilWaiter.createWaiter({ ...serviceDefaults, ...params }, input, checkState$1);
};
const waitUntilStackUpdateComplete = async (params, input) => {
    const serviceDefaults = { minDelay: 30, maxDelay: 120 };
    const result = await utilWaiter.createWaiter({ ...serviceDefaults, ...params }, input, checkState$1);
    return utilWaiter.checkExceptions(result);
};

const checkState = async (client, input) => {
    let reason;
    try {
        const result = await client.send(new DescribeTypeRegistrationCommand(input));
        reason = result;
        try {
            const returnComparator = () => {
                return result.ProgressStatus;
            };
            if (returnComparator() === "COMPLETE") {
                return { state: utilWaiter.WaiterState.SUCCESS, reason };
            }
        }
        catch (e) { }
        try {
            const returnComparator = () => {
                return result.ProgressStatus;
            };
            if (returnComparator() === "FAILED") {
                return { state: utilWaiter.WaiterState.FAILURE, reason };
            }
        }
        catch (e) { }
    }
    catch (exception) {
        reason = exception;
    }
    return { state: utilWaiter.WaiterState.RETRY, reason };
};
const waitForTypeRegistrationComplete = async (params, input) => {
    const serviceDefaults = { minDelay: 30, maxDelay: 120 };
    return utilWaiter.createWaiter({ ...serviceDefaults, ...params }, input, checkState);
};
const waitUntilTypeRegistrationComplete = async (params, input) => {
    const serviceDefaults = { minDelay: 30, maxDelay: 120 };
    const result = await utilWaiter.createWaiter({ ...serviceDefaults, ...params }, input, checkState);
    return utilWaiter.checkExceptions(result);
};

Object.defineProperty(exports, "$Command", {
    enumerable: true,
    get: function () { return smithyClient.Command; }
});
Object.defineProperty(exports, "__Client", {
    enumerable: true,
    get: function () { return smithyClient.Client; }
});
exports.AccountFilterType = AccountFilterType;
exports.AccountGateStatus = AccountGateStatus;
exports.ActivateOrganizationsAccessCommand = ActivateOrganizationsAccessCommand;
exports.ActivateTypeCommand = ActivateTypeCommand;
exports.AlreadyExistsException = AlreadyExistsException;
exports.AttributeChangeType = AttributeChangeType;
exports.BatchDescribeTypeConfigurationsCommand = BatchDescribeTypeConfigurationsCommand;
exports.CFNRegistryException = CFNRegistryException;
exports.CallAs = CallAs;
exports.CancelUpdateStackCommand = CancelUpdateStackCommand;
exports.Capability = Capability;
exports.Category = Category;
exports.ChangeAction = ChangeAction;
exports.ChangeSetHooksStatus = ChangeSetHooksStatus;
exports.ChangeSetNotFoundException = ChangeSetNotFoundException;
exports.ChangeSetStatus = ChangeSetStatus;
exports.ChangeSetType = ChangeSetType;
exports.ChangeSource = ChangeSource;
exports.ChangeType = ChangeType;
exports.CloudFormation = CloudFormation;
exports.CloudFormationClient = CloudFormationClient;
exports.CloudFormationServiceException = CloudFormationServiceException;
exports.ConcurrencyMode = ConcurrencyMode;
exports.ConcurrentResourcesLimitExceededException = ConcurrentResourcesLimitExceededException;
exports.ContinueUpdateRollbackCommand = ContinueUpdateRollbackCommand;
exports.CreateChangeSetCommand = CreateChangeSetCommand;
exports.CreateGeneratedTemplateCommand = CreateGeneratedTemplateCommand;
exports.CreateStackCommand = CreateStackCommand;
exports.CreateStackInstancesCommand = CreateStackInstancesCommand;
exports.CreateStackRefactorCommand = CreateStackRefactorCommand;
exports.CreateStackSetCommand = CreateStackSetCommand;
exports.CreatedButModifiedException = CreatedButModifiedException;
exports.DeactivateOrganizationsAccessCommand = DeactivateOrganizationsAccessCommand;
exports.DeactivateTypeCommand = DeactivateTypeCommand;
exports.DeleteChangeSetCommand = DeleteChangeSetCommand;
exports.DeleteGeneratedTemplateCommand = DeleteGeneratedTemplateCommand;
exports.DeleteStackCommand = DeleteStackCommand;
exports.DeleteStackInstancesCommand = DeleteStackInstancesCommand;
exports.DeleteStackSetCommand = DeleteStackSetCommand;
exports.DeletionMode = DeletionMode;
exports.DeprecatedStatus = DeprecatedStatus;
exports.DeregisterTypeCommand = DeregisterTypeCommand;
exports.DescribeAccountLimitsCommand = DescribeAccountLimitsCommand;
exports.DescribeChangeSetCommand = DescribeChangeSetCommand;
exports.DescribeChangeSetHooksCommand = DescribeChangeSetHooksCommand;
exports.DescribeGeneratedTemplateCommand = DescribeGeneratedTemplateCommand;
exports.DescribeOrganizationsAccessCommand = DescribeOrganizationsAccessCommand;
exports.DescribePublisherCommand = DescribePublisherCommand;
exports.DescribeResourceScanCommand = DescribeResourceScanCommand;
exports.DescribeStackDriftDetectionStatusCommand = DescribeStackDriftDetectionStatusCommand;
exports.DescribeStackEventsCommand = DescribeStackEventsCommand;
exports.DescribeStackInstanceCommand = DescribeStackInstanceCommand;
exports.DescribeStackRefactorCommand = DescribeStackRefactorCommand;
exports.DescribeStackResourceCommand = DescribeStackResourceCommand;
exports.DescribeStackResourceDriftsCommand = DescribeStackResourceDriftsCommand;
exports.DescribeStackResourcesCommand = DescribeStackResourcesCommand;
exports.DescribeStackSetCommand = DescribeStackSetCommand;
exports.DescribeStackSetOperationCommand = DescribeStackSetOperationCommand;
exports.DescribeStacksCommand = DescribeStacksCommand;
exports.DescribeTypeCommand = DescribeTypeCommand;
exports.DescribeTypeRegistrationCommand = DescribeTypeRegistrationCommand;
exports.DetailedStatus = DetailedStatus;
exports.DetectStackDriftCommand = DetectStackDriftCommand;
exports.DetectStackResourceDriftCommand = DetectStackResourceDriftCommand;
exports.DetectStackSetDriftCommand = DetectStackSetDriftCommand;
exports.DifferenceType = DifferenceType;
exports.EstimateTemplateCostCommand = EstimateTemplateCostCommand;
exports.EvaluationType = EvaluationType;
exports.ExecuteChangeSetCommand = ExecuteChangeSetCommand;
exports.ExecuteStackRefactorCommand = ExecuteStackRefactorCommand;
exports.ExecutionStatus = ExecutionStatus;
exports.GeneratedTemplateDeletionPolicy = GeneratedTemplateDeletionPolicy;
exports.GeneratedTemplateNotFoundException = GeneratedTemplateNotFoundException;
exports.GeneratedTemplateResourceStatus = GeneratedTemplateResourceStatus;
exports.GeneratedTemplateStatus = GeneratedTemplateStatus;
exports.GeneratedTemplateUpdateReplacePolicy = GeneratedTemplateUpdateReplacePolicy;
exports.GetGeneratedTemplateCommand = GetGeneratedTemplateCommand;
exports.GetStackPolicyCommand = GetStackPolicyCommand;
exports.GetTemplateCommand = GetTemplateCommand;
exports.GetTemplateSummaryCommand = GetTemplateSummaryCommand;
exports.HandlerErrorCode = HandlerErrorCode;
exports.HookFailureMode = HookFailureMode;
exports.HookInvocationPoint = HookInvocationPoint;
exports.HookResultNotFoundException = HookResultNotFoundException;
exports.HookStatus = HookStatus;
exports.HookTargetType = HookTargetType;
exports.IdentityProvider = IdentityProvider;
exports.ImportStacksToStackSetCommand = ImportStacksToStackSetCommand;
exports.InsufficientCapabilitiesException = InsufficientCapabilitiesException;
exports.InvalidChangeSetStatusException = InvalidChangeSetStatusException;
exports.InvalidOperationException = InvalidOperationException;
exports.InvalidStateTransitionException = InvalidStateTransitionException;
exports.LimitExceededException = LimitExceededException;
exports.ListChangeSetsCommand = ListChangeSetsCommand;
exports.ListExportsCommand = ListExportsCommand;
exports.ListGeneratedTemplatesCommand = ListGeneratedTemplatesCommand;
exports.ListHookResultsCommand = ListHookResultsCommand;
exports.ListHookResultsTargetType = ListHookResultsTargetType;
exports.ListImportsCommand = ListImportsCommand;
exports.ListResourceScanRelatedResourcesCommand = ListResourceScanRelatedResourcesCommand;
exports.ListResourceScanResourcesCommand = ListResourceScanResourcesCommand;
exports.ListResourceScansCommand = ListResourceScansCommand;
exports.ListStackInstanceResourceDriftsCommand = ListStackInstanceResourceDriftsCommand;
exports.ListStackInstancesCommand = ListStackInstancesCommand;
exports.ListStackRefactorActionsCommand = ListStackRefactorActionsCommand;
exports.ListStackRefactorsCommand = ListStackRefactorsCommand;
exports.ListStackResourcesCommand = ListStackResourcesCommand;
exports.ListStackSetAutoDeploymentTargetsCommand = ListStackSetAutoDeploymentTargetsCommand;
exports.ListStackSetOperationResultsCommand = ListStackSetOperationResultsCommand;
exports.ListStackSetOperationsCommand = ListStackSetOperationsCommand;
exports.ListStackSetsCommand = ListStackSetsCommand;
exports.ListStacksCommand = ListStacksCommand;
exports.ListTypeRegistrationsCommand = ListTypeRegistrationsCommand;
exports.ListTypeVersionsCommand = ListTypeVersionsCommand;
exports.ListTypesCommand = ListTypesCommand;
exports.NameAlreadyExistsException = NameAlreadyExistsException;
exports.OnFailure = OnFailure;
exports.OnStackFailure = OnStackFailure;
exports.OperationIdAlreadyExistsException = OperationIdAlreadyExistsException;
exports.OperationInProgressException = OperationInProgressException;
exports.OperationNotFoundException = OperationNotFoundException;
exports.OperationResultFilterName = OperationResultFilterName;
exports.OperationStatus = OperationStatus;
exports.OperationStatusCheckFailedException = OperationStatusCheckFailedException;
exports.OrganizationStatus = OrganizationStatus;
exports.PermissionModels = PermissionModels;
exports.PolicyAction = PolicyAction;
exports.ProvisioningType = ProvisioningType;
exports.PublishTypeCommand = PublishTypeCommand;
exports.PublisherStatus = PublisherStatus;
exports.RecordHandlerProgressCommand = RecordHandlerProgressCommand;
exports.RegionConcurrencyType = RegionConcurrencyType;
exports.RegisterPublisherCommand = RegisterPublisherCommand;
exports.RegisterTypeCommand = RegisterTypeCommand;
exports.RegistrationStatus = RegistrationStatus;
exports.RegistryType = RegistryType;
exports.Replacement = Replacement;
exports.RequiresRecreation = RequiresRecreation;
exports.ResourceAttribute = ResourceAttribute;
exports.ResourceScanInProgressException = ResourceScanInProgressException;
exports.ResourceScanLimitExceededException = ResourceScanLimitExceededException;
exports.ResourceScanNotFoundException = ResourceScanNotFoundException;
exports.ResourceScanStatus = ResourceScanStatus;
exports.ResourceSignalStatus = ResourceSignalStatus;
exports.ResourceStatus = ResourceStatus;
exports.RollbackStackCommand = RollbackStackCommand;
exports.ScanType = ScanType;
exports.SetStackPolicyCommand = SetStackPolicyCommand;
exports.SetTypeConfigurationCommand = SetTypeConfigurationCommand;
exports.SetTypeDefaultVersionCommand = SetTypeDefaultVersionCommand;
exports.SignalResourceCommand = SignalResourceCommand;
exports.StackDriftDetectionStatus = StackDriftDetectionStatus;
exports.StackDriftStatus = StackDriftStatus;
exports.StackInstanceDetailedStatus = StackInstanceDetailedStatus;
exports.StackInstanceFilterName = StackInstanceFilterName;
exports.StackInstanceNotFoundException = StackInstanceNotFoundException;
exports.StackInstanceStatus = StackInstanceStatus;
exports.StackNotFoundException = StackNotFoundException;
exports.StackRefactorActionEntity = StackRefactorActionEntity;
exports.StackRefactorActionType = StackRefactorActionType;
exports.StackRefactorDetection = StackRefactorDetection;
exports.StackRefactorExecutionStatus = StackRefactorExecutionStatus;
exports.StackRefactorNotFoundException = StackRefactorNotFoundException;
exports.StackRefactorStatus = StackRefactorStatus;
exports.StackResourceDriftStatus = StackResourceDriftStatus;
exports.StackSetDriftDetectionStatus = StackSetDriftDetectionStatus;
exports.StackSetDriftStatus = StackSetDriftStatus;
exports.StackSetNotEmptyException = StackSetNotEmptyException;
exports.StackSetNotFoundException = StackSetNotFoundException;
exports.StackSetOperationAction = StackSetOperationAction;
exports.StackSetOperationResultStatus = StackSetOperationResultStatus;
exports.StackSetOperationStatus = StackSetOperationStatus;
exports.StackSetStatus = StackSetStatus;
exports.StackStatus = StackStatus;
exports.StaleRequestException = StaleRequestException;
exports.StartResourceScanCommand = StartResourceScanCommand;
exports.StopStackSetOperationCommand = StopStackSetOperationCommand;
exports.TemplateFormat = TemplateFormat;
exports.TemplateStage = TemplateStage;
exports.TestTypeCommand = TestTypeCommand;
exports.ThirdPartyType = ThirdPartyType;
exports.TokenAlreadyExistsException = TokenAlreadyExistsException;
exports.TypeConfigurationNotFoundException = TypeConfigurationNotFoundException;
exports.TypeNotFoundException = TypeNotFoundException;
exports.TypeTestsStatus = TypeTestsStatus;
exports.UpdateGeneratedTemplateCommand = UpdateGeneratedTemplateCommand;
exports.UpdateStackCommand = UpdateStackCommand;
exports.UpdateStackInstancesCommand = UpdateStackInstancesCommand;
exports.UpdateStackSetCommand = UpdateStackSetCommand;
exports.UpdateTerminationProtectionCommand = UpdateTerminationProtectionCommand;
exports.ValidateTemplateCommand = ValidateTemplateCommand;
exports.VersionBump = VersionBump;
exports.Visibility = Visibility;
exports.WarningType = WarningType;
exports.paginateDescribeAccountLimits = paginateDescribeAccountLimits;
exports.paginateDescribeStackEvents = paginateDescribeStackEvents;
exports.paginateDescribeStackResourceDrifts = paginateDescribeStackResourceDrifts;
exports.paginateDescribeStacks = paginateDescribeStacks;
exports.paginateListChangeSets = paginateListChangeSets;
exports.paginateListExports = paginateListExports;
exports.paginateListGeneratedTemplates = paginateListGeneratedTemplates;
exports.paginateListImports = paginateListImports;
exports.paginateListResourceScanRelatedResources = paginateListResourceScanRelatedResources;
exports.paginateListResourceScanResources = paginateListResourceScanResources;
exports.paginateListResourceScans = paginateListResourceScans;
exports.paginateListStackInstances = paginateListStackInstances;
exports.paginateListStackRefactorActions = paginateListStackRefactorActions;
exports.paginateListStackRefactors = paginateListStackRefactors;
exports.paginateListStackResources = paginateListStackResources;
exports.paginateListStackSetOperationResults = paginateListStackSetOperationResults;
exports.paginateListStackSetOperations = paginateListStackSetOperations;
exports.paginateListStackSets = paginateListStackSets;
exports.paginateListStacks = paginateListStacks;
exports.paginateListTypeRegistrations = paginateListTypeRegistrations;
exports.paginateListTypeVersions = paginateListTypeVersions;
exports.paginateListTypes = paginateListTypes;
exports.waitForChangeSetCreateComplete = waitForChangeSetCreateComplete;
exports.waitForStackCreateComplete = waitForStackCreateComplete;
exports.waitForStackDeleteComplete = waitForStackDeleteComplete;
exports.waitForStackExists = waitForStackExists;
exports.waitForStackImportComplete = waitForStackImportComplete;
exports.waitForStackRefactorCreateComplete = waitForStackRefactorCreateComplete;
exports.waitForStackRefactorExecuteComplete = waitForStackRefactorExecuteComplete;
exports.waitForStackRollbackComplete = waitForStackRollbackComplete;
exports.waitForStackUpdateComplete = waitForStackUpdateComplete;
exports.waitForTypeRegistrationComplete = waitForTypeRegistrationComplete;
exports.waitUntilChangeSetCreateComplete = waitUntilChangeSetCreateComplete;
exports.waitUntilStackCreateComplete = waitUntilStackCreateComplete;
exports.waitUntilStackDeleteComplete = waitUntilStackDeleteComplete;
exports.waitUntilStackExists = waitUntilStackExists;
exports.waitUntilStackImportComplete = waitUntilStackImportComplete;
exports.waitUntilStackRefactorCreateComplete = waitUntilStackRefactorCreateComplete;
exports.waitUntilStackRefactorExecuteComplete = waitUntilStackRefactorExecuteComplete;
exports.waitUntilStackRollbackComplete = waitUntilStackRollbackComplete;
exports.waitUntilStackUpdateComplete = waitUntilStackUpdateComplete;
exports.waitUntilTypeRegistrationComplete = waitUntilTypeRegistrationComplete;

'use strict';

var middlewareHostHeader = require('@aws-sdk/middleware-host-header');
var middlewareLogger = require('@aws-sdk/middleware-logger');
var middlewareRecursionDetection = require('@aws-sdk/middleware-recursion-detection');
var middlewareUserAgent = require('@aws-sdk/middleware-user-agent');
var configResolver = require('@smithy/config-resolver');
var core = require('@smithy/core');
var middlewareContentLength = require('@smithy/middleware-content-length');
var middlewareEndpoint = require('@smithy/middleware-endpoint');
var middlewareRetry = require('@smithy/middleware-retry');
var smithyClient = require('@smithy/smithy-client');
var httpAuthSchemeProvider = require('./auth/httpAuthSchemeProvider');
var runtimeConfig = require('./runtimeConfig');
var regionConfigResolver = require('@aws-sdk/region-config-resolver');
var protocolHttp = require('@smithy/protocol-http');
var middlewareSerde = require('@smithy/middleware-serde');
var core$1 = require('@aws-sdk/core');

const resolveClientEndpointParameters = (options) => {
    return Object.assign(options, {
        useDualstackEndpoint: options.useDualstackEndpoint ?? false,
        useFipsEndpoint: options.useFipsEndpoint ?? false,
        defaultSigningName: "events",
    });
};
const commonParams = {
    UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
    Endpoint: { type: "builtInParams", name: "endpoint" },
    Region: { type: "builtInParams", name: "region" },
    UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" },
};

const getHttpAuthExtensionConfiguration = (runtimeConfig) => {
    const _httpAuthSchemes = runtimeConfig.httpAuthSchemes;
    let _httpAuthSchemeProvider = runtimeConfig.httpAuthSchemeProvider;
    let _credentials = runtimeConfig.credentials;
    return {
        setHttpAuthScheme(httpAuthScheme) {
            const index = _httpAuthSchemes.findIndex((scheme) => scheme.schemeId === httpAuthScheme.schemeId);
            if (index === -1) {
                _httpAuthSchemes.push(httpAuthScheme);
            }
            else {
                _httpAuthSchemes.splice(index, 1, httpAuthScheme);
            }
        },
        httpAuthSchemes() {
            return _httpAuthSchemes;
        },
        setHttpAuthSchemeProvider(httpAuthSchemeProvider) {
            _httpAuthSchemeProvider = httpAuthSchemeProvider;
        },
        httpAuthSchemeProvider() {
            return _httpAuthSchemeProvider;
        },
        setCredentials(credentials) {
            _credentials = credentials;
        },
        credentials() {
            return _credentials;
        },
    };
};
const resolveHttpAuthRuntimeConfig = (config) => {
    return {
        httpAuthSchemes: config.httpAuthSchemes(),
        httpAuthSchemeProvider: config.httpAuthSchemeProvider(),
        credentials: config.credentials(),
    };
};

const resolveRuntimeExtensions = (runtimeConfig, extensions) => {
    const extensionConfiguration = Object.assign(regionConfigResolver.getAwsRegionExtensionConfiguration(runtimeConfig), smithyClient.getDefaultExtensionConfiguration(runtimeConfig), protocolHttp.getHttpHandlerExtensionConfiguration(runtimeConfig), getHttpAuthExtensionConfiguration(runtimeConfig));
    extensions.forEach((extension) => extension.configure(extensionConfiguration));
    return Object.assign(runtimeConfig, regionConfigResolver.resolveAwsRegionExtensionConfiguration(extensionConfiguration), smithyClient.resolveDefaultRuntimeConfig(extensionConfiguration), protocolHttp.resolveHttpHandlerRuntimeConfig(extensionConfiguration), resolveHttpAuthRuntimeConfig(extensionConfiguration));
};

class EventBridgeClient extends smithyClient.Client {
    config;
    constructor(...[configuration]) {
        const _config_0 = runtimeConfig.getRuntimeConfig(configuration || {});
        super(_config_0);
        this.initConfig = _config_0;
        const _config_1 = resolveClientEndpointParameters(_config_0);
        const _config_2 = middlewareUserAgent.resolveUserAgentConfig(_config_1);
        const _config_3 = middlewareRetry.resolveRetryConfig(_config_2);
        const _config_4 = configResolver.resolveRegionConfig(_config_3);
        const _config_5 = middlewareHostHeader.resolveHostHeaderConfig(_config_4);
        const _config_6 = middlewareEndpoint.resolveEndpointConfig(_config_5);
        const _config_7 = httpAuthSchemeProvider.resolveHttpAuthSchemeConfig(_config_6);
        const _config_8 = resolveRuntimeExtensions(_config_7, configuration?.extensions || []);
        this.config = _config_8;
        this.middlewareStack.use(middlewareUserAgent.getUserAgentPlugin(this.config));
        this.middlewareStack.use(middlewareRetry.getRetryPlugin(this.config));
        this.middlewareStack.use(middlewareContentLength.getContentLengthPlugin(this.config));
        this.middlewareStack.use(middlewareHostHeader.getHostHeaderPlugin(this.config));
        this.middlewareStack.use(middlewareLogger.getLoggerPlugin(this.config));
        this.middlewareStack.use(middlewareRecursionDetection.getRecursionDetectionPlugin(this.config));
        this.middlewareStack.use(core.getHttpAuthSchemeEndpointRuleSetPlugin(this.config, {
            httpAuthSchemeParametersProvider: httpAuthSchemeProvider.defaultEventBridgeHttpAuthSchemeParametersProvider,
            identityProviderConfigProvider: async (config) => new core.DefaultIdentityProviderConfig({
                "aws.auth#sigv4": config.credentials,
                "aws.auth#sigv4a": config.credentials,
            }),
        }));
        this.middlewareStack.use(core.getHttpSigningPlugin(this.config));
    }
    destroy() {
        super.destroy();
    }
}

class EventBridgeServiceException extends smithyClient.ServiceException {
    constructor(options) {
        super(options);
        Object.setPrototypeOf(this, EventBridgeServiceException.prototype);
    }
}

class AccessDeniedException extends EventBridgeServiceException {
    name = "AccessDeniedException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "AccessDeniedException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, AccessDeniedException.prototype);
    }
}
class ConcurrentModificationException extends EventBridgeServiceException {
    name = "ConcurrentModificationException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "ConcurrentModificationException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, ConcurrentModificationException.prototype);
    }
}
class InternalException extends EventBridgeServiceException {
    name = "InternalException";
    $fault = "server";
    constructor(opts) {
        super({
            name: "InternalException",
            $fault: "server",
            ...opts,
        });
        Object.setPrototypeOf(this, InternalException.prototype);
    }
}
class InvalidStateException extends EventBridgeServiceException {
    name = "InvalidStateException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "InvalidStateException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, InvalidStateException.prototype);
    }
}
class OperationDisabledException extends EventBridgeServiceException {
    name = "OperationDisabledException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "OperationDisabledException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, OperationDisabledException.prototype);
    }
}
class ResourceNotFoundException extends EventBridgeServiceException {
    name = "ResourceNotFoundException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "ResourceNotFoundException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, ResourceNotFoundException.prototype);
    }
}
const ApiDestinationState = {
    ACTIVE: "ACTIVE",
    INACTIVE: "INACTIVE",
};
const ApiDestinationHttpMethod = {
    DELETE: "DELETE",
    GET: "GET",
    HEAD: "HEAD",
    OPTIONS: "OPTIONS",
    PATCH: "PATCH",
    POST: "POST",
    PUT: "PUT",
};
const ArchiveState = {
    CREATE_FAILED: "CREATE_FAILED",
    CREATING: "CREATING",
    DISABLED: "DISABLED",
    ENABLED: "ENABLED",
    UPDATE_FAILED: "UPDATE_FAILED",
    UPDATING: "UPDATING",
};
const AssignPublicIp = {
    DISABLED: "DISABLED",
    ENABLED: "ENABLED",
};
const ReplayState = {
    CANCELLED: "CANCELLED",
    CANCELLING: "CANCELLING",
    COMPLETED: "COMPLETED",
    FAILED: "FAILED",
    RUNNING: "RUNNING",
    STARTING: "STARTING",
};
class IllegalStatusException extends EventBridgeServiceException {
    name = "IllegalStatusException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "IllegalStatusException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, IllegalStatusException.prototype);
    }
}
class LimitExceededException extends EventBridgeServiceException {
    name = "LimitExceededException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "LimitExceededException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, LimitExceededException.prototype);
    }
}
class ResourceAlreadyExistsException extends EventBridgeServiceException {
    name = "ResourceAlreadyExistsException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "ResourceAlreadyExistsException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, ResourceAlreadyExistsException.prototype);
    }
}
class InvalidEventPatternException extends EventBridgeServiceException {
    name = "InvalidEventPatternException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "InvalidEventPatternException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, InvalidEventPatternException.prototype);
    }
}
const ConnectionAuthorizationType = {
    API_KEY: "API_KEY",
    BASIC: "BASIC",
    OAUTH_CLIENT_CREDENTIALS: "OAUTH_CLIENT_CREDENTIALS",
};
const ConnectionOAuthHttpMethod = {
    GET: "GET",
    POST: "POST",
    PUT: "PUT",
};
const ConnectionState = {
    ACTIVE: "ACTIVE",
    AUTHORIZED: "AUTHORIZED",
    AUTHORIZING: "AUTHORIZING",
    CREATING: "CREATING",
    DEAUTHORIZED: "DEAUTHORIZED",
    DEAUTHORIZING: "DEAUTHORIZING",
    DELETING: "DELETING",
    FAILED_CONNECTIVITY: "FAILED_CONNECTIVITY",
    UPDATING: "UPDATING",
};
class ThrottlingException extends EventBridgeServiceException {
    name = "ThrottlingException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "ThrottlingException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, ThrottlingException.prototype);
    }
}
const ReplicationState = {
    DISABLED: "DISABLED",
    ENABLED: "ENABLED",
};
const EndpointState = {
    ACTIVE: "ACTIVE",
    CREATE_FAILED: "CREATE_FAILED",
    CREATING: "CREATING",
    DELETE_FAILED: "DELETE_FAILED",
    DELETING: "DELETING",
    UPDATE_FAILED: "UPDATE_FAILED",
    UPDATING: "UPDATING",
};
const IncludeDetail = {
    FULL: "FULL",
    NONE: "NONE",
};
const Level = {
    ERROR: "ERROR",
    INFO: "INFO",
    OFF: "OFF",
    TRACE: "TRACE",
};
class ManagedRuleException extends EventBridgeServiceException {
    name = "ManagedRuleException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "ManagedRuleException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, ManagedRuleException.prototype);
    }
}
const EventSourceState = {
    ACTIVE: "ACTIVE",
    DELETED: "DELETED",
    PENDING: "PENDING",
};
const RuleState = {
    DISABLED: "DISABLED",
    ENABLED: "ENABLED",
    ENABLED_WITH_ALL_CLOUDTRAIL_MANAGEMENT_EVENTS: "ENABLED_WITH_ALL_CLOUDTRAIL_MANAGEMENT_EVENTS",
};
const LaunchType = {
    EC2: "EC2",
    EXTERNAL: "EXTERNAL",
    FARGATE: "FARGATE",
};
const PlacementConstraintType = {
    DISTINCT_INSTANCE: "distinctInstance",
    MEMBER_OF: "memberOf",
};
const PlacementStrategyType = {
    BINPACK: "binpack",
    RANDOM: "random",
    SPREAD: "spread",
};
const PropagateTags = {
    TASK_DEFINITION: "TASK_DEFINITION",
};
class PolicyLengthExceededException extends EventBridgeServiceException {
    name = "PolicyLengthExceededException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "PolicyLengthExceededException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, PolicyLengthExceededException.prototype);
    }
}
const AppSyncParametersFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.GraphQLOperation && { GraphQLOperation: smithyClient.SENSITIVE_STRING }),
});
const CreateConnectionApiKeyAuthRequestParametersFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.ApiKeyValue && { ApiKeyValue: smithyClient.SENSITIVE_STRING }),
});
const CreateConnectionBasicAuthRequestParametersFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Password && { Password: smithyClient.SENSITIVE_STRING }),
});
const ConnectionBodyParameterFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Value && { Value: smithyClient.SENSITIVE_STRING }),
});
const ConnectionHeaderParameterFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Value && { Value: smithyClient.SENSITIVE_STRING }),
});
const ConnectionQueryStringParameterFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Value && { Value: smithyClient.SENSITIVE_STRING }),
});
const ConnectionHttpParametersFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.HeaderParameters && {
        HeaderParameters: obj.HeaderParameters.map((item) => ConnectionHeaderParameterFilterSensitiveLog(item)),
    }),
    ...(obj.QueryStringParameters && {
        QueryStringParameters: obj.QueryStringParameters.map((item) => ConnectionQueryStringParameterFilterSensitiveLog(item)),
    }),
    ...(obj.BodyParameters && {
        BodyParameters: obj.BodyParameters.map((item) => ConnectionBodyParameterFilterSensitiveLog(item)),
    }),
});
const CreateConnectionOAuthClientRequestParametersFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.ClientSecret && { ClientSecret: smithyClient.SENSITIVE_STRING }),
});
const CreateConnectionOAuthRequestParametersFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.ClientParameters && {
        ClientParameters: CreateConnectionOAuthClientRequestParametersFilterSensitiveLog(obj.ClientParameters),
    }),
    ...(obj.OAuthHttpParameters && {
        OAuthHttpParameters: ConnectionHttpParametersFilterSensitiveLog(obj.OAuthHttpParameters),
    }),
});
const CreateConnectionAuthRequestParametersFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.BasicAuthParameters && {
        BasicAuthParameters: CreateConnectionBasicAuthRequestParametersFilterSensitiveLog(obj.BasicAuthParameters),
    }),
    ...(obj.OAuthParameters && {
        OAuthParameters: CreateConnectionOAuthRequestParametersFilterSensitiveLog(obj.OAuthParameters),
    }),
    ...(obj.ApiKeyAuthParameters && {
        ApiKeyAuthParameters: CreateConnectionApiKeyAuthRequestParametersFilterSensitiveLog(obj.ApiKeyAuthParameters),
    }),
    ...(obj.InvocationHttpParameters && {
        InvocationHttpParameters: ConnectionHttpParametersFilterSensitiveLog(obj.InvocationHttpParameters),
    }),
});
const CreateConnectionRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.AuthParameters && {
        AuthParameters: CreateConnectionAuthRequestParametersFilterSensitiveLog(obj.AuthParameters),
    }),
});
const ConnectionOAuthResponseParametersFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.OAuthHttpParameters && {
        OAuthHttpParameters: ConnectionHttpParametersFilterSensitiveLog(obj.OAuthHttpParameters),
    }),
});
const ConnectionAuthResponseParametersFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.OAuthParameters && {
        OAuthParameters: ConnectionOAuthResponseParametersFilterSensitiveLog(obj.OAuthParameters),
    }),
    ...(obj.InvocationHttpParameters && {
        InvocationHttpParameters: ConnectionHttpParametersFilterSensitiveLog(obj.InvocationHttpParameters),
    }),
});
const DescribeConnectionResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.AuthParameters && { AuthParameters: ConnectionAuthResponseParametersFilterSensitiveLog(obj.AuthParameters) }),
});
const RedshiftDataParametersFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Sql && { Sql: smithyClient.SENSITIVE_STRING }),
    ...(obj.Sqls && { Sqls: smithyClient.SENSITIVE_STRING }),
});
const TargetFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.RedshiftDataParameters && {
        RedshiftDataParameters: RedshiftDataParametersFilterSensitiveLog(obj.RedshiftDataParameters),
    }),
    ...(obj.AppSyncParameters && { AppSyncParameters: AppSyncParametersFilterSensitiveLog(obj.AppSyncParameters) }),
});
const ListTargetsByRuleResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Targets && { Targets: obj.Targets.map((item) => TargetFilterSensitiveLog(item)) }),
});
const PutTargetsRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Targets && { Targets: obj.Targets.map((item) => TargetFilterSensitiveLog(item)) }),
});
const UpdateConnectionApiKeyAuthRequestParametersFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.ApiKeyValue && { ApiKeyValue: smithyClient.SENSITIVE_STRING }),
});
const UpdateConnectionBasicAuthRequestParametersFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Password && { Password: smithyClient.SENSITIVE_STRING }),
});
const UpdateConnectionOAuthClientRequestParametersFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.ClientSecret && { ClientSecret: smithyClient.SENSITIVE_STRING }),
});
const UpdateConnectionOAuthRequestParametersFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.ClientParameters && {
        ClientParameters: UpdateConnectionOAuthClientRequestParametersFilterSensitiveLog(obj.ClientParameters),
    }),
    ...(obj.OAuthHttpParameters && {
        OAuthHttpParameters: ConnectionHttpParametersFilterSensitiveLog(obj.OAuthHttpParameters),
    }),
});
const UpdateConnectionAuthRequestParametersFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.BasicAuthParameters && {
        BasicAuthParameters: UpdateConnectionBasicAuthRequestParametersFilterSensitiveLog(obj.BasicAuthParameters),
    }),
    ...(obj.OAuthParameters && {
        OAuthParameters: UpdateConnectionOAuthRequestParametersFilterSensitiveLog(obj.OAuthParameters),
    }),
    ...(obj.ApiKeyAuthParameters && {
        ApiKeyAuthParameters: UpdateConnectionApiKeyAuthRequestParametersFilterSensitiveLog(obj.ApiKeyAuthParameters),
    }),
    ...(obj.InvocationHttpParameters && {
        InvocationHttpParameters: ConnectionHttpParametersFilterSensitiveLog(obj.InvocationHttpParameters),
    }),
});
const UpdateConnectionRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.AuthParameters && {
        AuthParameters: UpdateConnectionAuthRequestParametersFilterSensitiveLog(obj.AuthParameters),
    }),
});

const se_ActivateEventSourceCommand = async (input, context) => {
    const headers = sharedHeaders("ActivateEventSource");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_CancelReplayCommand = async (input, context) => {
    const headers = sharedHeaders("CancelReplay");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_CreateApiDestinationCommand = async (input, context) => {
    const headers = sharedHeaders("CreateApiDestination");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_CreateArchiveCommand = async (input, context) => {
    const headers = sharedHeaders("CreateArchive");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_CreateConnectionCommand = async (input, context) => {
    const headers = sharedHeaders("CreateConnection");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_CreateEndpointCommand = async (input, context) => {
    const headers = sharedHeaders("CreateEndpoint");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_CreateEventBusCommand = async (input, context) => {
    const headers = sharedHeaders("CreateEventBus");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_CreatePartnerEventSourceCommand = async (input, context) => {
    const headers = sharedHeaders("CreatePartnerEventSource");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeactivateEventSourceCommand = async (input, context) => {
    const headers = sharedHeaders("DeactivateEventSource");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeauthorizeConnectionCommand = async (input, context) => {
    const headers = sharedHeaders("DeauthorizeConnection");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeleteApiDestinationCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteApiDestination");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeleteArchiveCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteArchive");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeleteConnectionCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteConnection");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeleteEndpointCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteEndpoint");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeleteEventBusCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteEventBus");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeletePartnerEventSourceCommand = async (input, context) => {
    const headers = sharedHeaders("DeletePartnerEventSource");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeleteRuleCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteRule");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeApiDestinationCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeApiDestination");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeArchiveCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeArchive");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeConnectionCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeConnection");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeEndpointCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeEndpoint");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeEventBusCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeEventBus");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeEventSourceCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeEventSource");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribePartnerEventSourceCommand = async (input, context) => {
    const headers = sharedHeaders("DescribePartnerEventSource");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeReplayCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeReplay");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeRuleCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeRule");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DisableRuleCommand = async (input, context) => {
    const headers = sharedHeaders("DisableRule");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_EnableRuleCommand = async (input, context) => {
    const headers = sharedHeaders("EnableRule");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ListApiDestinationsCommand = async (input, context) => {
    const headers = sharedHeaders("ListApiDestinations");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ListArchivesCommand = async (input, context) => {
    const headers = sharedHeaders("ListArchives");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ListConnectionsCommand = async (input, context) => {
    const headers = sharedHeaders("ListConnections");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ListEndpointsCommand = async (input, context) => {
    const headers = sharedHeaders("ListEndpoints");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ListEventBusesCommand = async (input, context) => {
    const headers = sharedHeaders("ListEventBuses");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ListEventSourcesCommand = async (input, context) => {
    const headers = sharedHeaders("ListEventSources");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ListPartnerEventSourceAccountsCommand = async (input, context) => {
    const headers = sharedHeaders("ListPartnerEventSourceAccounts");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ListPartnerEventSourcesCommand = async (input, context) => {
    const headers = sharedHeaders("ListPartnerEventSources");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ListReplaysCommand = async (input, context) => {
    const headers = sharedHeaders("ListReplays");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ListRuleNamesByTargetCommand = async (input, context) => {
    const headers = sharedHeaders("ListRuleNamesByTarget");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ListRulesCommand = async (input, context) => {
    const headers = sharedHeaders("ListRules");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ListTagsForResourceCommand = async (input, context) => {
    const headers = sharedHeaders("ListTagsForResource");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ListTargetsByRuleCommand = async (input, context) => {
    const headers = sharedHeaders("ListTargetsByRule");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_PutEventsCommand = async (input, context) => {
    const headers = sharedHeaders("PutEvents");
    let body;
    body = JSON.stringify(se_PutEventsRequest(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_PutPartnerEventsCommand = async (input, context) => {
    const headers = sharedHeaders("PutPartnerEvents");
    let body;
    body = JSON.stringify(se_PutPartnerEventsRequest(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_PutPermissionCommand = async (input, context) => {
    const headers = sharedHeaders("PutPermission");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_PutRuleCommand = async (input, context) => {
    const headers = sharedHeaders("PutRule");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_PutTargetsCommand = async (input, context) => {
    const headers = sharedHeaders("PutTargets");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_RemovePermissionCommand = async (input, context) => {
    const headers = sharedHeaders("RemovePermission");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_RemoveTargetsCommand = async (input, context) => {
    const headers = sharedHeaders("RemoveTargets");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_StartReplayCommand = async (input, context) => {
    const headers = sharedHeaders("StartReplay");
    let body;
    body = JSON.stringify(se_StartReplayRequest(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_TagResourceCommand = async (input, context) => {
    const headers = sharedHeaders("TagResource");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_TestEventPatternCommand = async (input, context) => {
    const headers = sharedHeaders("TestEventPattern");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_UntagResourceCommand = async (input, context) => {
    const headers = sharedHeaders("UntagResource");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_UpdateApiDestinationCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateApiDestination");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_UpdateArchiveCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateArchive");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_UpdateConnectionCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateConnection");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_UpdateEndpointCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateEndpoint");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_UpdateEventBusCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateEventBus");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const de_ActivateEventSourceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await smithyClient.collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_CancelReplayCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateApiDestinationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_CreateApiDestinationResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateArchiveCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_CreateArchiveResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateConnectionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_CreateConnectionResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateEndpointCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateEventBusCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreatePartnerEventSourceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DeactivateEventSourceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await smithyClient.collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_DeauthorizeConnectionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_DeauthorizeConnectionResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DeleteApiDestinationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DeleteArchiveCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DeleteConnectionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_DeleteConnectionResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DeleteEndpointCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DeleteEventBusCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await smithyClient.collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_DeletePartnerEventSourceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await smithyClient.collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_DeleteRuleCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await smithyClient.collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_DescribeApiDestinationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_DescribeApiDestinationResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeArchiveCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_DescribeArchiveResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeConnectionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_DescribeConnectionResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeEndpointCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_DescribeEndpointResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeEventBusCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_DescribeEventBusResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeEventSourceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_DescribeEventSourceResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribePartnerEventSourceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeReplayCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_DescribeReplayResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeRuleCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DisableRuleCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await smithyClient.collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_EnableRuleCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await smithyClient.collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_ListApiDestinationsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_ListApiDestinationsResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListArchivesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_ListArchivesResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListConnectionsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_ListConnectionsResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListEndpointsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_ListEndpointsResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListEventBusesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_ListEventBusesResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListEventSourcesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_ListEventSourcesResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListPartnerEventSourceAccountsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_ListPartnerEventSourceAccountsResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListPartnerEventSourcesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListReplaysCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_ListReplaysResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListRuleNamesByTargetCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListRulesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListTagsForResourceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListTargetsByRuleCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_PutEventsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_PutPartnerEventsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_PutPermissionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await smithyClient.collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_PutRuleCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_PutTargetsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_RemovePermissionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await smithyClient.collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_RemoveTargetsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_StartReplayCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_StartReplayResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_TagResourceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_TestEventPatternCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_UntagResourceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_UpdateApiDestinationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_UpdateApiDestinationResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_UpdateArchiveCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_UpdateArchiveResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_UpdateConnectionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_UpdateConnectionResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_UpdateEndpointCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_UpdateEventBusCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await core$1.parseJsonErrorBody(output.body, context),
    };
    const errorCode = core$1.loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ConcurrentModificationException":
        case "com.amazonaws.eventbridge#ConcurrentModificationException":
            throw await de_ConcurrentModificationExceptionRes(parsedOutput);
        case "InternalException":
        case "com.amazonaws.eventbridge#InternalException":
            throw await de_InternalExceptionRes(parsedOutput);
        case "InvalidStateException":
        case "com.amazonaws.eventbridge#InvalidStateException":
            throw await de_InvalidStateExceptionRes(parsedOutput);
        case "OperationDisabledException":
        case "com.amazonaws.eventbridge#OperationDisabledException":
            throw await de_OperationDisabledExceptionRes(parsedOutput);
        case "ResourceNotFoundException":
        case "com.amazonaws.eventbridge#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput);
        case "IllegalStatusException":
        case "com.amazonaws.eventbridge#IllegalStatusException":
            throw await de_IllegalStatusExceptionRes(parsedOutput);
        case "LimitExceededException":
        case "com.amazonaws.eventbridge#LimitExceededException":
            throw await de_LimitExceededExceptionRes(parsedOutput);
        case "ResourceAlreadyExistsException":
        case "com.amazonaws.eventbridge#ResourceAlreadyExistsException":
            throw await de_ResourceAlreadyExistsExceptionRes(parsedOutput);
        case "InvalidEventPatternException":
        case "com.amazonaws.eventbridge#InvalidEventPatternException":
            throw await de_InvalidEventPatternExceptionRes(parsedOutput);
        case "AccessDeniedException":
        case "com.amazonaws.eventbridge#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput);
        case "ThrottlingException":
        case "com.amazonaws.eventbridge#ThrottlingException":
            throw await de_ThrottlingExceptionRes(parsedOutput);
        case "ManagedRuleException":
        case "com.amazonaws.eventbridge#ManagedRuleException":
            throw await de_ManagedRuleExceptionRes(parsedOutput);
        case "PolicyLengthExceededException":
        case "com.amazonaws.eventbridge#PolicyLengthExceededException":
            throw await de_PolicyLengthExceededExceptionRes(parsedOutput);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_AccessDeniedExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new AccessDeniedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_ConcurrentModificationExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new ConcurrentModificationException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_IllegalStatusExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new IllegalStatusException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_InternalExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new InternalException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_InvalidEventPatternExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new InvalidEventPatternException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_InvalidStateExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new InvalidStateException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_LimitExceededExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new LimitExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_ManagedRuleExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new ManagedRuleException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_OperationDisabledExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new OperationDisabledException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_PolicyLengthExceededExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new PolicyLengthExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_ResourceAlreadyExistsExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new ResourceAlreadyExistsException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_ResourceNotFoundExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new ResourceNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_ThrottlingExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new ThrottlingException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const se_PutEventsRequest = (input, context) => {
    return smithyClient.take(input, {
        EndpointId: [],
        Entries: (_) => se_PutEventsRequestEntryList(_),
    });
};
const se_PutEventsRequestEntry = (input, context) => {
    return smithyClient.take(input, {
        Detail: [],
        DetailType: [],
        EventBusName: [],
        Resources: smithyClient._json,
        Source: [],
        Time: (_) => _.getTime() / 1_000,
        TraceHeader: [],
    });
};
const se_PutEventsRequestEntryList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_PutEventsRequestEntry(entry);
    });
};
const se_PutPartnerEventsRequest = (input, context) => {
    return smithyClient.take(input, {
        Entries: (_) => se_PutPartnerEventsRequestEntryList(_),
    });
};
const se_PutPartnerEventsRequestEntry = (input, context) => {
    return smithyClient.take(input, {
        Detail: [],
        DetailType: [],
        Resources: smithyClient._json,
        Source: [],
        Time: (_) => _.getTime() / 1_000,
    });
};
const se_PutPartnerEventsRequestEntryList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_PutPartnerEventsRequestEntry(entry);
    });
};
const se_StartReplayRequest = (input, context) => {
    return smithyClient.take(input, {
        Description: [],
        Destination: smithyClient._json,
        EventEndTime: (_) => _.getTime() / 1_000,
        EventSourceArn: [],
        EventStartTime: (_) => _.getTime() / 1_000,
        ReplayName: [],
    });
};
const de_ApiDestination = (output, context) => {
    return smithyClient.take(output, {
        ApiDestinationArn: smithyClient.expectString,
        ApiDestinationState: smithyClient.expectString,
        ConnectionArn: smithyClient.expectString,
        CreationTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        HttpMethod: smithyClient.expectString,
        InvocationEndpoint: smithyClient.expectString,
        InvocationRateLimitPerSecond: smithyClient.expectInt32,
        LastModifiedTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        Name: smithyClient.expectString,
    });
};
const de_ApiDestinationResponseList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ApiDestination(entry);
    });
    return retVal;
};
const de_Archive = (output, context) => {
    return smithyClient.take(output, {
        ArchiveName: smithyClient.expectString,
        CreationTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        EventCount: smithyClient.expectLong,
        EventSourceArn: smithyClient.expectString,
        RetentionDays: smithyClient.expectInt32,
        SizeBytes: smithyClient.expectLong,
        State: smithyClient.expectString,
        StateReason: smithyClient.expectString,
    });
};
const de_ArchiveResponseList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Archive(entry);
    });
    return retVal;
};
const de_Connection = (output, context) => {
    return smithyClient.take(output, {
        AuthorizationType: smithyClient.expectString,
        ConnectionArn: smithyClient.expectString,
        ConnectionState: smithyClient.expectString,
        CreationTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        LastAuthorizedTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        LastModifiedTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        Name: smithyClient.expectString,
        StateReason: smithyClient.expectString,
    });
};
const de_ConnectionResponseList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Connection(entry);
    });
    return retVal;
};
const de_CreateApiDestinationResponse = (output, context) => {
    return smithyClient.take(output, {
        ApiDestinationArn: smithyClient.expectString,
        ApiDestinationState: smithyClient.expectString,
        CreationTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        LastModifiedTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
    });
};
const de_CreateArchiveResponse = (output, context) => {
    return smithyClient.take(output, {
        ArchiveArn: smithyClient.expectString,
        CreationTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        State: smithyClient.expectString,
        StateReason: smithyClient.expectString,
    });
};
const de_CreateConnectionResponse = (output, context) => {
    return smithyClient.take(output, {
        ConnectionArn: smithyClient.expectString,
        ConnectionState: smithyClient.expectString,
        CreationTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        LastModifiedTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
    });
};
const de_DeauthorizeConnectionResponse = (output, context) => {
    return smithyClient.take(output, {
        ConnectionArn: smithyClient.expectString,
        ConnectionState: smithyClient.expectString,
        CreationTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        LastAuthorizedTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        LastModifiedTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
    });
};
const de_DeleteConnectionResponse = (output, context) => {
    return smithyClient.take(output, {
        ConnectionArn: smithyClient.expectString,
        ConnectionState: smithyClient.expectString,
        CreationTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        LastAuthorizedTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        LastModifiedTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
    });
};
const de_DescribeApiDestinationResponse = (output, context) => {
    return smithyClient.take(output, {
        ApiDestinationArn: smithyClient.expectString,
        ApiDestinationState: smithyClient.expectString,
        ConnectionArn: smithyClient.expectString,
        CreationTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        Description: smithyClient.expectString,
        HttpMethod: smithyClient.expectString,
        InvocationEndpoint: smithyClient.expectString,
        InvocationRateLimitPerSecond: smithyClient.expectInt32,
        LastModifiedTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        Name: smithyClient.expectString,
    });
};
const de_DescribeArchiveResponse = (output, context) => {
    return smithyClient.take(output, {
        ArchiveArn: smithyClient.expectString,
        ArchiveName: smithyClient.expectString,
        CreationTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        Description: smithyClient.expectString,
        EventCount: smithyClient.expectLong,
        EventPattern: smithyClient.expectString,
        EventSourceArn: smithyClient.expectString,
        KmsKeyIdentifier: smithyClient.expectString,
        RetentionDays: smithyClient.expectInt32,
        SizeBytes: smithyClient.expectLong,
        State: smithyClient.expectString,
        StateReason: smithyClient.expectString,
    });
};
const de_DescribeConnectionResponse = (output, context) => {
    return smithyClient.take(output, {
        AuthParameters: smithyClient._json,
        AuthorizationType: smithyClient.expectString,
        ConnectionArn: smithyClient.expectString,
        ConnectionState: smithyClient.expectString,
        CreationTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        Description: smithyClient.expectString,
        InvocationConnectivityParameters: smithyClient._json,
        KmsKeyIdentifier: smithyClient.expectString,
        LastAuthorizedTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        LastModifiedTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        Name: smithyClient.expectString,
        SecretArn: smithyClient.expectString,
        StateReason: smithyClient.expectString,
    });
};
const de_DescribeEndpointResponse = (output, context) => {
    return smithyClient.take(output, {
        Arn: smithyClient.expectString,
        CreationTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        Description: smithyClient.expectString,
        EndpointId: smithyClient.expectString,
        EndpointUrl: smithyClient.expectString,
        EventBuses: smithyClient._json,
        LastModifiedTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        Name: smithyClient.expectString,
        ReplicationConfig: smithyClient._json,
        RoleArn: smithyClient.expectString,
        RoutingConfig: smithyClient._json,
        State: smithyClient.expectString,
        StateReason: smithyClient.expectString,
    });
};
const de_DescribeEventBusResponse = (output, context) => {
    return smithyClient.take(output, {
        Arn: smithyClient.expectString,
        CreationTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        DeadLetterConfig: smithyClient._json,
        Description: smithyClient.expectString,
        KmsKeyIdentifier: smithyClient.expectString,
        LastModifiedTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        LogConfig: smithyClient._json,
        Name: smithyClient.expectString,
        Policy: smithyClient.expectString,
    });
};
const de_DescribeEventSourceResponse = (output, context) => {
    return smithyClient.take(output, {
        Arn: smithyClient.expectString,
        CreatedBy: smithyClient.expectString,
        CreationTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        ExpirationTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        Name: smithyClient.expectString,
        State: smithyClient.expectString,
    });
};
const de_DescribeReplayResponse = (output, context) => {
    return smithyClient.take(output, {
        Description: smithyClient.expectString,
        Destination: smithyClient._json,
        EventEndTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        EventLastReplayedTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        EventSourceArn: smithyClient.expectString,
        EventStartTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        ReplayArn: smithyClient.expectString,
        ReplayEndTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        ReplayName: smithyClient.expectString,
        ReplayStartTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        State: smithyClient.expectString,
        StateReason: smithyClient.expectString,
    });
};
const de_Endpoint = (output, context) => {
    return smithyClient.take(output, {
        Arn: smithyClient.expectString,
        CreationTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        Description: smithyClient.expectString,
        EndpointId: smithyClient.expectString,
        EndpointUrl: smithyClient.expectString,
        EventBuses: smithyClient._json,
        LastModifiedTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        Name: smithyClient.expectString,
        ReplicationConfig: smithyClient._json,
        RoleArn: smithyClient.expectString,
        RoutingConfig: smithyClient._json,
        State: smithyClient.expectString,
        StateReason: smithyClient.expectString,
    });
};
const de_EndpointList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Endpoint(entry);
    });
    return retVal;
};
const de_EventBus = (output, context) => {
    return smithyClient.take(output, {
        Arn: smithyClient.expectString,
        CreationTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        Description: smithyClient.expectString,
        LastModifiedTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        Name: smithyClient.expectString,
        Policy: smithyClient.expectString,
    });
};
const de_EventBusList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_EventBus(entry);
    });
    return retVal;
};
const de_EventSource = (output, context) => {
    return smithyClient.take(output, {
        Arn: smithyClient.expectString,
        CreatedBy: smithyClient.expectString,
        CreationTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        ExpirationTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        Name: smithyClient.expectString,
        State: smithyClient.expectString,
    });
};
const de_EventSourceList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_EventSource(entry);
    });
    return retVal;
};
const de_ListApiDestinationsResponse = (output, context) => {
    return smithyClient.take(output, {
        ApiDestinations: (_) => de_ApiDestinationResponseList(_),
        NextToken: smithyClient.expectString,
    });
};
const de_ListArchivesResponse = (output, context) => {
    return smithyClient.take(output, {
        Archives: (_) => de_ArchiveResponseList(_),
        NextToken: smithyClient.expectString,
    });
};
const de_ListConnectionsResponse = (output, context) => {
    return smithyClient.take(output, {
        Connections: (_) => de_ConnectionResponseList(_),
        NextToken: smithyClient.expectString,
    });
};
const de_ListEndpointsResponse = (output, context) => {
    return smithyClient.take(output, {
        Endpoints: (_) => de_EndpointList(_),
        NextToken: smithyClient.expectString,
    });
};
const de_ListEventBusesResponse = (output, context) => {
    return smithyClient.take(output, {
        EventBuses: (_) => de_EventBusList(_),
        NextToken: smithyClient.expectString,
    });
};
const de_ListEventSourcesResponse = (output, context) => {
    return smithyClient.take(output, {
        EventSources: (_) => de_EventSourceList(_),
        NextToken: smithyClient.expectString,
    });
};
const de_ListPartnerEventSourceAccountsResponse = (output, context) => {
    return smithyClient.take(output, {
        NextToken: smithyClient.expectString,
        PartnerEventSourceAccounts: (_) => de_PartnerEventSourceAccountList(_),
    });
};
const de_ListReplaysResponse = (output, context) => {
    return smithyClient.take(output, {
        NextToken: smithyClient.expectString,
        Replays: (_) => de_ReplayList(_),
    });
};
const de_PartnerEventSourceAccount = (output, context) => {
    return smithyClient.take(output, {
        Account: smithyClient.expectString,
        CreationTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        ExpirationTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        State: smithyClient.expectString,
    });
};
const de_PartnerEventSourceAccountList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_PartnerEventSourceAccount(entry);
    });
    return retVal;
};
const de_Replay = (output, context) => {
    return smithyClient.take(output, {
        EventEndTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        EventLastReplayedTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        EventSourceArn: smithyClient.expectString,
        EventStartTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        ReplayEndTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        ReplayName: smithyClient.expectString,
        ReplayStartTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        State: smithyClient.expectString,
        StateReason: smithyClient.expectString,
    });
};
const de_ReplayList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Replay(entry);
    });
    return retVal;
};
const de_StartReplayResponse = (output, context) => {
    return smithyClient.take(output, {
        ReplayArn: smithyClient.expectString,
        ReplayStartTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        State: smithyClient.expectString,
        StateReason: smithyClient.expectString,
    });
};
const de_UpdateApiDestinationResponse = (output, context) => {
    return smithyClient.take(output, {
        ApiDestinationArn: smithyClient.expectString,
        ApiDestinationState: smithyClient.expectString,
        CreationTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        LastModifiedTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
    });
};
const de_UpdateArchiveResponse = (output, context) => {
    return smithyClient.take(output, {
        ArchiveArn: smithyClient.expectString,
        CreationTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        State: smithyClient.expectString,
        StateReason: smithyClient.expectString,
    });
};
const de_UpdateConnectionResponse = (output, context) => {
    return smithyClient.take(output, {
        ConnectionArn: smithyClient.expectString,
        ConnectionState: smithyClient.expectString,
        CreationTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        LastAuthorizedTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        LastModifiedTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
    });
};
const deserializeMetadata = (output) => ({
    httpStatusCode: output.statusCode,
    requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
    extendedRequestId: output.headers["x-amz-id-2"],
    cfId: output.headers["x-amz-cf-id"],
});
const throwDefaultError = smithyClient.withBaseException(EventBridgeServiceException);
const buildHttpRpcRequest = async (context, headers, path, resolvedHostname, body) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const contents = {
        protocol,
        hostname,
        port,
        method: "POST",
        path: basePath.endsWith("/") ? basePath.slice(0, -1) + path : basePath + path,
        headers,
    };
    if (body !== undefined) {
        contents.body = body;
    }
    return new protocolHttp.HttpRequest(contents);
};
function sharedHeaders(operation) {
    return {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": `AWSEvents.${operation}`,
    };
}

class ActivateEventSourceCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSEvents", "ActivateEventSource", {})
    .n("EventBridgeClient", "ActivateEventSourceCommand")
    .f(void 0, void 0)
    .ser(se_ActivateEventSourceCommand)
    .de(de_ActivateEventSourceCommand)
    .build() {
}

class CancelReplayCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSEvents", "CancelReplay", {})
    .n("EventBridgeClient", "CancelReplayCommand")
    .f(void 0, void 0)
    .ser(se_CancelReplayCommand)
    .de(de_CancelReplayCommand)
    .build() {
}

class CreateApiDestinationCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSEvents", "CreateApiDestination", {})
    .n("EventBridgeClient", "CreateApiDestinationCommand")
    .f(void 0, void 0)
    .ser(se_CreateApiDestinationCommand)
    .de(de_CreateApiDestinationCommand)
    .build() {
}

class CreateArchiveCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSEvents", "CreateArchive", {})
    .n("EventBridgeClient", "CreateArchiveCommand")
    .f(void 0, void 0)
    .ser(se_CreateArchiveCommand)
    .de(de_CreateArchiveCommand)
    .build() {
}

class CreateConnectionCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSEvents", "CreateConnection", {})
    .n("EventBridgeClient", "CreateConnectionCommand")
    .f(CreateConnectionRequestFilterSensitiveLog, void 0)
    .ser(se_CreateConnectionCommand)
    .de(de_CreateConnectionCommand)
    .build() {
}

class CreateEndpointCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSEvents", "CreateEndpoint", {})
    .n("EventBridgeClient", "CreateEndpointCommand")
    .f(void 0, void 0)
    .ser(se_CreateEndpointCommand)
    .de(de_CreateEndpointCommand)
    .build() {
}

class CreateEventBusCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSEvents", "CreateEventBus", {})
    .n("EventBridgeClient", "CreateEventBusCommand")
    .f(void 0, void 0)
    .ser(se_CreateEventBusCommand)
    .de(de_CreateEventBusCommand)
    .build() {
}

class CreatePartnerEventSourceCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSEvents", "CreatePartnerEventSource", {})
    .n("EventBridgeClient", "CreatePartnerEventSourceCommand")
    .f(void 0, void 0)
    .ser(se_CreatePartnerEventSourceCommand)
    .de(de_CreatePartnerEventSourceCommand)
    .build() {
}

class DeactivateEventSourceCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSEvents", "DeactivateEventSource", {})
    .n("EventBridgeClient", "DeactivateEventSourceCommand")
    .f(void 0, void 0)
    .ser(se_DeactivateEventSourceCommand)
    .de(de_DeactivateEventSourceCommand)
    .build() {
}

class DeauthorizeConnectionCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSEvents", "DeauthorizeConnection", {})
    .n("EventBridgeClient", "DeauthorizeConnectionCommand")
    .f(void 0, void 0)
    .ser(se_DeauthorizeConnectionCommand)
    .de(de_DeauthorizeConnectionCommand)
    .build() {
}

class DeleteApiDestinationCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSEvents", "DeleteApiDestination", {})
    .n("EventBridgeClient", "DeleteApiDestinationCommand")
    .f(void 0, void 0)
    .ser(se_DeleteApiDestinationCommand)
    .de(de_DeleteApiDestinationCommand)
    .build() {
}

class DeleteArchiveCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSEvents", "DeleteArchive", {})
    .n("EventBridgeClient", "DeleteArchiveCommand")
    .f(void 0, void 0)
    .ser(se_DeleteArchiveCommand)
    .de(de_DeleteArchiveCommand)
    .build() {
}

class DeleteConnectionCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSEvents", "DeleteConnection", {})
    .n("EventBridgeClient", "DeleteConnectionCommand")
    .f(void 0, void 0)
    .ser(se_DeleteConnectionCommand)
    .de(de_DeleteConnectionCommand)
    .build() {
}

class DeleteEndpointCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSEvents", "DeleteEndpoint", {})
    .n("EventBridgeClient", "DeleteEndpointCommand")
    .f(void 0, void 0)
    .ser(se_DeleteEndpointCommand)
    .de(de_DeleteEndpointCommand)
    .build() {
}

class DeleteEventBusCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSEvents", "DeleteEventBus", {})
    .n("EventBridgeClient", "DeleteEventBusCommand")
    .f(void 0, void 0)
    .ser(se_DeleteEventBusCommand)
    .de(de_DeleteEventBusCommand)
    .build() {
}

class DeletePartnerEventSourceCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSEvents", "DeletePartnerEventSource", {})
    .n("EventBridgeClient", "DeletePartnerEventSourceCommand")
    .f(void 0, void 0)
    .ser(se_DeletePartnerEventSourceCommand)
    .de(de_DeletePartnerEventSourceCommand)
    .build() {
}

class DeleteRuleCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSEvents", "DeleteRule", {})
    .n("EventBridgeClient", "DeleteRuleCommand")
    .f(void 0, void 0)
    .ser(se_DeleteRuleCommand)
    .de(de_DeleteRuleCommand)
    .build() {
}

class DescribeApiDestinationCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSEvents", "DescribeApiDestination", {})
    .n("EventBridgeClient", "DescribeApiDestinationCommand")
    .f(void 0, void 0)
    .ser(se_DescribeApiDestinationCommand)
    .de(de_DescribeApiDestinationCommand)
    .build() {
}

class DescribeArchiveCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSEvents", "DescribeArchive", {})
    .n("EventBridgeClient", "DescribeArchiveCommand")
    .f(void 0, void 0)
    .ser(se_DescribeArchiveCommand)
    .de(de_DescribeArchiveCommand)
    .build() {
}

class DescribeConnectionCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSEvents", "DescribeConnection", {})
    .n("EventBridgeClient", "DescribeConnectionCommand")
    .f(void 0, DescribeConnectionResponseFilterSensitiveLog)
    .ser(se_DescribeConnectionCommand)
    .de(de_DescribeConnectionCommand)
    .build() {
}

class DescribeEndpointCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSEvents", "DescribeEndpoint", {})
    .n("EventBridgeClient", "DescribeEndpointCommand")
    .f(void 0, void 0)
    .ser(se_DescribeEndpointCommand)
    .de(de_DescribeEndpointCommand)
    .build() {
}

class DescribeEventBusCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSEvents", "DescribeEventBus", {})
    .n("EventBridgeClient", "DescribeEventBusCommand")
    .f(void 0, void 0)
    .ser(se_DescribeEventBusCommand)
    .de(de_DescribeEventBusCommand)
    .build() {
}

class DescribeEventSourceCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSEvents", "DescribeEventSource", {})
    .n("EventBridgeClient", "DescribeEventSourceCommand")
    .f(void 0, void 0)
    .ser(se_DescribeEventSourceCommand)
    .de(de_DescribeEventSourceCommand)
    .build() {
}

class DescribePartnerEventSourceCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSEvents", "DescribePartnerEventSource", {})
    .n("EventBridgeClient", "DescribePartnerEventSourceCommand")
    .f(void 0, void 0)
    .ser(se_DescribePartnerEventSourceCommand)
    .de(de_DescribePartnerEventSourceCommand)
    .build() {
}

class DescribeReplayCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSEvents", "DescribeReplay", {})
    .n("EventBridgeClient", "DescribeReplayCommand")
    .f(void 0, void 0)
    .ser(se_DescribeReplayCommand)
    .de(de_DescribeReplayCommand)
    .build() {
}

class DescribeRuleCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSEvents", "DescribeRule", {})
    .n("EventBridgeClient", "DescribeRuleCommand")
    .f(void 0, void 0)
    .ser(se_DescribeRuleCommand)
    .de(de_DescribeRuleCommand)
    .build() {
}

class DisableRuleCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSEvents", "DisableRule", {})
    .n("EventBridgeClient", "DisableRuleCommand")
    .f(void 0, void 0)
    .ser(se_DisableRuleCommand)
    .de(de_DisableRuleCommand)
    .build() {
}

class EnableRuleCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSEvents", "EnableRule", {})
    .n("EventBridgeClient", "EnableRuleCommand")
    .f(void 0, void 0)
    .ser(se_EnableRuleCommand)
    .de(de_EnableRuleCommand)
    .build() {
}

class ListApiDestinationsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSEvents", "ListApiDestinations", {})
    .n("EventBridgeClient", "ListApiDestinationsCommand")
    .f(void 0, void 0)
    .ser(se_ListApiDestinationsCommand)
    .de(de_ListApiDestinationsCommand)
    .build() {
}

class ListArchivesCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSEvents", "ListArchives", {})
    .n("EventBridgeClient", "ListArchivesCommand")
    .f(void 0, void 0)
    .ser(se_ListArchivesCommand)
    .de(de_ListArchivesCommand)
    .build() {
}

class ListConnectionsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSEvents", "ListConnections", {})
    .n("EventBridgeClient", "ListConnectionsCommand")
    .f(void 0, void 0)
    .ser(se_ListConnectionsCommand)
    .de(de_ListConnectionsCommand)
    .build() {
}

class ListEndpointsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSEvents", "ListEndpoints", {})
    .n("EventBridgeClient", "ListEndpointsCommand")
    .f(void 0, void 0)
    .ser(se_ListEndpointsCommand)
    .de(de_ListEndpointsCommand)
    .build() {
}

class ListEventBusesCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSEvents", "ListEventBuses", {})
    .n("EventBridgeClient", "ListEventBusesCommand")
    .f(void 0, void 0)
    .ser(se_ListEventBusesCommand)
    .de(de_ListEventBusesCommand)
    .build() {
}

class ListEventSourcesCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSEvents", "ListEventSources", {})
    .n("EventBridgeClient", "ListEventSourcesCommand")
    .f(void 0, void 0)
    .ser(se_ListEventSourcesCommand)
    .de(de_ListEventSourcesCommand)
    .build() {
}

class ListPartnerEventSourceAccountsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSEvents", "ListPartnerEventSourceAccounts", {})
    .n("EventBridgeClient", "ListPartnerEventSourceAccountsCommand")
    .f(void 0, void 0)
    .ser(se_ListPartnerEventSourceAccountsCommand)
    .de(de_ListPartnerEventSourceAccountsCommand)
    .build() {
}

class ListPartnerEventSourcesCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSEvents", "ListPartnerEventSources", {})
    .n("EventBridgeClient", "ListPartnerEventSourcesCommand")
    .f(void 0, void 0)
    .ser(se_ListPartnerEventSourcesCommand)
    .de(de_ListPartnerEventSourcesCommand)
    .build() {
}

class ListReplaysCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSEvents", "ListReplays", {})
    .n("EventBridgeClient", "ListReplaysCommand")
    .f(void 0, void 0)
    .ser(se_ListReplaysCommand)
    .de(de_ListReplaysCommand)
    .build() {
}

class ListRuleNamesByTargetCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSEvents", "ListRuleNamesByTarget", {})
    .n("EventBridgeClient", "ListRuleNamesByTargetCommand")
    .f(void 0, void 0)
    .ser(se_ListRuleNamesByTargetCommand)
    .de(de_ListRuleNamesByTargetCommand)
    .build() {
}

class ListRulesCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSEvents", "ListRules", {})
    .n("EventBridgeClient", "ListRulesCommand")
    .f(void 0, void 0)
    .ser(se_ListRulesCommand)
    .de(de_ListRulesCommand)
    .build() {
}

class ListTagsForResourceCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSEvents", "ListTagsForResource", {})
    .n("EventBridgeClient", "ListTagsForResourceCommand")
    .f(void 0, void 0)
    .ser(se_ListTagsForResourceCommand)
    .de(de_ListTagsForResourceCommand)
    .build() {
}

class ListTargetsByRuleCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSEvents", "ListTargetsByRule", {})
    .n("EventBridgeClient", "ListTargetsByRuleCommand")
    .f(void 0, ListTargetsByRuleResponseFilterSensitiveLog)
    .ser(se_ListTargetsByRuleCommand)
    .de(de_ListTargetsByRuleCommand)
    .build() {
}

class PutEventsCommand extends smithyClient.Command
    .classBuilder()
    .ep({
    ...commonParams,
    EndpointId: { type: "contextParams", name: "EndpointId" },
})
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSEvents", "PutEvents", {})
    .n("EventBridgeClient", "PutEventsCommand")
    .f(void 0, void 0)
    .ser(se_PutEventsCommand)
    .de(de_PutEventsCommand)
    .build() {
}

class PutPartnerEventsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSEvents", "PutPartnerEvents", {})
    .n("EventBridgeClient", "PutPartnerEventsCommand")
    .f(void 0, void 0)
    .ser(se_PutPartnerEventsCommand)
    .de(de_PutPartnerEventsCommand)
    .build() {
}

class PutPermissionCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSEvents", "PutPermission", {})
    .n("EventBridgeClient", "PutPermissionCommand")
    .f(void 0, void 0)
    .ser(se_PutPermissionCommand)
    .de(de_PutPermissionCommand)
    .build() {
}

class PutRuleCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSEvents", "PutRule", {})
    .n("EventBridgeClient", "PutRuleCommand")
    .f(void 0, void 0)
    .ser(se_PutRuleCommand)
    .de(de_PutRuleCommand)
    .build() {
}

class PutTargetsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSEvents", "PutTargets", {})
    .n("EventBridgeClient", "PutTargetsCommand")
    .f(PutTargetsRequestFilterSensitiveLog, void 0)
    .ser(se_PutTargetsCommand)
    .de(de_PutTargetsCommand)
    .build() {
}

class RemovePermissionCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSEvents", "RemovePermission", {})
    .n("EventBridgeClient", "RemovePermissionCommand")
    .f(void 0, void 0)
    .ser(se_RemovePermissionCommand)
    .de(de_RemovePermissionCommand)
    .build() {
}

class RemoveTargetsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSEvents", "RemoveTargets", {})
    .n("EventBridgeClient", "RemoveTargetsCommand")
    .f(void 0, void 0)
    .ser(se_RemoveTargetsCommand)
    .de(de_RemoveTargetsCommand)
    .build() {
}

class StartReplayCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSEvents", "StartReplay", {})
    .n("EventBridgeClient", "StartReplayCommand")
    .f(void 0, void 0)
    .ser(se_StartReplayCommand)
    .de(de_StartReplayCommand)
    .build() {
}

class TagResourceCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSEvents", "TagResource", {})
    .n("EventBridgeClient", "TagResourceCommand")
    .f(void 0, void 0)
    .ser(se_TagResourceCommand)
    .de(de_TagResourceCommand)
    .build() {
}

class TestEventPatternCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSEvents", "TestEventPattern", {})
    .n("EventBridgeClient", "TestEventPatternCommand")
    .f(void 0, void 0)
    .ser(se_TestEventPatternCommand)
    .de(de_TestEventPatternCommand)
    .build() {
}

class UntagResourceCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSEvents", "UntagResource", {})
    .n("EventBridgeClient", "UntagResourceCommand")
    .f(void 0, void 0)
    .ser(se_UntagResourceCommand)
    .de(de_UntagResourceCommand)
    .build() {
}

class UpdateApiDestinationCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSEvents", "UpdateApiDestination", {})
    .n("EventBridgeClient", "UpdateApiDestinationCommand")
    .f(void 0, void 0)
    .ser(se_UpdateApiDestinationCommand)
    .de(de_UpdateApiDestinationCommand)
    .build() {
}

class UpdateArchiveCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSEvents", "UpdateArchive", {})
    .n("EventBridgeClient", "UpdateArchiveCommand")
    .f(void 0, void 0)
    .ser(se_UpdateArchiveCommand)
    .de(de_UpdateArchiveCommand)
    .build() {
}

class UpdateConnectionCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSEvents", "UpdateConnection", {})
    .n("EventBridgeClient", "UpdateConnectionCommand")
    .f(UpdateConnectionRequestFilterSensitiveLog, void 0)
    .ser(se_UpdateConnectionCommand)
    .de(de_UpdateConnectionCommand)
    .build() {
}

class UpdateEndpointCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSEvents", "UpdateEndpoint", {})
    .n("EventBridgeClient", "UpdateEndpointCommand")
    .f(void 0, void 0)
    .ser(se_UpdateEndpointCommand)
    .de(de_UpdateEndpointCommand)
    .build() {
}

class UpdateEventBusCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSEvents", "UpdateEventBus", {})
    .n("EventBridgeClient", "UpdateEventBusCommand")
    .f(void 0, void 0)
    .ser(se_UpdateEventBusCommand)
    .de(de_UpdateEventBusCommand)
    .build() {
}

const commands = {
    ActivateEventSourceCommand,
    CancelReplayCommand,
    CreateApiDestinationCommand,
    CreateArchiveCommand,
    CreateConnectionCommand,
    CreateEndpointCommand,
    CreateEventBusCommand,
    CreatePartnerEventSourceCommand,
    DeactivateEventSourceCommand,
    DeauthorizeConnectionCommand,
    DeleteApiDestinationCommand,
    DeleteArchiveCommand,
    DeleteConnectionCommand,
    DeleteEndpointCommand,
    DeleteEventBusCommand,
    DeletePartnerEventSourceCommand,
    DeleteRuleCommand,
    DescribeApiDestinationCommand,
    DescribeArchiveCommand,
    DescribeConnectionCommand,
    DescribeEndpointCommand,
    DescribeEventBusCommand,
    DescribeEventSourceCommand,
    DescribePartnerEventSourceCommand,
    DescribeReplayCommand,
    DescribeRuleCommand,
    DisableRuleCommand,
    EnableRuleCommand,
    ListApiDestinationsCommand,
    ListArchivesCommand,
    ListConnectionsCommand,
    ListEndpointsCommand,
    ListEventBusesCommand,
    ListEventSourcesCommand,
    ListPartnerEventSourceAccountsCommand,
    ListPartnerEventSourcesCommand,
    ListReplaysCommand,
    ListRuleNamesByTargetCommand,
    ListRulesCommand,
    ListTagsForResourceCommand,
    ListTargetsByRuleCommand,
    PutEventsCommand,
    PutPartnerEventsCommand,
    PutPermissionCommand,
    PutRuleCommand,
    PutTargetsCommand,
    RemovePermissionCommand,
    RemoveTargetsCommand,
    StartReplayCommand,
    TagResourceCommand,
    TestEventPatternCommand,
    UntagResourceCommand,
    UpdateApiDestinationCommand,
    UpdateArchiveCommand,
    UpdateConnectionCommand,
    UpdateEndpointCommand,
    UpdateEventBusCommand,
};
class EventBridge extends EventBridgeClient {
}
smithyClient.createAggregatedClient(commands, EventBridge);

Object.defineProperty(exports, "$Command", {
    enumerable: true,
    get: function () { return smithyClient.Command; }
});
Object.defineProperty(exports, "__Client", {
    enumerable: true,
    get: function () { return smithyClient.Client; }
});
exports.AccessDeniedException = AccessDeniedException;
exports.ActivateEventSourceCommand = ActivateEventSourceCommand;
exports.ApiDestinationHttpMethod = ApiDestinationHttpMethod;
exports.ApiDestinationState = ApiDestinationState;
exports.AppSyncParametersFilterSensitiveLog = AppSyncParametersFilterSensitiveLog;
exports.ArchiveState = ArchiveState;
exports.AssignPublicIp = AssignPublicIp;
exports.CancelReplayCommand = CancelReplayCommand;
exports.ConcurrentModificationException = ConcurrentModificationException;
exports.ConnectionAuthResponseParametersFilterSensitiveLog = ConnectionAuthResponseParametersFilterSensitiveLog;
exports.ConnectionAuthorizationType = ConnectionAuthorizationType;
exports.ConnectionBodyParameterFilterSensitiveLog = ConnectionBodyParameterFilterSensitiveLog;
exports.ConnectionHeaderParameterFilterSensitiveLog = ConnectionHeaderParameterFilterSensitiveLog;
exports.ConnectionHttpParametersFilterSensitiveLog = ConnectionHttpParametersFilterSensitiveLog;
exports.ConnectionOAuthHttpMethod = ConnectionOAuthHttpMethod;
exports.ConnectionOAuthResponseParametersFilterSensitiveLog = ConnectionOAuthResponseParametersFilterSensitiveLog;
exports.ConnectionQueryStringParameterFilterSensitiveLog = ConnectionQueryStringParameterFilterSensitiveLog;
exports.ConnectionState = ConnectionState;
exports.CreateApiDestinationCommand = CreateApiDestinationCommand;
exports.CreateArchiveCommand = CreateArchiveCommand;
exports.CreateConnectionApiKeyAuthRequestParametersFilterSensitiveLog = CreateConnectionApiKeyAuthRequestParametersFilterSensitiveLog;
exports.CreateConnectionAuthRequestParametersFilterSensitiveLog = CreateConnectionAuthRequestParametersFilterSensitiveLog;
exports.CreateConnectionBasicAuthRequestParametersFilterSensitiveLog = CreateConnectionBasicAuthRequestParametersFilterSensitiveLog;
exports.CreateConnectionCommand = CreateConnectionCommand;
exports.CreateConnectionOAuthClientRequestParametersFilterSensitiveLog = CreateConnectionOAuthClientRequestParametersFilterSensitiveLog;
exports.CreateConnectionOAuthRequestParametersFilterSensitiveLog = CreateConnectionOAuthRequestParametersFilterSensitiveLog;
exports.CreateConnectionRequestFilterSensitiveLog = CreateConnectionRequestFilterSensitiveLog;
exports.CreateEndpointCommand = CreateEndpointCommand;
exports.CreateEventBusCommand = CreateEventBusCommand;
exports.CreatePartnerEventSourceCommand = CreatePartnerEventSourceCommand;
exports.DeactivateEventSourceCommand = DeactivateEventSourceCommand;
exports.DeauthorizeConnectionCommand = DeauthorizeConnectionCommand;
exports.DeleteApiDestinationCommand = DeleteApiDestinationCommand;
exports.DeleteArchiveCommand = DeleteArchiveCommand;
exports.DeleteConnectionCommand = DeleteConnectionCommand;
exports.DeleteEndpointCommand = DeleteEndpointCommand;
exports.DeleteEventBusCommand = DeleteEventBusCommand;
exports.DeletePartnerEventSourceCommand = DeletePartnerEventSourceCommand;
exports.DeleteRuleCommand = DeleteRuleCommand;
exports.DescribeApiDestinationCommand = DescribeApiDestinationCommand;
exports.DescribeArchiveCommand = DescribeArchiveCommand;
exports.DescribeConnectionCommand = DescribeConnectionCommand;
exports.DescribeConnectionResponseFilterSensitiveLog = DescribeConnectionResponseFilterSensitiveLog;
exports.DescribeEndpointCommand = DescribeEndpointCommand;
exports.DescribeEventBusCommand = DescribeEventBusCommand;
exports.DescribeEventSourceCommand = DescribeEventSourceCommand;
exports.DescribePartnerEventSourceCommand = DescribePartnerEventSourceCommand;
exports.DescribeReplayCommand = DescribeReplayCommand;
exports.DescribeRuleCommand = DescribeRuleCommand;
exports.DisableRuleCommand = DisableRuleCommand;
exports.EnableRuleCommand = EnableRuleCommand;
exports.EndpointState = EndpointState;
exports.EventBridge = EventBridge;
exports.EventBridgeClient = EventBridgeClient;
exports.EventBridgeServiceException = EventBridgeServiceException;
exports.EventSourceState = EventSourceState;
exports.IllegalStatusException = IllegalStatusException;
exports.IncludeDetail = IncludeDetail;
exports.InternalException = InternalException;
exports.InvalidEventPatternException = InvalidEventPatternException;
exports.InvalidStateException = InvalidStateException;
exports.LaunchType = LaunchType;
exports.Level = Level;
exports.LimitExceededException = LimitExceededException;
exports.ListApiDestinationsCommand = ListApiDestinationsCommand;
exports.ListArchivesCommand = ListArchivesCommand;
exports.ListConnectionsCommand = ListConnectionsCommand;
exports.ListEndpointsCommand = ListEndpointsCommand;
exports.ListEventBusesCommand = ListEventBusesCommand;
exports.ListEventSourcesCommand = ListEventSourcesCommand;
exports.ListPartnerEventSourceAccountsCommand = ListPartnerEventSourceAccountsCommand;
exports.ListPartnerEventSourcesCommand = ListPartnerEventSourcesCommand;
exports.ListReplaysCommand = ListReplaysCommand;
exports.ListRuleNamesByTargetCommand = ListRuleNamesByTargetCommand;
exports.ListRulesCommand = ListRulesCommand;
exports.ListTagsForResourceCommand = ListTagsForResourceCommand;
exports.ListTargetsByRuleCommand = ListTargetsByRuleCommand;
exports.ListTargetsByRuleResponseFilterSensitiveLog = ListTargetsByRuleResponseFilterSensitiveLog;
exports.ManagedRuleException = ManagedRuleException;
exports.OperationDisabledException = OperationDisabledException;
exports.PlacementConstraintType = PlacementConstraintType;
exports.PlacementStrategyType = PlacementStrategyType;
exports.PolicyLengthExceededException = PolicyLengthExceededException;
exports.PropagateTags = PropagateTags;
exports.PutEventsCommand = PutEventsCommand;
exports.PutPartnerEventsCommand = PutPartnerEventsCommand;
exports.PutPermissionCommand = PutPermissionCommand;
exports.PutRuleCommand = PutRuleCommand;
exports.PutTargetsCommand = PutTargetsCommand;
exports.PutTargetsRequestFilterSensitiveLog = PutTargetsRequestFilterSensitiveLog;
exports.RedshiftDataParametersFilterSensitiveLog = RedshiftDataParametersFilterSensitiveLog;
exports.RemovePermissionCommand = RemovePermissionCommand;
exports.RemoveTargetsCommand = RemoveTargetsCommand;
exports.ReplayState = ReplayState;
exports.ReplicationState = ReplicationState;
exports.ResourceAlreadyExistsException = ResourceAlreadyExistsException;
exports.ResourceNotFoundException = ResourceNotFoundException;
exports.RuleState = RuleState;
exports.StartReplayCommand = StartReplayCommand;
exports.TagResourceCommand = TagResourceCommand;
exports.TargetFilterSensitiveLog = TargetFilterSensitiveLog;
exports.TestEventPatternCommand = TestEventPatternCommand;
exports.ThrottlingException = ThrottlingException;
exports.UntagResourceCommand = UntagResourceCommand;
exports.UpdateApiDestinationCommand = UpdateApiDestinationCommand;
exports.UpdateArchiveCommand = UpdateArchiveCommand;
exports.UpdateConnectionApiKeyAuthRequestParametersFilterSensitiveLog = UpdateConnectionApiKeyAuthRequestParametersFilterSensitiveLog;
exports.UpdateConnectionAuthRequestParametersFilterSensitiveLog = UpdateConnectionAuthRequestParametersFilterSensitiveLog;
exports.UpdateConnectionBasicAuthRequestParametersFilterSensitiveLog = UpdateConnectionBasicAuthRequestParametersFilterSensitiveLog;
exports.UpdateConnectionCommand = UpdateConnectionCommand;
exports.UpdateConnectionOAuthClientRequestParametersFilterSensitiveLog = UpdateConnectionOAuthClientRequestParametersFilterSensitiveLog;
exports.UpdateConnectionOAuthRequestParametersFilterSensitiveLog = UpdateConnectionOAuthRequestParametersFilterSensitiveLog;
exports.UpdateConnectionRequestFilterSensitiveLog = UpdateConnectionRequestFilterSensitiveLog;
exports.UpdateEndpointCommand = UpdateEndpointCommand;
exports.UpdateEventBusCommand = UpdateEventBusCommand;

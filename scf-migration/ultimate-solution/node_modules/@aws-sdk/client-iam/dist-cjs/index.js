'use strict';

var middlewareHostHeader = require('@aws-sdk/middleware-host-header');
var middlewareLogger = require('@aws-sdk/middleware-logger');
var middlewareRecursionDetection = require('@aws-sdk/middleware-recursion-detection');
var middlewareUserAgent = require('@aws-sdk/middleware-user-agent');
var configResolver = require('@smithy/config-resolver');
var core = require('@smithy/core');
var middlewareContentLength = require('@smithy/middleware-content-length');
var middlewareEndpoint = require('@smithy/middleware-endpoint');
var middlewareRetry = require('@smithy/middleware-retry');
var smithyClient = require('@smithy/smithy-client');
var httpAuthSchemeProvider = require('./auth/httpAuthSchemeProvider');
var runtimeConfig = require('./runtimeConfig');
var regionConfigResolver = require('@aws-sdk/region-config-resolver');
var protocolHttp = require('@smithy/protocol-http');
var middlewareSerde = require('@smithy/middleware-serde');
var core$1 = require('@aws-sdk/core');
var utilWaiter = require('@smithy/util-waiter');

const resolveClientEndpointParameters = (options) => {
    return Object.assign(options, {
        useDualstackEndpoint: options.useDualstackEndpoint ?? false,
        useFipsEndpoint: options.useFipsEndpoint ?? false,
        defaultSigningName: "iam",
    });
};
const commonParams = {
    UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
    Endpoint: { type: "builtInParams", name: "endpoint" },
    Region: { type: "builtInParams", name: "region" },
    UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" },
};

const getHttpAuthExtensionConfiguration = (runtimeConfig) => {
    const _httpAuthSchemes = runtimeConfig.httpAuthSchemes;
    let _httpAuthSchemeProvider = runtimeConfig.httpAuthSchemeProvider;
    let _credentials = runtimeConfig.credentials;
    return {
        setHttpAuthScheme(httpAuthScheme) {
            const index = _httpAuthSchemes.findIndex((scheme) => scheme.schemeId === httpAuthScheme.schemeId);
            if (index === -1) {
                _httpAuthSchemes.push(httpAuthScheme);
            }
            else {
                _httpAuthSchemes.splice(index, 1, httpAuthScheme);
            }
        },
        httpAuthSchemes() {
            return _httpAuthSchemes;
        },
        setHttpAuthSchemeProvider(httpAuthSchemeProvider) {
            _httpAuthSchemeProvider = httpAuthSchemeProvider;
        },
        httpAuthSchemeProvider() {
            return _httpAuthSchemeProvider;
        },
        setCredentials(credentials) {
            _credentials = credentials;
        },
        credentials() {
            return _credentials;
        },
    };
};
const resolveHttpAuthRuntimeConfig = (config) => {
    return {
        httpAuthSchemes: config.httpAuthSchemes(),
        httpAuthSchemeProvider: config.httpAuthSchemeProvider(),
        credentials: config.credentials(),
    };
};

const resolveRuntimeExtensions = (runtimeConfig, extensions) => {
    const extensionConfiguration = Object.assign(regionConfigResolver.getAwsRegionExtensionConfiguration(runtimeConfig), smithyClient.getDefaultExtensionConfiguration(runtimeConfig), protocolHttp.getHttpHandlerExtensionConfiguration(runtimeConfig), getHttpAuthExtensionConfiguration(runtimeConfig));
    extensions.forEach((extension) => extension.configure(extensionConfiguration));
    return Object.assign(runtimeConfig, regionConfigResolver.resolveAwsRegionExtensionConfiguration(extensionConfiguration), smithyClient.resolveDefaultRuntimeConfig(extensionConfiguration), protocolHttp.resolveHttpHandlerRuntimeConfig(extensionConfiguration), resolveHttpAuthRuntimeConfig(extensionConfiguration));
};

class IAMClient extends smithyClient.Client {
    config;
    constructor(...[configuration]) {
        const _config_0 = runtimeConfig.getRuntimeConfig(configuration || {});
        super(_config_0);
        this.initConfig = _config_0;
        const _config_1 = resolveClientEndpointParameters(_config_0);
        const _config_2 = middlewareUserAgent.resolveUserAgentConfig(_config_1);
        const _config_3 = middlewareRetry.resolveRetryConfig(_config_2);
        const _config_4 = configResolver.resolveRegionConfig(_config_3);
        const _config_5 = middlewareHostHeader.resolveHostHeaderConfig(_config_4);
        const _config_6 = middlewareEndpoint.resolveEndpointConfig(_config_5);
        const _config_7 = httpAuthSchemeProvider.resolveHttpAuthSchemeConfig(_config_6);
        const _config_8 = resolveRuntimeExtensions(_config_7, configuration?.extensions || []);
        this.config = _config_8;
        this.middlewareStack.use(middlewareUserAgent.getUserAgentPlugin(this.config));
        this.middlewareStack.use(middlewareRetry.getRetryPlugin(this.config));
        this.middlewareStack.use(middlewareContentLength.getContentLengthPlugin(this.config));
        this.middlewareStack.use(middlewareHostHeader.getHostHeaderPlugin(this.config));
        this.middlewareStack.use(middlewareLogger.getLoggerPlugin(this.config));
        this.middlewareStack.use(middlewareRecursionDetection.getRecursionDetectionPlugin(this.config));
        this.middlewareStack.use(core.getHttpAuthSchemeEndpointRuleSetPlugin(this.config, {
            httpAuthSchemeParametersProvider: httpAuthSchemeProvider.defaultIAMHttpAuthSchemeParametersProvider,
            identityProviderConfigProvider: async (config) => new core.DefaultIdentityProviderConfig({
                "aws.auth#sigv4": config.credentials,
            }),
        }));
        this.middlewareStack.use(core.getHttpSigningPlugin(this.config));
    }
    destroy() {
        super.destroy();
    }
}

class IAMServiceException extends smithyClient.ServiceException {
    constructor(options) {
        super(options);
        Object.setPrototypeOf(this, IAMServiceException.prototype);
    }
}

const AccessAdvisorUsageGranularityType = {
    ACTION_LEVEL: "ACTION_LEVEL",
    SERVICE_LEVEL: "SERVICE_LEVEL",
};
const StatusType = {
    Active: "Active",
    Expired: "Expired",
    Inactive: "Inactive",
};
class AccountNotManagementOrDelegatedAdministratorException extends IAMServiceException {
    name = "AccountNotManagementOrDelegatedAdministratorException";
    $fault = "client";
    Message;
    constructor(opts) {
        super({
            name: "AccountNotManagementOrDelegatedAdministratorException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, AccountNotManagementOrDelegatedAdministratorException.prototype);
        this.Message = opts.Message;
    }
}
class InvalidInputException extends IAMServiceException {
    name = "InvalidInputException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "InvalidInputException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, InvalidInputException.prototype);
    }
}
class LimitExceededException extends IAMServiceException {
    name = "LimitExceededException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "LimitExceededException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, LimitExceededException.prototype);
    }
}
class NoSuchEntityException extends IAMServiceException {
    name = "NoSuchEntityException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "NoSuchEntityException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, NoSuchEntityException.prototype);
    }
}
class ServiceFailureException extends IAMServiceException {
    name = "ServiceFailureException";
    $fault = "server";
    constructor(opts) {
        super({
            name: "ServiceFailureException",
            $fault: "server",
            ...opts,
        });
        Object.setPrototypeOf(this, ServiceFailureException.prototype);
    }
}
class EntityAlreadyExistsException extends IAMServiceException {
    name = "EntityAlreadyExistsException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "EntityAlreadyExistsException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, EntityAlreadyExistsException.prototype);
    }
}
class UnmodifiableEntityException extends IAMServiceException {
    name = "UnmodifiableEntityException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "UnmodifiableEntityException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, UnmodifiableEntityException.prototype);
    }
}
const AssertionEncryptionModeType = {
    Allowed: "Allowed",
    Required: "Required",
};
const AssignmentStatusType = {
    Any: "Any",
    Assigned: "Assigned",
    Unassigned: "Unassigned",
};
const PermissionsBoundaryAttachmentType = {
    Policy: "PermissionsBoundaryPolicy",
};
class PolicyNotAttachableException extends IAMServiceException {
    name = "PolicyNotAttachableException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "PolicyNotAttachableException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, PolicyNotAttachableException.prototype);
    }
}
class EntityTemporarilyUnmodifiableException extends IAMServiceException {
    name = "EntityTemporarilyUnmodifiableException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "EntityTemporarilyUnmodifiableException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, EntityTemporarilyUnmodifiableException.prototype);
    }
}
class InvalidUserTypeException extends IAMServiceException {
    name = "InvalidUserTypeException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "InvalidUserTypeException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, InvalidUserTypeException.prototype);
    }
}
class PasswordPolicyViolationException extends IAMServiceException {
    name = "PasswordPolicyViolationException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "PasswordPolicyViolationException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, PasswordPolicyViolationException.prototype);
    }
}
class ConcurrentModificationException extends IAMServiceException {
    name = "ConcurrentModificationException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "ConcurrentModificationException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, ConcurrentModificationException.prototype);
    }
}
class OpenIdIdpCommunicationErrorException extends IAMServiceException {
    name = "OpenIdIdpCommunicationErrorException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "OpenIdIdpCommunicationErrorException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, OpenIdIdpCommunicationErrorException.prototype);
    }
}
class MalformedPolicyDocumentException extends IAMServiceException {
    name = "MalformedPolicyDocumentException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "MalformedPolicyDocumentException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, MalformedPolicyDocumentException.prototype);
    }
}
class ServiceNotSupportedException extends IAMServiceException {
    name = "ServiceNotSupportedException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "ServiceNotSupportedException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, ServiceNotSupportedException.prototype);
    }
}
class DeleteConflictException extends IAMServiceException {
    name = "DeleteConflictException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "DeleteConflictException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, DeleteConflictException.prototype);
    }
}
const FeatureType = {
    ROOT_CREDENTIALS_MANAGEMENT: "RootCredentialsManagement",
    ROOT_SESSIONS: "RootSessions",
};
class OrganizationNotFoundException extends IAMServiceException {
    name = "OrganizationNotFoundException";
    $fault = "client";
    Message;
    constructor(opts) {
        super({
            name: "OrganizationNotFoundException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, OrganizationNotFoundException.prototype);
        this.Message = opts.Message;
    }
}
class OrganizationNotInAllFeaturesModeException extends IAMServiceException {
    name = "OrganizationNotInAllFeaturesModeException";
    $fault = "client";
    Message;
    constructor(opts) {
        super({
            name: "OrganizationNotInAllFeaturesModeException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, OrganizationNotInAllFeaturesModeException.prototype);
        this.Message = opts.Message;
    }
}
class ServiceAccessNotEnabledException extends IAMServiceException {
    name = "ServiceAccessNotEnabledException";
    $fault = "client";
    Message;
    constructor(opts) {
        super({
            name: "ServiceAccessNotEnabledException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, ServiceAccessNotEnabledException.prototype);
        this.Message = opts.Message;
    }
}
class InvalidAuthenticationCodeException extends IAMServiceException {
    name = "InvalidAuthenticationCodeException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "InvalidAuthenticationCodeException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, InvalidAuthenticationCodeException.prototype);
    }
}
class CallerIsNotManagementAccountException extends IAMServiceException {
    name = "CallerIsNotManagementAccountException";
    $fault = "client";
    Message;
    constructor(opts) {
        super({
            name: "CallerIsNotManagementAccountException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, CallerIsNotManagementAccountException.prototype);
        this.Message = opts.Message;
    }
}
const ReportStateType = {
    COMPLETE: "COMPLETE",
    INPROGRESS: "INPROGRESS",
    STARTED: "STARTED",
};
class ReportGenerationLimitExceededException extends IAMServiceException {
    name = "ReportGenerationLimitExceededException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "ReportGenerationLimitExceededException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, ReportGenerationLimitExceededException.prototype);
    }
}
const EntityType = {
    AWSManagedPolicy: "AWSManagedPolicy",
    Group: "Group",
    LocalManagedPolicy: "LocalManagedPolicy",
    Role: "Role",
    User: "User",
};
const SummaryKeyType = {
    AccessKeysPerUserQuota: "AccessKeysPerUserQuota",
    AccountAccessKeysPresent: "AccountAccessKeysPresent",
    AccountMFAEnabled: "AccountMFAEnabled",
    AccountPasswordPresent: "AccountPasswordPresent",
    AccountSigningCertificatesPresent: "AccountSigningCertificatesPresent",
    AttachedPoliciesPerGroupQuota: "AttachedPoliciesPerGroupQuota",
    AttachedPoliciesPerRoleQuota: "AttachedPoliciesPerRoleQuota",
    AttachedPoliciesPerUserQuota: "AttachedPoliciesPerUserQuota",
    GlobalEndpointTokenVersion: "GlobalEndpointTokenVersion",
    GroupPolicySizeQuota: "GroupPolicySizeQuota",
    Groups: "Groups",
    GroupsPerUserQuota: "GroupsPerUserQuota",
    GroupsQuota: "GroupsQuota",
    MFADevices: "MFADevices",
    MFADevicesInUse: "MFADevicesInUse",
    Policies: "Policies",
    PoliciesQuota: "PoliciesQuota",
    PolicySizeQuota: "PolicySizeQuota",
    PolicyVersionsInUse: "PolicyVersionsInUse",
    PolicyVersionsInUseQuota: "PolicyVersionsInUseQuota",
    ServerCertificates: "ServerCertificates",
    ServerCertificatesQuota: "ServerCertificatesQuota",
    SigningCertificatesPerUserQuota: "SigningCertificatesPerUserQuota",
    UserPolicySizeQuota: "UserPolicySizeQuota",
    Users: "Users",
    UsersQuota: "UsersQuota",
    VersionsPerPolicyQuota: "VersionsPerPolicyQuota",
};
class CredentialReportExpiredException extends IAMServiceException {
    name = "CredentialReportExpiredException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "CredentialReportExpiredException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, CredentialReportExpiredException.prototype);
    }
}
class CredentialReportNotPresentException extends IAMServiceException {
    name = "CredentialReportNotPresentException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "CredentialReportNotPresentException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, CredentialReportNotPresentException.prototype);
    }
}
class CredentialReportNotReadyException extends IAMServiceException {
    name = "CredentialReportNotReadyException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "CredentialReportNotReadyException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, CredentialReportNotReadyException.prototype);
    }
}
const ReportFormatType = {
    text_csv: "text/csv",
};
const SortKeyType = {
    LAST_AUTHENTICATED_TIME_ASCENDING: "LAST_AUTHENTICATED_TIME_ASCENDING",
    LAST_AUTHENTICATED_TIME_DESCENDING: "LAST_AUTHENTICATED_TIME_DESCENDING",
    SERVICE_NAMESPACE_ASCENDING: "SERVICE_NAMESPACE_ASCENDING",
    SERVICE_NAMESPACE_DESCENDING: "SERVICE_NAMESPACE_DESCENDING",
};
const JobStatusType = {
    COMPLETED: "COMPLETED",
    FAILED: "FAILED",
    IN_PROGRESS: "IN_PROGRESS",
};
const PolicyOwnerEntityType = {
    GROUP: "GROUP",
    ROLE: "ROLE",
    USER: "USER",
};
const DeletionTaskStatusType = {
    FAILED: "FAILED",
    IN_PROGRESS: "IN_PROGRESS",
    NOT_STARTED: "NOT_STARTED",
    SUCCEEDED: "SUCCEEDED",
};
const EncodingType = {
    PEM: "PEM",
    SSH: "SSH",
};
class UnrecognizedPublicKeyEncodingException extends IAMServiceException {
    name = "UnrecognizedPublicKeyEncodingException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "UnrecognizedPublicKeyEncodingException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, UnrecognizedPublicKeyEncodingException.prototype);
    }
}
const PolicyUsageType = {
    PermissionsBoundary: "PermissionsBoundary",
    PermissionsPolicy: "PermissionsPolicy",
};
const PolicyScopeType = {
    AWS: "AWS",
    All: "All",
    Local: "Local",
};
const PolicyType = {
    INLINE: "INLINE",
    MANAGED: "MANAGED",
};
const GlobalEndpointTokenVersion = {
    v1Token: "v1Token",
    v2Token: "v2Token",
};
class PolicyEvaluationException extends IAMServiceException {
    name = "PolicyEvaluationException";
    $fault = "server";
    constructor(opts) {
        super({
            name: "PolicyEvaluationException",
            $fault: "server",
            ...opts,
        });
        Object.setPrototypeOf(this, PolicyEvaluationException.prototype);
    }
}
const ContextKeyTypeEnum = {
    BINARY: "binary",
    BINARY_LIST: "binaryList",
    BOOLEAN: "boolean",
    BOOLEAN_LIST: "booleanList",
    DATE: "date",
    DATE_LIST: "dateList",
    IP: "ip",
    IP_LIST: "ipList",
    NUMERIC: "numeric",
    NUMERIC_LIST: "numericList",
    STRING: "string",
    STRING_LIST: "stringList",
};
const AccessKeyFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.SecretAccessKey && { SecretAccessKey: smithyClient.SENSITIVE_STRING }),
});
const ChangePasswordRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.OldPassword && { OldPassword: smithyClient.SENSITIVE_STRING }),
    ...(obj.NewPassword && { NewPassword: smithyClient.SENSITIVE_STRING }),
});
const CreateAccessKeyResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.AccessKey && { AccessKey: AccessKeyFilterSensitiveLog(obj.AccessKey) }),
});
const CreateLoginProfileRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Password && { Password: smithyClient.SENSITIVE_STRING }),
});
const CreateSAMLProviderRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.AddPrivateKey && { AddPrivateKey: smithyClient.SENSITIVE_STRING }),
});
const ServiceSpecificCredentialFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.ServicePassword && { ServicePassword: smithyClient.SENSITIVE_STRING }),
    ...(obj.ServiceCredentialSecret && { ServiceCredentialSecret: smithyClient.SENSITIVE_STRING }),
});
const CreateServiceSpecificCredentialResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.ServiceSpecificCredential && {
        ServiceSpecificCredential: ServiceSpecificCredentialFilterSensitiveLog(obj.ServiceSpecificCredential),
    }),
});
const VirtualMFADeviceFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Base32StringSeed && { Base32StringSeed: smithyClient.SENSITIVE_STRING }),
    ...(obj.QRCodePNG && { QRCodePNG: smithyClient.SENSITIVE_STRING }),
});
const CreateVirtualMFADeviceResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.VirtualMFADevice && { VirtualMFADevice: VirtualMFADeviceFilterSensitiveLog(obj.VirtualMFADevice) }),
});
const ListVirtualMFADevicesResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.VirtualMFADevices && {
        VirtualMFADevices: obj.VirtualMFADevices.map((item) => VirtualMFADeviceFilterSensitiveLog(item)),
    }),
});
const ResetServiceSpecificCredentialResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.ServiceSpecificCredential && {
        ServiceSpecificCredential: ServiceSpecificCredentialFilterSensitiveLog(obj.ServiceSpecificCredential),
    }),
});

const PolicyEvaluationDecisionType = {
    ALLOWED: "allowed",
    EXPLICIT_DENY: "explicitDeny",
    IMPLICIT_DENY: "implicitDeny",
};
const PolicySourceType = {
    AWS_MANAGED: "aws-managed",
    GROUP: "group",
    NONE: "none",
    RESOURCE: "resource",
    ROLE: "role",
    USER: "user",
    USER_MANAGED: "user-managed",
};
class KeyPairMismatchException extends IAMServiceException {
    name = "KeyPairMismatchException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "KeyPairMismatchException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, KeyPairMismatchException.prototype);
    }
}
class MalformedCertificateException extends IAMServiceException {
    name = "MalformedCertificateException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "MalformedCertificateException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, MalformedCertificateException.prototype);
    }
}
class DuplicateCertificateException extends IAMServiceException {
    name = "DuplicateCertificateException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "DuplicateCertificateException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, DuplicateCertificateException.prototype);
    }
}
class InvalidCertificateException extends IAMServiceException {
    name = "InvalidCertificateException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "InvalidCertificateException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, InvalidCertificateException.prototype);
    }
}
class DuplicateSSHPublicKeyException extends IAMServiceException {
    name = "DuplicateSSHPublicKeyException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "DuplicateSSHPublicKeyException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, DuplicateSSHPublicKeyException.prototype);
    }
}
class InvalidPublicKeyException extends IAMServiceException {
    name = "InvalidPublicKeyException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "InvalidPublicKeyException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, InvalidPublicKeyException.prototype);
    }
}
const UpdateLoginProfileRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Password && { Password: smithyClient.SENSITIVE_STRING }),
});
const UpdateSAMLProviderRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.AddPrivateKey && { AddPrivateKey: smithyClient.SENSITIVE_STRING }),
});
const UploadServerCertificateRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.PrivateKey && { PrivateKey: smithyClient.SENSITIVE_STRING }),
});

const se_AddClientIDToOpenIDConnectProviderCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_AddClientIDToOpenIDConnectProviderRequest(input),
        [_A]: _ACIDTOIDCP,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_AddRoleToInstanceProfileCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_AddRoleToInstanceProfileRequest(input),
        [_A]: _ARTIP,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_AddUserToGroupCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_AddUserToGroupRequest(input),
        [_A]: _AUTG,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_AttachGroupPolicyCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_AttachGroupPolicyRequest(input),
        [_A]: _AGP,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_AttachRolePolicyCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_AttachRolePolicyRequest(input),
        [_A]: _ARP,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_AttachUserPolicyCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_AttachUserPolicyRequest(input),
        [_A]: _AUP,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ChangePasswordCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ChangePasswordRequest(input),
        [_A]: _CP,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_CreateAccessKeyCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_CreateAccessKeyRequest(input),
        [_A]: _CAK,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_CreateAccountAliasCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_CreateAccountAliasRequest(input),
        [_A]: _CAA,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_CreateGroupCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_CreateGroupRequest(input),
        [_A]: _CG,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_CreateInstanceProfileCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_CreateInstanceProfileRequest(input),
        [_A]: _CIP,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_CreateLoginProfileCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_CreateLoginProfileRequest(input),
        [_A]: _CLP,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_CreateOpenIDConnectProviderCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_CreateOpenIDConnectProviderRequest(input),
        [_A]: _COIDCP,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_CreatePolicyCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_CreatePolicyRequest(input),
        [_A]: _CPr,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_CreatePolicyVersionCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_CreatePolicyVersionRequest(input),
        [_A]: _CPV,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_CreateRoleCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_CreateRoleRequest(input),
        [_A]: _CR,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_CreateSAMLProviderCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_CreateSAMLProviderRequest(input),
        [_A]: _CSAMLP,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_CreateServiceLinkedRoleCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_CreateServiceLinkedRoleRequest(input),
        [_A]: _CSLR,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_CreateServiceSpecificCredentialCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_CreateServiceSpecificCredentialRequest(input),
        [_A]: _CSSC,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_CreateUserCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_CreateUserRequest(input),
        [_A]: _CU,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_CreateVirtualMFADeviceCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_CreateVirtualMFADeviceRequest(input),
        [_A]: _CVMFAD,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeactivateMFADeviceCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DeactivateMFADeviceRequest(input),
        [_A]: _DMFAD,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeleteAccessKeyCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DeleteAccessKeyRequest(input),
        [_A]: _DAK,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeleteAccountAliasCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DeleteAccountAliasRequest(input),
        [_A]: _DAA,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeleteAccountPasswordPolicyCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    const body = buildFormUrlencodedString({
        [_A]: _DAPP,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeleteGroupCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DeleteGroupRequest(input),
        [_A]: _DG,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeleteGroupPolicyCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DeleteGroupPolicyRequest(input),
        [_A]: _DGP,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeleteInstanceProfileCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DeleteInstanceProfileRequest(input),
        [_A]: _DIP,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeleteLoginProfileCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DeleteLoginProfileRequest(input),
        [_A]: _DLP,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeleteOpenIDConnectProviderCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DeleteOpenIDConnectProviderRequest(input),
        [_A]: _DOIDCP,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeletePolicyCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DeletePolicyRequest(input),
        [_A]: _DP,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeletePolicyVersionCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DeletePolicyVersionRequest(input),
        [_A]: _DPV,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeleteRoleCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DeleteRoleRequest(input),
        [_A]: _DR,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeleteRolePermissionsBoundaryCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DeleteRolePermissionsBoundaryRequest(input),
        [_A]: _DRPB,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeleteRolePolicyCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DeleteRolePolicyRequest(input),
        [_A]: _DRP,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeleteSAMLProviderCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DeleteSAMLProviderRequest(input),
        [_A]: _DSAMLP,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeleteServerCertificateCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DeleteServerCertificateRequest(input),
        [_A]: _DSC,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeleteServiceLinkedRoleCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DeleteServiceLinkedRoleRequest(input),
        [_A]: _DSLR,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeleteServiceSpecificCredentialCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DeleteServiceSpecificCredentialRequest(input),
        [_A]: _DSSC,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeleteSigningCertificateCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DeleteSigningCertificateRequest(input),
        [_A]: _DSCe,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeleteSSHPublicKeyCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DeleteSSHPublicKeyRequest(input),
        [_A]: _DSSHPK,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeleteUserCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DeleteUserRequest(input),
        [_A]: _DU,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeleteUserPermissionsBoundaryCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DeleteUserPermissionsBoundaryRequest(input),
        [_A]: _DUPB,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeleteUserPolicyCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DeleteUserPolicyRequest(input),
        [_A]: _DUP,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeleteVirtualMFADeviceCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DeleteVirtualMFADeviceRequest(input),
        [_A]: _DVMFAD,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DetachGroupPolicyCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DetachGroupPolicyRequest(input),
        [_A]: _DGPe,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DetachRolePolicyCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DetachRolePolicyRequest(input),
        [_A]: _DRPe,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DetachUserPolicyCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DetachUserPolicyRequest(input),
        [_A]: _DUPe,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DisableOrganizationsRootCredentialsManagementCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DisableOrganizationsRootCredentialsManagementRequest(),
        [_A]: _DORCM,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DisableOrganizationsRootSessionsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DisableOrganizationsRootSessionsRequest(),
        [_A]: _DORS,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_EnableMFADeviceCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_EnableMFADeviceRequest(input),
        [_A]: _EMFAD,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_EnableOrganizationsRootCredentialsManagementCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_EnableOrganizationsRootCredentialsManagementRequest(),
        [_A]: _EORCM,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_EnableOrganizationsRootSessionsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_EnableOrganizationsRootSessionsRequest(),
        [_A]: _EORS,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_GenerateCredentialReportCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    const body = buildFormUrlencodedString({
        [_A]: _GCR,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_GenerateOrganizationsAccessReportCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_GenerateOrganizationsAccessReportRequest(input),
        [_A]: _GOAR,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_GenerateServiceLastAccessedDetailsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_GenerateServiceLastAccessedDetailsRequest(input),
        [_A]: _GSLAD,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_GetAccessKeyLastUsedCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_GetAccessKeyLastUsedRequest(input),
        [_A]: _GAKLU,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_GetAccountAuthorizationDetailsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_GetAccountAuthorizationDetailsRequest(input),
        [_A]: _GAAD,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_GetAccountPasswordPolicyCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    const body = buildFormUrlencodedString({
        [_A]: _GAPP,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_GetAccountSummaryCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    const body = buildFormUrlencodedString({
        [_A]: _GAS,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_GetContextKeysForCustomPolicyCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_GetContextKeysForCustomPolicyRequest(input),
        [_A]: _GCKFCP,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_GetContextKeysForPrincipalPolicyCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_GetContextKeysForPrincipalPolicyRequest(input),
        [_A]: _GCKFPP,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_GetCredentialReportCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    const body = buildFormUrlencodedString({
        [_A]: _GCRe,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_GetGroupCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_GetGroupRequest(input),
        [_A]: _GG,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_GetGroupPolicyCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_GetGroupPolicyRequest(input),
        [_A]: _GGP,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_GetInstanceProfileCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_GetInstanceProfileRequest(input),
        [_A]: _GIP,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_GetLoginProfileCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_GetLoginProfileRequest(input),
        [_A]: _GLP,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_GetMFADeviceCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_GetMFADeviceRequest(input),
        [_A]: _GMFAD,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_GetOpenIDConnectProviderCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_GetOpenIDConnectProviderRequest(input),
        [_A]: _GOIDCP,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_GetOrganizationsAccessReportCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_GetOrganizationsAccessReportRequest(input),
        [_A]: _GOARe,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_GetPolicyCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_GetPolicyRequest(input),
        [_A]: _GP,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_GetPolicyVersionCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_GetPolicyVersionRequest(input),
        [_A]: _GPV,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_GetRoleCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_GetRoleRequest(input),
        [_A]: _GR,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_GetRolePolicyCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_GetRolePolicyRequest(input),
        [_A]: _GRP,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_GetSAMLProviderCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_GetSAMLProviderRequest(input),
        [_A]: _GSAMLP,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_GetServerCertificateCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_GetServerCertificateRequest(input),
        [_A]: _GSC,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_GetServiceLastAccessedDetailsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_GetServiceLastAccessedDetailsRequest(input),
        [_A]: _GSLADe,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_GetServiceLastAccessedDetailsWithEntitiesCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_GetServiceLastAccessedDetailsWithEntitiesRequest(input),
        [_A]: _GSLADWE,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_GetServiceLinkedRoleDeletionStatusCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_GetServiceLinkedRoleDeletionStatusRequest(input),
        [_A]: _GSLRDS,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_GetSSHPublicKeyCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_GetSSHPublicKeyRequest(input),
        [_A]: _GSSHPK,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_GetUserCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_GetUserRequest(input),
        [_A]: _GU,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_GetUserPolicyCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_GetUserPolicyRequest(input),
        [_A]: _GUP,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ListAccessKeysCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ListAccessKeysRequest(input),
        [_A]: _LAK,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ListAccountAliasesCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ListAccountAliasesRequest(input),
        [_A]: _LAA,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ListAttachedGroupPoliciesCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ListAttachedGroupPoliciesRequest(input),
        [_A]: _LAGP,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ListAttachedRolePoliciesCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ListAttachedRolePoliciesRequest(input),
        [_A]: _LARP,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ListAttachedUserPoliciesCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ListAttachedUserPoliciesRequest(input),
        [_A]: _LAUP,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ListEntitiesForPolicyCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ListEntitiesForPolicyRequest(input),
        [_A]: _LEFP,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ListGroupPoliciesCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ListGroupPoliciesRequest(input),
        [_A]: _LGP,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ListGroupsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ListGroupsRequest(input),
        [_A]: _LG,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ListGroupsForUserCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ListGroupsForUserRequest(input),
        [_A]: _LGFU,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ListInstanceProfilesCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ListInstanceProfilesRequest(input),
        [_A]: _LIP,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ListInstanceProfilesForRoleCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ListInstanceProfilesForRoleRequest(input),
        [_A]: _LIPFR,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ListInstanceProfileTagsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ListInstanceProfileTagsRequest(input),
        [_A]: _LIPT,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ListMFADevicesCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ListMFADevicesRequest(input),
        [_A]: _LMFAD,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ListMFADeviceTagsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ListMFADeviceTagsRequest(input),
        [_A]: _LMFADT,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ListOpenIDConnectProvidersCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ListOpenIDConnectProvidersRequest(),
        [_A]: _LOIDCP,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ListOpenIDConnectProviderTagsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ListOpenIDConnectProviderTagsRequest(input),
        [_A]: _LOIDCPT,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ListOrganizationsFeaturesCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ListOrganizationsFeaturesRequest(),
        [_A]: _LOF,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ListPoliciesCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ListPoliciesRequest(input),
        [_A]: _LP,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ListPoliciesGrantingServiceAccessCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ListPoliciesGrantingServiceAccessRequest(input),
        [_A]: _LPGSA,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ListPolicyTagsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ListPolicyTagsRequest(input),
        [_A]: _LPT,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ListPolicyVersionsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ListPolicyVersionsRequest(input),
        [_A]: _LPV,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ListRolePoliciesCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ListRolePoliciesRequest(input),
        [_A]: _LRP,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ListRolesCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ListRolesRequest(input),
        [_A]: _LR,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ListRoleTagsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ListRoleTagsRequest(input),
        [_A]: _LRT,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ListSAMLProvidersCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ListSAMLProvidersRequest(),
        [_A]: _LSAMLP,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ListSAMLProviderTagsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ListSAMLProviderTagsRequest(input),
        [_A]: _LSAMLPT,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ListServerCertificatesCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ListServerCertificatesRequest(input),
        [_A]: _LSC,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ListServerCertificateTagsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ListServerCertificateTagsRequest(input),
        [_A]: _LSCT,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ListServiceSpecificCredentialsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ListServiceSpecificCredentialsRequest(input),
        [_A]: _LSSC,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ListSigningCertificatesCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ListSigningCertificatesRequest(input),
        [_A]: _LSCi,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ListSSHPublicKeysCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ListSSHPublicKeysRequest(input),
        [_A]: _LSSHPK,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ListUserPoliciesCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ListUserPoliciesRequest(input),
        [_A]: _LUP,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ListUsersCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ListUsersRequest(input),
        [_A]: _LU,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ListUserTagsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ListUserTagsRequest(input),
        [_A]: _LUT,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ListVirtualMFADevicesCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ListVirtualMFADevicesRequest(input),
        [_A]: _LVMFAD,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_PutGroupPolicyCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_PutGroupPolicyRequest(input),
        [_A]: _PGP,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_PutRolePermissionsBoundaryCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_PutRolePermissionsBoundaryRequest(input),
        [_A]: _PRPB,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_PutRolePolicyCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_PutRolePolicyRequest(input),
        [_A]: _PRP,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_PutUserPermissionsBoundaryCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_PutUserPermissionsBoundaryRequest(input),
        [_A]: _PUPB,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_PutUserPolicyCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_PutUserPolicyRequest(input),
        [_A]: _PUP,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_RemoveClientIDFromOpenIDConnectProviderCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_RemoveClientIDFromOpenIDConnectProviderRequest(input),
        [_A]: _RCIDFOIDCP,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_RemoveRoleFromInstanceProfileCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_RemoveRoleFromInstanceProfileRequest(input),
        [_A]: _RRFIP,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_RemoveUserFromGroupCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_RemoveUserFromGroupRequest(input),
        [_A]: _RUFG,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ResetServiceSpecificCredentialCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ResetServiceSpecificCredentialRequest(input),
        [_A]: _RSSC,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ResyncMFADeviceCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ResyncMFADeviceRequest(input),
        [_A]: _RMFAD,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_SetDefaultPolicyVersionCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_SetDefaultPolicyVersionRequest(input),
        [_A]: _SDPV,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_SetSecurityTokenServicePreferencesCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_SetSecurityTokenServicePreferencesRequest(input),
        [_A]: _SSTSP,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_SimulateCustomPolicyCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_SimulateCustomPolicyRequest(input),
        [_A]: _SCP,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_SimulatePrincipalPolicyCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_SimulatePrincipalPolicyRequest(input),
        [_A]: _SPP,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_TagInstanceProfileCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_TagInstanceProfileRequest(input),
        [_A]: _TIP,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_TagMFADeviceCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_TagMFADeviceRequest(input),
        [_A]: _TMFAD,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_TagOpenIDConnectProviderCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_TagOpenIDConnectProviderRequest(input),
        [_A]: _TOIDCP,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_TagPolicyCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_TagPolicyRequest(input),
        [_A]: _TP,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_TagRoleCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_TagRoleRequest(input),
        [_A]: _TR,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_TagSAMLProviderCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_TagSAMLProviderRequest(input),
        [_A]: _TSAMLP,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_TagServerCertificateCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_TagServerCertificateRequest(input),
        [_A]: _TSC,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_TagUserCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_TagUserRequest(input),
        [_A]: _TU,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_UntagInstanceProfileCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_UntagInstanceProfileRequest(input),
        [_A]: _UIP,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_UntagMFADeviceCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_UntagMFADeviceRequest(input),
        [_A]: _UMFAD,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_UntagOpenIDConnectProviderCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_UntagOpenIDConnectProviderRequest(input),
        [_A]: _UOIDCP,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_UntagPolicyCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_UntagPolicyRequest(input),
        [_A]: _UP,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_UntagRoleCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_UntagRoleRequest(input),
        [_A]: _UR,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_UntagSAMLProviderCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_UntagSAMLProviderRequest(input),
        [_A]: _USAMLP,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_UntagServerCertificateCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_UntagServerCertificateRequest(input),
        [_A]: _USC,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_UntagUserCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_UntagUserRequest(input),
        [_A]: _UU,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_UpdateAccessKeyCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_UpdateAccessKeyRequest(input),
        [_A]: _UAK,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_UpdateAccountPasswordPolicyCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_UpdateAccountPasswordPolicyRequest(input),
        [_A]: _UAPP,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_UpdateAssumeRolePolicyCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_UpdateAssumeRolePolicyRequest(input),
        [_A]: _UARP,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_UpdateGroupCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_UpdateGroupRequest(input),
        [_A]: _UG,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_UpdateLoginProfileCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_UpdateLoginProfileRequest(input),
        [_A]: _ULP,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_UpdateOpenIDConnectProviderThumbprintCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_UpdateOpenIDConnectProviderThumbprintRequest(input),
        [_A]: _UOIDCPT,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_UpdateRoleCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_UpdateRoleRequest(input),
        [_A]: _URp,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_UpdateRoleDescriptionCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_UpdateRoleDescriptionRequest(input),
        [_A]: _URD,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_UpdateSAMLProviderCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_UpdateSAMLProviderRequest(input),
        [_A]: _USAMLPp,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_UpdateServerCertificateCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_UpdateServerCertificateRequest(input),
        [_A]: _USCp,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_UpdateServiceSpecificCredentialCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_UpdateServiceSpecificCredentialRequest(input),
        [_A]: _USSC,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_UpdateSigningCertificateCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_UpdateSigningCertificateRequest(input),
        [_A]: _USCpd,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_UpdateSSHPublicKeyCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_UpdateSSHPublicKeyRequest(input),
        [_A]: _USSHPK,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_UpdateUserCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_UpdateUserRequest(input),
        [_A]: _UUp,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_UploadServerCertificateCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_UploadServerCertificateRequest(input),
        [_A]: _USCpl,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_UploadSigningCertificateCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_UploadSigningCertificateRequest(input),
        [_A]: _USCplo,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_UploadSSHPublicKeyCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_UploadSSHPublicKeyRequest(input),
        [_A]: _USSHPKp,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const de_AddClientIDToOpenIDConnectProviderCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await smithyClient.collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_AddRoleToInstanceProfileCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await smithyClient.collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_AddUserToGroupCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await smithyClient.collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_AttachGroupPolicyCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await smithyClient.collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_AttachRolePolicyCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await smithyClient.collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_AttachUserPolicyCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await smithyClient.collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_ChangePasswordCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await smithyClient.collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_CreateAccessKeyCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_CreateAccessKeyResponse(data.CreateAccessKeyResult);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateAccountAliasCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await smithyClient.collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_CreateGroupCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_CreateGroupResponse(data.CreateGroupResult);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateInstanceProfileCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_CreateInstanceProfileResponse(data.CreateInstanceProfileResult);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateLoginProfileCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_CreateLoginProfileResponse(data.CreateLoginProfileResult);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateOpenIDConnectProviderCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_CreateOpenIDConnectProviderResponse(data.CreateOpenIDConnectProviderResult);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreatePolicyCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_CreatePolicyResponse(data.CreatePolicyResult);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreatePolicyVersionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_CreatePolicyVersionResponse(data.CreatePolicyVersionResult);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateRoleCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_CreateRoleResponse(data.CreateRoleResult);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateSAMLProviderCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_CreateSAMLProviderResponse(data.CreateSAMLProviderResult);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateServiceLinkedRoleCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_CreateServiceLinkedRoleResponse(data.CreateServiceLinkedRoleResult);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateServiceSpecificCredentialCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_CreateServiceSpecificCredentialResponse(data.CreateServiceSpecificCredentialResult);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateUserCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_CreateUserResponse(data.CreateUserResult);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateVirtualMFADeviceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_CreateVirtualMFADeviceResponse(data.CreateVirtualMFADeviceResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DeactivateMFADeviceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await smithyClient.collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_DeleteAccessKeyCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await smithyClient.collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_DeleteAccountAliasCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await smithyClient.collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_DeleteAccountPasswordPolicyCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await smithyClient.collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_DeleteGroupCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await smithyClient.collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_DeleteGroupPolicyCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await smithyClient.collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_DeleteInstanceProfileCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await smithyClient.collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_DeleteLoginProfileCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await smithyClient.collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_DeleteOpenIDConnectProviderCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await smithyClient.collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_DeletePolicyCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await smithyClient.collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_DeletePolicyVersionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await smithyClient.collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_DeleteRoleCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await smithyClient.collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_DeleteRolePermissionsBoundaryCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await smithyClient.collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_DeleteRolePolicyCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await smithyClient.collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_DeleteSAMLProviderCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await smithyClient.collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_DeleteServerCertificateCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await smithyClient.collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_DeleteServiceLinkedRoleCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DeleteServiceLinkedRoleResponse(data.DeleteServiceLinkedRoleResult);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DeleteServiceSpecificCredentialCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await smithyClient.collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_DeleteSigningCertificateCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await smithyClient.collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_DeleteSSHPublicKeyCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await smithyClient.collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_DeleteUserCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await smithyClient.collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_DeleteUserPermissionsBoundaryCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await smithyClient.collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_DeleteUserPolicyCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await smithyClient.collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_DeleteVirtualMFADeviceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await smithyClient.collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_DetachGroupPolicyCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await smithyClient.collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_DetachRolePolicyCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await smithyClient.collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_DetachUserPolicyCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await smithyClient.collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_DisableOrganizationsRootCredentialsManagementCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DisableOrganizationsRootCredentialsManagementResponse(data.DisableOrganizationsRootCredentialsManagementResult);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DisableOrganizationsRootSessionsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DisableOrganizationsRootSessionsResponse(data.DisableOrganizationsRootSessionsResult);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_EnableMFADeviceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await smithyClient.collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_EnableOrganizationsRootCredentialsManagementCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_EnableOrganizationsRootCredentialsManagementResponse(data.EnableOrganizationsRootCredentialsManagementResult);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_EnableOrganizationsRootSessionsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_EnableOrganizationsRootSessionsResponse(data.EnableOrganizationsRootSessionsResult);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_GenerateCredentialReportCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_GenerateCredentialReportResponse(data.GenerateCredentialReportResult);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_GenerateOrganizationsAccessReportCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_GenerateOrganizationsAccessReportResponse(data.GenerateOrganizationsAccessReportResult);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_GenerateServiceLastAccessedDetailsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_GenerateServiceLastAccessedDetailsResponse(data.GenerateServiceLastAccessedDetailsResult);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_GetAccessKeyLastUsedCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_GetAccessKeyLastUsedResponse(data.GetAccessKeyLastUsedResult);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_GetAccountAuthorizationDetailsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_GetAccountAuthorizationDetailsResponse(data.GetAccountAuthorizationDetailsResult);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_GetAccountPasswordPolicyCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_GetAccountPasswordPolicyResponse(data.GetAccountPasswordPolicyResult);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_GetAccountSummaryCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_GetAccountSummaryResponse(data.GetAccountSummaryResult);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_GetContextKeysForCustomPolicyCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_GetContextKeysForPolicyResponse(data.GetContextKeysForCustomPolicyResult);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_GetContextKeysForPrincipalPolicyCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_GetContextKeysForPolicyResponse(data.GetContextKeysForPrincipalPolicyResult);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_GetCredentialReportCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_GetCredentialReportResponse(data.GetCredentialReportResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_GetGroupCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_GetGroupResponse(data.GetGroupResult);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_GetGroupPolicyCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_GetGroupPolicyResponse(data.GetGroupPolicyResult);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_GetInstanceProfileCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_GetInstanceProfileResponse(data.GetInstanceProfileResult);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_GetLoginProfileCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_GetLoginProfileResponse(data.GetLoginProfileResult);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_GetMFADeviceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_GetMFADeviceResponse(data.GetMFADeviceResult);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_GetOpenIDConnectProviderCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_GetOpenIDConnectProviderResponse(data.GetOpenIDConnectProviderResult);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_GetOrganizationsAccessReportCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_GetOrganizationsAccessReportResponse(data.GetOrganizationsAccessReportResult);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_GetPolicyCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_GetPolicyResponse(data.GetPolicyResult);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_GetPolicyVersionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_GetPolicyVersionResponse(data.GetPolicyVersionResult);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_GetRoleCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_GetRoleResponse(data.GetRoleResult);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_GetRolePolicyCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_GetRolePolicyResponse(data.GetRolePolicyResult);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_GetSAMLProviderCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_GetSAMLProviderResponse(data.GetSAMLProviderResult);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_GetServerCertificateCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_GetServerCertificateResponse(data.GetServerCertificateResult);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_GetServiceLastAccessedDetailsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_GetServiceLastAccessedDetailsResponse(data.GetServiceLastAccessedDetailsResult);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_GetServiceLastAccessedDetailsWithEntitiesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_GetServiceLastAccessedDetailsWithEntitiesResponse(data.GetServiceLastAccessedDetailsWithEntitiesResult);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_GetServiceLinkedRoleDeletionStatusCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_GetServiceLinkedRoleDeletionStatusResponse(data.GetServiceLinkedRoleDeletionStatusResult);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_GetSSHPublicKeyCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_GetSSHPublicKeyResponse(data.GetSSHPublicKeyResult);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_GetUserCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_GetUserResponse(data.GetUserResult);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_GetUserPolicyCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_GetUserPolicyResponse(data.GetUserPolicyResult);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListAccessKeysCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_ListAccessKeysResponse(data.ListAccessKeysResult);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListAccountAliasesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_ListAccountAliasesResponse(data.ListAccountAliasesResult);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListAttachedGroupPoliciesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_ListAttachedGroupPoliciesResponse(data.ListAttachedGroupPoliciesResult);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListAttachedRolePoliciesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_ListAttachedRolePoliciesResponse(data.ListAttachedRolePoliciesResult);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListAttachedUserPoliciesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_ListAttachedUserPoliciesResponse(data.ListAttachedUserPoliciesResult);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListEntitiesForPolicyCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_ListEntitiesForPolicyResponse(data.ListEntitiesForPolicyResult);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListGroupPoliciesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_ListGroupPoliciesResponse(data.ListGroupPoliciesResult);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListGroupsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_ListGroupsResponse(data.ListGroupsResult);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListGroupsForUserCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_ListGroupsForUserResponse(data.ListGroupsForUserResult);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListInstanceProfilesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_ListInstanceProfilesResponse(data.ListInstanceProfilesResult);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListInstanceProfilesForRoleCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_ListInstanceProfilesForRoleResponse(data.ListInstanceProfilesForRoleResult);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListInstanceProfileTagsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_ListInstanceProfileTagsResponse(data.ListInstanceProfileTagsResult);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListMFADevicesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_ListMFADevicesResponse(data.ListMFADevicesResult);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListMFADeviceTagsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_ListMFADeviceTagsResponse(data.ListMFADeviceTagsResult);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListOpenIDConnectProvidersCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_ListOpenIDConnectProvidersResponse(data.ListOpenIDConnectProvidersResult);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListOpenIDConnectProviderTagsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_ListOpenIDConnectProviderTagsResponse(data.ListOpenIDConnectProviderTagsResult);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListOrganizationsFeaturesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_ListOrganizationsFeaturesResponse(data.ListOrganizationsFeaturesResult);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListPoliciesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_ListPoliciesResponse(data.ListPoliciesResult);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListPoliciesGrantingServiceAccessCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_ListPoliciesGrantingServiceAccessResponse(data.ListPoliciesGrantingServiceAccessResult);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListPolicyTagsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_ListPolicyTagsResponse(data.ListPolicyTagsResult);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListPolicyVersionsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_ListPolicyVersionsResponse(data.ListPolicyVersionsResult);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListRolePoliciesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_ListRolePoliciesResponse(data.ListRolePoliciesResult);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListRolesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_ListRolesResponse(data.ListRolesResult);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListRoleTagsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_ListRoleTagsResponse(data.ListRoleTagsResult);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListSAMLProvidersCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_ListSAMLProvidersResponse(data.ListSAMLProvidersResult);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListSAMLProviderTagsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_ListSAMLProviderTagsResponse(data.ListSAMLProviderTagsResult);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListServerCertificatesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_ListServerCertificatesResponse(data.ListServerCertificatesResult);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListServerCertificateTagsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_ListServerCertificateTagsResponse(data.ListServerCertificateTagsResult);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListServiceSpecificCredentialsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_ListServiceSpecificCredentialsResponse(data.ListServiceSpecificCredentialsResult);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListSigningCertificatesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_ListSigningCertificatesResponse(data.ListSigningCertificatesResult);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListSSHPublicKeysCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_ListSSHPublicKeysResponse(data.ListSSHPublicKeysResult);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListUserPoliciesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_ListUserPoliciesResponse(data.ListUserPoliciesResult);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListUsersCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_ListUsersResponse(data.ListUsersResult);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListUserTagsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_ListUserTagsResponse(data.ListUserTagsResult);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListVirtualMFADevicesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_ListVirtualMFADevicesResponse(data.ListVirtualMFADevicesResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_PutGroupPolicyCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await smithyClient.collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_PutRolePermissionsBoundaryCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await smithyClient.collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_PutRolePolicyCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await smithyClient.collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_PutUserPermissionsBoundaryCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await smithyClient.collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_PutUserPolicyCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await smithyClient.collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_RemoveClientIDFromOpenIDConnectProviderCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await smithyClient.collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_RemoveRoleFromInstanceProfileCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await smithyClient.collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_RemoveUserFromGroupCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await smithyClient.collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_ResetServiceSpecificCredentialCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_ResetServiceSpecificCredentialResponse(data.ResetServiceSpecificCredentialResult);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ResyncMFADeviceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await smithyClient.collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_SetDefaultPolicyVersionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await smithyClient.collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_SetSecurityTokenServicePreferencesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await smithyClient.collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_SimulateCustomPolicyCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_SimulatePolicyResponse(data.SimulateCustomPolicyResult);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_SimulatePrincipalPolicyCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_SimulatePolicyResponse(data.SimulatePrincipalPolicyResult);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_TagInstanceProfileCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await smithyClient.collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_TagMFADeviceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await smithyClient.collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_TagOpenIDConnectProviderCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await smithyClient.collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_TagPolicyCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await smithyClient.collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_TagRoleCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await smithyClient.collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_TagSAMLProviderCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await smithyClient.collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_TagServerCertificateCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await smithyClient.collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_TagUserCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await smithyClient.collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_UntagInstanceProfileCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await smithyClient.collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_UntagMFADeviceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await smithyClient.collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_UntagOpenIDConnectProviderCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await smithyClient.collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_UntagPolicyCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await smithyClient.collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_UntagRoleCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await smithyClient.collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_UntagSAMLProviderCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await smithyClient.collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_UntagServerCertificateCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await smithyClient.collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_UntagUserCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await smithyClient.collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_UpdateAccessKeyCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await smithyClient.collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_UpdateAccountPasswordPolicyCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await smithyClient.collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_UpdateAssumeRolePolicyCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await smithyClient.collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_UpdateGroupCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await smithyClient.collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_UpdateLoginProfileCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await smithyClient.collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_UpdateOpenIDConnectProviderThumbprintCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await smithyClient.collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_UpdateRoleCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_UpdateRoleResponse(data.UpdateRoleResult);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_UpdateRoleDescriptionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_UpdateRoleDescriptionResponse(data.UpdateRoleDescriptionResult);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_UpdateSAMLProviderCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_UpdateSAMLProviderResponse(data.UpdateSAMLProviderResult);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_UpdateServerCertificateCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await smithyClient.collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_UpdateServiceSpecificCredentialCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await smithyClient.collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_UpdateSigningCertificateCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await smithyClient.collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_UpdateSSHPublicKeyCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await smithyClient.collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_UpdateUserCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await smithyClient.collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_UploadServerCertificateCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_UploadServerCertificateResponse(data.UploadServerCertificateResult);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_UploadSigningCertificateCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_UploadSigningCertificateResponse(data.UploadSigningCertificateResult);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_UploadSSHPublicKeyCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_UploadSSHPublicKeyResponse(data.UploadSSHPublicKeyResult);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await core$1.parseXmlErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidInput":
        case "com.amazonaws.iam#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput);
        case "LimitExceeded":
        case "com.amazonaws.iam#LimitExceededException":
            throw await de_LimitExceededExceptionRes(parsedOutput);
        case "NoSuchEntity":
        case "com.amazonaws.iam#NoSuchEntityException":
            throw await de_NoSuchEntityExceptionRes(parsedOutput);
        case "ServiceFailure":
        case "com.amazonaws.iam#ServiceFailureException":
            throw await de_ServiceFailureExceptionRes(parsedOutput);
        case "EntityAlreadyExists":
        case "com.amazonaws.iam#EntityAlreadyExistsException":
            throw await de_EntityAlreadyExistsExceptionRes(parsedOutput);
        case "UnmodifiableEntity":
        case "com.amazonaws.iam#UnmodifiableEntityException":
            throw await de_UnmodifiableEntityExceptionRes(parsedOutput);
        case "PolicyNotAttachable":
        case "com.amazonaws.iam#PolicyNotAttachableException":
            throw await de_PolicyNotAttachableExceptionRes(parsedOutput);
        case "EntityTemporarilyUnmodifiable":
        case "com.amazonaws.iam#EntityTemporarilyUnmodifiableException":
            throw await de_EntityTemporarilyUnmodifiableExceptionRes(parsedOutput);
        case "InvalidUserType":
        case "com.amazonaws.iam#InvalidUserTypeException":
            throw await de_InvalidUserTypeExceptionRes(parsedOutput);
        case "PasswordPolicyViolation":
        case "com.amazonaws.iam#PasswordPolicyViolationException":
            throw await de_PasswordPolicyViolationExceptionRes(parsedOutput);
        case "ConcurrentModification":
        case "com.amazonaws.iam#ConcurrentModificationException":
            throw await de_ConcurrentModificationExceptionRes(parsedOutput);
        case "OpenIdIdpCommunicationError":
        case "com.amazonaws.iam#OpenIdIdpCommunicationErrorException":
            throw await de_OpenIdIdpCommunicationErrorExceptionRes(parsedOutput);
        case "MalformedPolicyDocument":
        case "com.amazonaws.iam#MalformedPolicyDocumentException":
            throw await de_MalformedPolicyDocumentExceptionRes(parsedOutput);
        case "NotSupportedService":
        case "com.amazonaws.iam#ServiceNotSupportedException":
            throw await de_ServiceNotSupportedExceptionRes(parsedOutput);
        case "DeleteConflict":
        case "com.amazonaws.iam#DeleteConflictException":
            throw await de_DeleteConflictExceptionRes(parsedOutput);
        case "AccountNotManagementOrDelegatedAdministratorException":
        case "com.amazonaws.iam#AccountNotManagementOrDelegatedAdministratorException":
            throw await de_AccountNotManagementOrDelegatedAdministratorExceptionRes(parsedOutput);
        case "OrganizationNotFoundException":
        case "com.amazonaws.iam#OrganizationNotFoundException":
            throw await de_OrganizationNotFoundExceptionRes(parsedOutput);
        case "OrganizationNotInAllFeaturesModeException":
        case "com.amazonaws.iam#OrganizationNotInAllFeaturesModeException":
            throw await de_OrganizationNotInAllFeaturesModeExceptionRes(parsedOutput);
        case "ServiceAccessNotEnabledException":
        case "com.amazonaws.iam#ServiceAccessNotEnabledException":
            throw await de_ServiceAccessNotEnabledExceptionRes(parsedOutput);
        case "InvalidAuthenticationCode":
        case "com.amazonaws.iam#InvalidAuthenticationCodeException":
            throw await de_InvalidAuthenticationCodeExceptionRes(parsedOutput);
        case "CallerIsNotManagementAccountException":
        case "com.amazonaws.iam#CallerIsNotManagementAccountException":
            throw await de_CallerIsNotManagementAccountExceptionRes(parsedOutput);
        case "ReportGenerationLimitExceeded":
        case "com.amazonaws.iam#ReportGenerationLimitExceededException":
            throw await de_ReportGenerationLimitExceededExceptionRes(parsedOutput);
        case "ReportExpired":
        case "com.amazonaws.iam#CredentialReportExpiredException":
            throw await de_CredentialReportExpiredExceptionRes(parsedOutput);
        case "ReportInProgress":
        case "com.amazonaws.iam#CredentialReportNotReadyException":
            throw await de_CredentialReportNotReadyExceptionRes(parsedOutput);
        case "ReportNotPresent":
        case "com.amazonaws.iam#CredentialReportNotPresentException":
            throw await de_CredentialReportNotPresentExceptionRes(parsedOutput);
        case "UnrecognizedPublicKeyEncoding":
        case "com.amazonaws.iam#UnrecognizedPublicKeyEncodingException":
            throw await de_UnrecognizedPublicKeyEncodingExceptionRes(parsedOutput);
        case "PolicyEvaluation":
        case "com.amazonaws.iam#PolicyEvaluationException":
            throw await de_PolicyEvaluationExceptionRes(parsedOutput);
        case "KeyPairMismatch":
        case "com.amazonaws.iam#KeyPairMismatchException":
            throw await de_KeyPairMismatchExceptionRes(parsedOutput);
        case "MalformedCertificate":
        case "com.amazonaws.iam#MalformedCertificateException":
            throw await de_MalformedCertificateExceptionRes(parsedOutput);
        case "DuplicateCertificate":
        case "com.amazonaws.iam#DuplicateCertificateException":
            throw await de_DuplicateCertificateExceptionRes(parsedOutput);
        case "InvalidCertificate":
        case "com.amazonaws.iam#InvalidCertificateException":
            throw await de_InvalidCertificateExceptionRes(parsedOutput);
        case "DuplicateSSHPublicKey":
        case "com.amazonaws.iam#DuplicateSSHPublicKeyException":
            throw await de_DuplicateSSHPublicKeyExceptionRes(parsedOutput);
        case "InvalidPublicKey":
        case "com.amazonaws.iam#InvalidPublicKeyException":
            throw await de_InvalidPublicKeyExceptionRes(parsedOutput);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                errorCode,
            });
    }
};
const de_AccountNotManagementOrDelegatedAdministratorExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_AccountNotManagementOrDelegatedAdministratorException(body.Error);
    const exception = new AccountNotManagementOrDelegatedAdministratorException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_CallerIsNotManagementAccountExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_CallerIsNotManagementAccountException(body.Error);
    const exception = new CallerIsNotManagementAccountException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_ConcurrentModificationExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_ConcurrentModificationException(body.Error);
    const exception = new ConcurrentModificationException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_CredentialReportExpiredExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_CredentialReportExpiredException(body.Error);
    const exception = new CredentialReportExpiredException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_CredentialReportNotPresentExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_CredentialReportNotPresentException(body.Error);
    const exception = new CredentialReportNotPresentException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_CredentialReportNotReadyExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_CredentialReportNotReadyException(body.Error);
    const exception = new CredentialReportNotReadyException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_DeleteConflictExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_DeleteConflictException(body.Error);
    const exception = new DeleteConflictException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_DuplicateCertificateExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_DuplicateCertificateException(body.Error);
    const exception = new DuplicateCertificateException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_DuplicateSSHPublicKeyExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_DuplicateSSHPublicKeyException(body.Error);
    const exception = new DuplicateSSHPublicKeyException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_EntityAlreadyExistsExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_EntityAlreadyExistsException(body.Error);
    const exception = new EntityAlreadyExistsException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_EntityTemporarilyUnmodifiableExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_EntityTemporarilyUnmodifiableException(body.Error);
    const exception = new EntityTemporarilyUnmodifiableException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_InvalidAuthenticationCodeExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_InvalidAuthenticationCodeException(body.Error);
    const exception = new InvalidAuthenticationCodeException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_InvalidCertificateExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_InvalidCertificateException(body.Error);
    const exception = new InvalidCertificateException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_InvalidInputExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_InvalidInputException(body.Error);
    const exception = new InvalidInputException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_InvalidPublicKeyExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_InvalidPublicKeyException(body.Error);
    const exception = new InvalidPublicKeyException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_InvalidUserTypeExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_InvalidUserTypeException(body.Error);
    const exception = new InvalidUserTypeException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_KeyPairMismatchExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_KeyPairMismatchException(body.Error);
    const exception = new KeyPairMismatchException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_LimitExceededExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_LimitExceededException(body.Error);
    const exception = new LimitExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_MalformedCertificateExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_MalformedCertificateException(body.Error);
    const exception = new MalformedCertificateException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_MalformedPolicyDocumentExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_MalformedPolicyDocumentException(body.Error);
    const exception = new MalformedPolicyDocumentException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_NoSuchEntityExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_NoSuchEntityException(body.Error);
    const exception = new NoSuchEntityException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_OpenIdIdpCommunicationErrorExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_OpenIdIdpCommunicationErrorException(body.Error);
    const exception = new OpenIdIdpCommunicationErrorException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_OrganizationNotFoundExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_OrganizationNotFoundException(body.Error);
    const exception = new OrganizationNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_OrganizationNotInAllFeaturesModeExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_OrganizationNotInAllFeaturesModeException(body.Error);
    const exception = new OrganizationNotInAllFeaturesModeException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_PasswordPolicyViolationExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_PasswordPolicyViolationException(body.Error);
    const exception = new PasswordPolicyViolationException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_PolicyEvaluationExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_PolicyEvaluationException(body.Error);
    const exception = new PolicyEvaluationException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_PolicyNotAttachableExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_PolicyNotAttachableException(body.Error);
    const exception = new PolicyNotAttachableException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_ReportGenerationLimitExceededExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_ReportGenerationLimitExceededException(body.Error);
    const exception = new ReportGenerationLimitExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_ServiceAccessNotEnabledExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_ServiceAccessNotEnabledException(body.Error);
    const exception = new ServiceAccessNotEnabledException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_ServiceFailureExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_ServiceFailureException(body.Error);
    const exception = new ServiceFailureException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_ServiceNotSupportedExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_ServiceNotSupportedException(body.Error);
    const exception = new ServiceNotSupportedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_UnmodifiableEntityExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_UnmodifiableEntityException(body.Error);
    const exception = new UnmodifiableEntityException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_UnrecognizedPublicKeyEncodingExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_UnrecognizedPublicKeyEncodingException(body.Error);
    const exception = new UnrecognizedPublicKeyEncodingException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const se_ActionNameListType = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`member.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_AddClientIDToOpenIDConnectProviderRequest = (input, context) => {
    const entries = {};
    if (input[_OIDCPA] != null) {
        entries[_OIDCPA] = input[_OIDCPA];
    }
    if (input[_CID] != null) {
        entries[_CID] = input[_CID];
    }
    return entries;
};
const se_AddRoleToInstanceProfileRequest = (input, context) => {
    const entries = {};
    if (input[_IPN] != null) {
        entries[_IPN] = input[_IPN];
    }
    if (input[_RN] != null) {
        entries[_RN] = input[_RN];
    }
    return entries;
};
const se_AddUserToGroupRequest = (input, context) => {
    const entries = {};
    if (input[_GN] != null) {
        entries[_GN] = input[_GN];
    }
    if (input[_UN] != null) {
        entries[_UN] = input[_UN];
    }
    return entries;
};
const se_AttachGroupPolicyRequest = (input, context) => {
    const entries = {};
    if (input[_GN] != null) {
        entries[_GN] = input[_GN];
    }
    if (input[_PA] != null) {
        entries[_PA] = input[_PA];
    }
    return entries;
};
const se_AttachRolePolicyRequest = (input, context) => {
    const entries = {};
    if (input[_RN] != null) {
        entries[_RN] = input[_RN];
    }
    if (input[_PA] != null) {
        entries[_PA] = input[_PA];
    }
    return entries;
};
const se_AttachUserPolicyRequest = (input, context) => {
    const entries = {};
    if (input[_UN] != null) {
        entries[_UN] = input[_UN];
    }
    if (input[_PA] != null) {
        entries[_PA] = input[_PA];
    }
    return entries;
};
const se_ChangePasswordRequest = (input, context) => {
    const entries = {};
    if (input[_OP] != null) {
        entries[_OP] = input[_OP];
    }
    if (input[_NP] != null) {
        entries[_NP] = input[_NP];
    }
    return entries;
};
const se_clientIDListType = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`member.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_ContextEntry = (input, context) => {
    const entries = {};
    if (input[_CKN] != null) {
        entries[_CKN] = input[_CKN];
    }
    if (input[_CKV] != null) {
        const memberEntries = se_ContextKeyValueListType(input[_CKV]);
        if (input[_CKV]?.length === 0) {
            entries.ContextKeyValues = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ContextKeyValues.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_CKT] != null) {
        entries[_CKT] = input[_CKT];
    }
    return entries;
};
const se_ContextEntryListType = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = se_ContextEntry(entry);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`member.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const se_ContextKeyValueListType = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`member.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_CreateAccessKeyRequest = (input, context) => {
    const entries = {};
    if (input[_UN] != null) {
        entries[_UN] = input[_UN];
    }
    return entries;
};
const se_CreateAccountAliasRequest = (input, context) => {
    const entries = {};
    if (input[_AA] != null) {
        entries[_AA] = input[_AA];
    }
    return entries;
};
const se_CreateGroupRequest = (input, context) => {
    const entries = {};
    if (input[_P] != null) {
        entries[_P] = input[_P];
    }
    if (input[_GN] != null) {
        entries[_GN] = input[_GN];
    }
    return entries;
};
const se_CreateInstanceProfileRequest = (input, context) => {
    const entries = {};
    if (input[_IPN] != null) {
        entries[_IPN] = input[_IPN];
    }
    if (input[_P] != null) {
        entries[_P] = input[_P];
    }
    if (input[_T] != null) {
        const memberEntries = se_tagListType(input[_T]);
        if (input[_T]?.length === 0) {
            entries.Tags = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Tags.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_CreateLoginProfileRequest = (input, context) => {
    const entries = {};
    if (input[_UN] != null) {
        entries[_UN] = input[_UN];
    }
    if (input[_Pa] != null) {
        entries[_Pa] = input[_Pa];
    }
    if (input[_PRR] != null) {
        entries[_PRR] = input[_PRR];
    }
    return entries;
};
const se_CreateOpenIDConnectProviderRequest = (input, context) => {
    const entries = {};
    if (input[_U] != null) {
        entries[_U] = input[_U];
    }
    if (input[_CIDL] != null) {
        const memberEntries = se_clientIDListType(input[_CIDL]);
        if (input[_CIDL]?.length === 0) {
            entries.ClientIDList = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ClientIDList.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_TL] != null) {
        const memberEntries = se_thumbprintListType(input[_TL]);
        if (input[_TL]?.length === 0) {
            entries.ThumbprintList = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ThumbprintList.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_T] != null) {
        const memberEntries = se_tagListType(input[_T]);
        if (input[_T]?.length === 0) {
            entries.Tags = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Tags.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_CreatePolicyRequest = (input, context) => {
    const entries = {};
    if (input[_PN] != null) {
        entries[_PN] = input[_PN];
    }
    if (input[_P] != null) {
        entries[_P] = input[_P];
    }
    if (input[_PD] != null) {
        entries[_PD] = input[_PD];
    }
    if (input[_D] != null) {
        entries[_D] = input[_D];
    }
    if (input[_T] != null) {
        const memberEntries = se_tagListType(input[_T]);
        if (input[_T]?.length === 0) {
            entries.Tags = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Tags.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_CreatePolicyVersionRequest = (input, context) => {
    const entries = {};
    if (input[_PA] != null) {
        entries[_PA] = input[_PA];
    }
    if (input[_PD] != null) {
        entries[_PD] = input[_PD];
    }
    if (input[_SAD] != null) {
        entries[_SAD] = input[_SAD];
    }
    return entries;
};
const se_CreateRoleRequest = (input, context) => {
    const entries = {};
    if (input[_P] != null) {
        entries[_P] = input[_P];
    }
    if (input[_RN] != null) {
        entries[_RN] = input[_RN];
    }
    if (input[_ARPD] != null) {
        entries[_ARPD] = input[_ARPD];
    }
    if (input[_D] != null) {
        entries[_D] = input[_D];
    }
    if (input[_MSD] != null) {
        entries[_MSD] = input[_MSD];
    }
    if (input[_PB] != null) {
        entries[_PB] = input[_PB];
    }
    if (input[_T] != null) {
        const memberEntries = se_tagListType(input[_T]);
        if (input[_T]?.length === 0) {
            entries.Tags = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Tags.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_CreateSAMLProviderRequest = (input, context) => {
    const entries = {};
    if (input[_SAMLMD] != null) {
        entries[_SAMLMD] = input[_SAMLMD];
    }
    if (input[_N] != null) {
        entries[_N] = input[_N];
    }
    if (input[_T] != null) {
        const memberEntries = se_tagListType(input[_T]);
        if (input[_T]?.length === 0) {
            entries.Tags = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Tags.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_AEM] != null) {
        entries[_AEM] = input[_AEM];
    }
    if (input[_APK] != null) {
        entries[_APK] = input[_APK];
    }
    return entries;
};
const se_CreateServiceLinkedRoleRequest = (input, context) => {
    const entries = {};
    if (input[_AWSSN] != null) {
        entries[_AWSSN] = input[_AWSSN];
    }
    if (input[_D] != null) {
        entries[_D] = input[_D];
    }
    if (input[_CS] != null) {
        entries[_CS] = input[_CS];
    }
    return entries;
};
const se_CreateServiceSpecificCredentialRequest = (input, context) => {
    const entries = {};
    if (input[_UN] != null) {
        entries[_UN] = input[_UN];
    }
    if (input[_SN] != null) {
        entries[_SN] = input[_SN];
    }
    if (input[_CAD] != null) {
        entries[_CAD] = input[_CAD];
    }
    return entries;
};
const se_CreateUserRequest = (input, context) => {
    const entries = {};
    if (input[_P] != null) {
        entries[_P] = input[_P];
    }
    if (input[_UN] != null) {
        entries[_UN] = input[_UN];
    }
    if (input[_PB] != null) {
        entries[_PB] = input[_PB];
    }
    if (input[_T] != null) {
        const memberEntries = se_tagListType(input[_T]);
        if (input[_T]?.length === 0) {
            entries.Tags = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Tags.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_CreateVirtualMFADeviceRequest = (input, context) => {
    const entries = {};
    if (input[_P] != null) {
        entries[_P] = input[_P];
    }
    if (input[_VMFADN] != null) {
        entries[_VMFADN] = input[_VMFADN];
    }
    if (input[_T] != null) {
        const memberEntries = se_tagListType(input[_T]);
        if (input[_T]?.length === 0) {
            entries.Tags = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Tags.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_DeactivateMFADeviceRequest = (input, context) => {
    const entries = {};
    if (input[_UN] != null) {
        entries[_UN] = input[_UN];
    }
    if (input[_SNe] != null) {
        entries[_SNe] = input[_SNe];
    }
    return entries;
};
const se_DeleteAccessKeyRequest = (input, context) => {
    const entries = {};
    if (input[_UN] != null) {
        entries[_UN] = input[_UN];
    }
    if (input[_AKI] != null) {
        entries[_AKI] = input[_AKI];
    }
    return entries;
};
const se_DeleteAccountAliasRequest = (input, context) => {
    const entries = {};
    if (input[_AA] != null) {
        entries[_AA] = input[_AA];
    }
    return entries;
};
const se_DeleteGroupPolicyRequest = (input, context) => {
    const entries = {};
    if (input[_GN] != null) {
        entries[_GN] = input[_GN];
    }
    if (input[_PN] != null) {
        entries[_PN] = input[_PN];
    }
    return entries;
};
const se_DeleteGroupRequest = (input, context) => {
    const entries = {};
    if (input[_GN] != null) {
        entries[_GN] = input[_GN];
    }
    return entries;
};
const se_DeleteInstanceProfileRequest = (input, context) => {
    const entries = {};
    if (input[_IPN] != null) {
        entries[_IPN] = input[_IPN];
    }
    return entries;
};
const se_DeleteLoginProfileRequest = (input, context) => {
    const entries = {};
    if (input[_UN] != null) {
        entries[_UN] = input[_UN];
    }
    return entries;
};
const se_DeleteOpenIDConnectProviderRequest = (input, context) => {
    const entries = {};
    if (input[_OIDCPA] != null) {
        entries[_OIDCPA] = input[_OIDCPA];
    }
    return entries;
};
const se_DeletePolicyRequest = (input, context) => {
    const entries = {};
    if (input[_PA] != null) {
        entries[_PA] = input[_PA];
    }
    return entries;
};
const se_DeletePolicyVersionRequest = (input, context) => {
    const entries = {};
    if (input[_PA] != null) {
        entries[_PA] = input[_PA];
    }
    if (input[_VI] != null) {
        entries[_VI] = input[_VI];
    }
    return entries;
};
const se_DeleteRolePermissionsBoundaryRequest = (input, context) => {
    const entries = {};
    if (input[_RN] != null) {
        entries[_RN] = input[_RN];
    }
    return entries;
};
const se_DeleteRolePolicyRequest = (input, context) => {
    const entries = {};
    if (input[_RN] != null) {
        entries[_RN] = input[_RN];
    }
    if (input[_PN] != null) {
        entries[_PN] = input[_PN];
    }
    return entries;
};
const se_DeleteRoleRequest = (input, context) => {
    const entries = {};
    if (input[_RN] != null) {
        entries[_RN] = input[_RN];
    }
    return entries;
};
const se_DeleteSAMLProviderRequest = (input, context) => {
    const entries = {};
    if (input[_SAMLPA] != null) {
        entries[_SAMLPA] = input[_SAMLPA];
    }
    return entries;
};
const se_DeleteServerCertificateRequest = (input, context) => {
    const entries = {};
    if (input[_SCN] != null) {
        entries[_SCN] = input[_SCN];
    }
    return entries;
};
const se_DeleteServiceLinkedRoleRequest = (input, context) => {
    const entries = {};
    if (input[_RN] != null) {
        entries[_RN] = input[_RN];
    }
    return entries;
};
const se_DeleteServiceSpecificCredentialRequest = (input, context) => {
    const entries = {};
    if (input[_UN] != null) {
        entries[_UN] = input[_UN];
    }
    if (input[_SSCI] != null) {
        entries[_SSCI] = input[_SSCI];
    }
    return entries;
};
const se_DeleteSigningCertificateRequest = (input, context) => {
    const entries = {};
    if (input[_UN] != null) {
        entries[_UN] = input[_UN];
    }
    if (input[_CI] != null) {
        entries[_CI] = input[_CI];
    }
    return entries;
};
const se_DeleteSSHPublicKeyRequest = (input, context) => {
    const entries = {};
    if (input[_UN] != null) {
        entries[_UN] = input[_UN];
    }
    if (input[_SSHPKI] != null) {
        entries[_SSHPKI] = input[_SSHPKI];
    }
    return entries;
};
const se_DeleteUserPermissionsBoundaryRequest = (input, context) => {
    const entries = {};
    if (input[_UN] != null) {
        entries[_UN] = input[_UN];
    }
    return entries;
};
const se_DeleteUserPolicyRequest = (input, context) => {
    const entries = {};
    if (input[_UN] != null) {
        entries[_UN] = input[_UN];
    }
    if (input[_PN] != null) {
        entries[_PN] = input[_PN];
    }
    return entries;
};
const se_DeleteUserRequest = (input, context) => {
    const entries = {};
    if (input[_UN] != null) {
        entries[_UN] = input[_UN];
    }
    return entries;
};
const se_DeleteVirtualMFADeviceRequest = (input, context) => {
    const entries = {};
    if (input[_SNe] != null) {
        entries[_SNe] = input[_SNe];
    }
    return entries;
};
const se_DetachGroupPolicyRequest = (input, context) => {
    const entries = {};
    if (input[_GN] != null) {
        entries[_GN] = input[_GN];
    }
    if (input[_PA] != null) {
        entries[_PA] = input[_PA];
    }
    return entries;
};
const se_DetachRolePolicyRequest = (input, context) => {
    const entries = {};
    if (input[_RN] != null) {
        entries[_RN] = input[_RN];
    }
    if (input[_PA] != null) {
        entries[_PA] = input[_PA];
    }
    return entries;
};
const se_DetachUserPolicyRequest = (input, context) => {
    const entries = {};
    if (input[_UN] != null) {
        entries[_UN] = input[_UN];
    }
    if (input[_PA] != null) {
        entries[_PA] = input[_PA];
    }
    return entries;
};
const se_DisableOrganizationsRootCredentialsManagementRequest = (input, context) => {
    const entries = {};
    return entries;
};
const se_DisableOrganizationsRootSessionsRequest = (input, context) => {
    const entries = {};
    return entries;
};
const se_EnableMFADeviceRequest = (input, context) => {
    const entries = {};
    if (input[_UN] != null) {
        entries[_UN] = input[_UN];
    }
    if (input[_SNe] != null) {
        entries[_SNe] = input[_SNe];
    }
    if (input[_AC] != null) {
        entries[_AC] = input[_AC];
    }
    if (input[_ACu] != null) {
        entries[_ACu] = input[_ACu];
    }
    return entries;
};
const se_EnableOrganizationsRootCredentialsManagementRequest = (input, context) => {
    const entries = {};
    return entries;
};
const se_EnableOrganizationsRootSessionsRequest = (input, context) => {
    const entries = {};
    return entries;
};
const se_entityListType = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`member.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_GenerateOrganizationsAccessReportRequest = (input, context) => {
    const entries = {};
    if (input[_EP] != null) {
        entries[_EP] = input[_EP];
    }
    if (input[_OPI] != null) {
        entries[_OPI] = input[_OPI];
    }
    return entries;
};
const se_GenerateServiceLastAccessedDetailsRequest = (input, context) => {
    const entries = {};
    if (input[_Ar] != null) {
        entries[_Ar] = input[_Ar];
    }
    if (input[_G] != null) {
        entries[_G] = input[_G];
    }
    return entries;
};
const se_GetAccessKeyLastUsedRequest = (input, context) => {
    const entries = {};
    if (input[_AKI] != null) {
        entries[_AKI] = input[_AKI];
    }
    return entries;
};
const se_GetAccountAuthorizationDetailsRequest = (input, context) => {
    const entries = {};
    if (input[_F] != null) {
        const memberEntries = se_entityListType(input[_F]);
        if (input[_F]?.length === 0) {
            entries.Filter = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_MI] != null) {
        entries[_MI] = input[_MI];
    }
    if (input[_M] != null) {
        entries[_M] = input[_M];
    }
    return entries;
};
const se_GetContextKeysForCustomPolicyRequest = (input, context) => {
    const entries = {};
    if (input[_PIL] != null) {
        const memberEntries = se_SimulationPolicyListType(input[_PIL]);
        if (input[_PIL]?.length === 0) {
            entries.PolicyInputList = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `PolicyInputList.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_GetContextKeysForPrincipalPolicyRequest = (input, context) => {
    const entries = {};
    if (input[_PSA] != null) {
        entries[_PSA] = input[_PSA];
    }
    if (input[_PIL] != null) {
        const memberEntries = se_SimulationPolicyListType(input[_PIL]);
        if (input[_PIL]?.length === 0) {
            entries.PolicyInputList = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `PolicyInputList.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_GetGroupPolicyRequest = (input, context) => {
    const entries = {};
    if (input[_GN] != null) {
        entries[_GN] = input[_GN];
    }
    if (input[_PN] != null) {
        entries[_PN] = input[_PN];
    }
    return entries;
};
const se_GetGroupRequest = (input, context) => {
    const entries = {};
    if (input[_GN] != null) {
        entries[_GN] = input[_GN];
    }
    if (input[_M] != null) {
        entries[_M] = input[_M];
    }
    if (input[_MI] != null) {
        entries[_MI] = input[_MI];
    }
    return entries;
};
const se_GetInstanceProfileRequest = (input, context) => {
    const entries = {};
    if (input[_IPN] != null) {
        entries[_IPN] = input[_IPN];
    }
    return entries;
};
const se_GetLoginProfileRequest = (input, context) => {
    const entries = {};
    if (input[_UN] != null) {
        entries[_UN] = input[_UN];
    }
    return entries;
};
const se_GetMFADeviceRequest = (input, context) => {
    const entries = {};
    if (input[_SNe] != null) {
        entries[_SNe] = input[_SNe];
    }
    if (input[_UN] != null) {
        entries[_UN] = input[_UN];
    }
    return entries;
};
const se_GetOpenIDConnectProviderRequest = (input, context) => {
    const entries = {};
    if (input[_OIDCPA] != null) {
        entries[_OIDCPA] = input[_OIDCPA];
    }
    return entries;
};
const se_GetOrganizationsAccessReportRequest = (input, context) => {
    const entries = {};
    if (input[_JI] != null) {
        entries[_JI] = input[_JI];
    }
    if (input[_MI] != null) {
        entries[_MI] = input[_MI];
    }
    if (input[_M] != null) {
        entries[_M] = input[_M];
    }
    if (input[_SK] != null) {
        entries[_SK] = input[_SK];
    }
    return entries;
};
const se_GetPolicyRequest = (input, context) => {
    const entries = {};
    if (input[_PA] != null) {
        entries[_PA] = input[_PA];
    }
    return entries;
};
const se_GetPolicyVersionRequest = (input, context) => {
    const entries = {};
    if (input[_PA] != null) {
        entries[_PA] = input[_PA];
    }
    if (input[_VI] != null) {
        entries[_VI] = input[_VI];
    }
    return entries;
};
const se_GetRolePolicyRequest = (input, context) => {
    const entries = {};
    if (input[_RN] != null) {
        entries[_RN] = input[_RN];
    }
    if (input[_PN] != null) {
        entries[_PN] = input[_PN];
    }
    return entries;
};
const se_GetRoleRequest = (input, context) => {
    const entries = {};
    if (input[_RN] != null) {
        entries[_RN] = input[_RN];
    }
    return entries;
};
const se_GetSAMLProviderRequest = (input, context) => {
    const entries = {};
    if (input[_SAMLPA] != null) {
        entries[_SAMLPA] = input[_SAMLPA];
    }
    return entries;
};
const se_GetServerCertificateRequest = (input, context) => {
    const entries = {};
    if (input[_SCN] != null) {
        entries[_SCN] = input[_SCN];
    }
    return entries;
};
const se_GetServiceLastAccessedDetailsRequest = (input, context) => {
    const entries = {};
    if (input[_JI] != null) {
        entries[_JI] = input[_JI];
    }
    if (input[_MI] != null) {
        entries[_MI] = input[_MI];
    }
    if (input[_M] != null) {
        entries[_M] = input[_M];
    }
    return entries;
};
const se_GetServiceLastAccessedDetailsWithEntitiesRequest = (input, context) => {
    const entries = {};
    if (input[_JI] != null) {
        entries[_JI] = input[_JI];
    }
    if (input[_SNer] != null) {
        entries[_SNer] = input[_SNer];
    }
    if (input[_MI] != null) {
        entries[_MI] = input[_MI];
    }
    if (input[_M] != null) {
        entries[_M] = input[_M];
    }
    return entries;
};
const se_GetServiceLinkedRoleDeletionStatusRequest = (input, context) => {
    const entries = {};
    if (input[_DTI] != null) {
        entries[_DTI] = input[_DTI];
    }
    return entries;
};
const se_GetSSHPublicKeyRequest = (input, context) => {
    const entries = {};
    if (input[_UN] != null) {
        entries[_UN] = input[_UN];
    }
    if (input[_SSHPKI] != null) {
        entries[_SSHPKI] = input[_SSHPKI];
    }
    if (input[_E] != null) {
        entries[_E] = input[_E];
    }
    return entries;
};
const se_GetUserPolicyRequest = (input, context) => {
    const entries = {};
    if (input[_UN] != null) {
        entries[_UN] = input[_UN];
    }
    if (input[_PN] != null) {
        entries[_PN] = input[_PN];
    }
    return entries;
};
const se_GetUserRequest = (input, context) => {
    const entries = {};
    if (input[_UN] != null) {
        entries[_UN] = input[_UN];
    }
    return entries;
};
const se_ListAccessKeysRequest = (input, context) => {
    const entries = {};
    if (input[_UN] != null) {
        entries[_UN] = input[_UN];
    }
    if (input[_M] != null) {
        entries[_M] = input[_M];
    }
    if (input[_MI] != null) {
        entries[_MI] = input[_MI];
    }
    return entries;
};
const se_ListAccountAliasesRequest = (input, context) => {
    const entries = {};
    if (input[_M] != null) {
        entries[_M] = input[_M];
    }
    if (input[_MI] != null) {
        entries[_MI] = input[_MI];
    }
    return entries;
};
const se_ListAttachedGroupPoliciesRequest = (input, context) => {
    const entries = {};
    if (input[_GN] != null) {
        entries[_GN] = input[_GN];
    }
    if (input[_PP] != null) {
        entries[_PP] = input[_PP];
    }
    if (input[_M] != null) {
        entries[_M] = input[_M];
    }
    if (input[_MI] != null) {
        entries[_MI] = input[_MI];
    }
    return entries;
};
const se_ListAttachedRolePoliciesRequest = (input, context) => {
    const entries = {};
    if (input[_RN] != null) {
        entries[_RN] = input[_RN];
    }
    if (input[_PP] != null) {
        entries[_PP] = input[_PP];
    }
    if (input[_M] != null) {
        entries[_M] = input[_M];
    }
    if (input[_MI] != null) {
        entries[_MI] = input[_MI];
    }
    return entries;
};
const se_ListAttachedUserPoliciesRequest = (input, context) => {
    const entries = {};
    if (input[_UN] != null) {
        entries[_UN] = input[_UN];
    }
    if (input[_PP] != null) {
        entries[_PP] = input[_PP];
    }
    if (input[_M] != null) {
        entries[_M] = input[_M];
    }
    if (input[_MI] != null) {
        entries[_MI] = input[_MI];
    }
    return entries;
};
const se_ListEntitiesForPolicyRequest = (input, context) => {
    const entries = {};
    if (input[_PA] != null) {
        entries[_PA] = input[_PA];
    }
    if (input[_EF] != null) {
        entries[_EF] = input[_EF];
    }
    if (input[_PP] != null) {
        entries[_PP] = input[_PP];
    }
    if (input[_PUF] != null) {
        entries[_PUF] = input[_PUF];
    }
    if (input[_M] != null) {
        entries[_M] = input[_M];
    }
    if (input[_MI] != null) {
        entries[_MI] = input[_MI];
    }
    return entries;
};
const se_ListGroupPoliciesRequest = (input, context) => {
    const entries = {};
    if (input[_GN] != null) {
        entries[_GN] = input[_GN];
    }
    if (input[_M] != null) {
        entries[_M] = input[_M];
    }
    if (input[_MI] != null) {
        entries[_MI] = input[_MI];
    }
    return entries;
};
const se_ListGroupsForUserRequest = (input, context) => {
    const entries = {};
    if (input[_UN] != null) {
        entries[_UN] = input[_UN];
    }
    if (input[_M] != null) {
        entries[_M] = input[_M];
    }
    if (input[_MI] != null) {
        entries[_MI] = input[_MI];
    }
    return entries;
};
const se_ListGroupsRequest = (input, context) => {
    const entries = {};
    if (input[_PP] != null) {
        entries[_PP] = input[_PP];
    }
    if (input[_M] != null) {
        entries[_M] = input[_M];
    }
    if (input[_MI] != null) {
        entries[_MI] = input[_MI];
    }
    return entries;
};
const se_ListInstanceProfilesForRoleRequest = (input, context) => {
    const entries = {};
    if (input[_RN] != null) {
        entries[_RN] = input[_RN];
    }
    if (input[_M] != null) {
        entries[_M] = input[_M];
    }
    if (input[_MI] != null) {
        entries[_MI] = input[_MI];
    }
    return entries;
};
const se_ListInstanceProfilesRequest = (input, context) => {
    const entries = {};
    if (input[_PP] != null) {
        entries[_PP] = input[_PP];
    }
    if (input[_M] != null) {
        entries[_M] = input[_M];
    }
    if (input[_MI] != null) {
        entries[_MI] = input[_MI];
    }
    return entries;
};
const se_ListInstanceProfileTagsRequest = (input, context) => {
    const entries = {};
    if (input[_IPN] != null) {
        entries[_IPN] = input[_IPN];
    }
    if (input[_M] != null) {
        entries[_M] = input[_M];
    }
    if (input[_MI] != null) {
        entries[_MI] = input[_MI];
    }
    return entries;
};
const se_ListMFADevicesRequest = (input, context) => {
    const entries = {};
    if (input[_UN] != null) {
        entries[_UN] = input[_UN];
    }
    if (input[_M] != null) {
        entries[_M] = input[_M];
    }
    if (input[_MI] != null) {
        entries[_MI] = input[_MI];
    }
    return entries;
};
const se_ListMFADeviceTagsRequest = (input, context) => {
    const entries = {};
    if (input[_SNe] != null) {
        entries[_SNe] = input[_SNe];
    }
    if (input[_M] != null) {
        entries[_M] = input[_M];
    }
    if (input[_MI] != null) {
        entries[_MI] = input[_MI];
    }
    return entries;
};
const se_ListOpenIDConnectProvidersRequest = (input, context) => {
    const entries = {};
    return entries;
};
const se_ListOpenIDConnectProviderTagsRequest = (input, context) => {
    const entries = {};
    if (input[_OIDCPA] != null) {
        entries[_OIDCPA] = input[_OIDCPA];
    }
    if (input[_M] != null) {
        entries[_M] = input[_M];
    }
    if (input[_MI] != null) {
        entries[_MI] = input[_MI];
    }
    return entries;
};
const se_ListOrganizationsFeaturesRequest = (input, context) => {
    const entries = {};
    return entries;
};
const se_ListPoliciesGrantingServiceAccessRequest = (input, context) => {
    const entries = {};
    if (input[_M] != null) {
        entries[_M] = input[_M];
    }
    if (input[_Ar] != null) {
        entries[_Ar] = input[_Ar];
    }
    if (input[_SNerv] != null) {
        const memberEntries = se_serviceNamespaceListType(input[_SNerv]);
        if (input[_SNerv]?.length === 0) {
            entries.ServiceNamespaces = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ServiceNamespaces.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_ListPoliciesRequest = (input, context) => {
    const entries = {};
    if (input[_S] != null) {
        entries[_S] = input[_S];
    }
    if (input[_OA] != null) {
        entries[_OA] = input[_OA];
    }
    if (input[_PP] != null) {
        entries[_PP] = input[_PP];
    }
    if (input[_PUF] != null) {
        entries[_PUF] = input[_PUF];
    }
    if (input[_M] != null) {
        entries[_M] = input[_M];
    }
    if (input[_MI] != null) {
        entries[_MI] = input[_MI];
    }
    return entries;
};
const se_ListPolicyTagsRequest = (input, context) => {
    const entries = {};
    if (input[_PA] != null) {
        entries[_PA] = input[_PA];
    }
    if (input[_M] != null) {
        entries[_M] = input[_M];
    }
    if (input[_MI] != null) {
        entries[_MI] = input[_MI];
    }
    return entries;
};
const se_ListPolicyVersionsRequest = (input, context) => {
    const entries = {};
    if (input[_PA] != null) {
        entries[_PA] = input[_PA];
    }
    if (input[_M] != null) {
        entries[_M] = input[_M];
    }
    if (input[_MI] != null) {
        entries[_MI] = input[_MI];
    }
    return entries;
};
const se_ListRolePoliciesRequest = (input, context) => {
    const entries = {};
    if (input[_RN] != null) {
        entries[_RN] = input[_RN];
    }
    if (input[_M] != null) {
        entries[_M] = input[_M];
    }
    if (input[_MI] != null) {
        entries[_MI] = input[_MI];
    }
    return entries;
};
const se_ListRolesRequest = (input, context) => {
    const entries = {};
    if (input[_PP] != null) {
        entries[_PP] = input[_PP];
    }
    if (input[_M] != null) {
        entries[_M] = input[_M];
    }
    if (input[_MI] != null) {
        entries[_MI] = input[_MI];
    }
    return entries;
};
const se_ListRoleTagsRequest = (input, context) => {
    const entries = {};
    if (input[_RN] != null) {
        entries[_RN] = input[_RN];
    }
    if (input[_M] != null) {
        entries[_M] = input[_M];
    }
    if (input[_MI] != null) {
        entries[_MI] = input[_MI];
    }
    return entries;
};
const se_ListSAMLProvidersRequest = (input, context) => {
    const entries = {};
    return entries;
};
const se_ListSAMLProviderTagsRequest = (input, context) => {
    const entries = {};
    if (input[_SAMLPA] != null) {
        entries[_SAMLPA] = input[_SAMLPA];
    }
    if (input[_M] != null) {
        entries[_M] = input[_M];
    }
    if (input[_MI] != null) {
        entries[_MI] = input[_MI];
    }
    return entries;
};
const se_ListServerCertificatesRequest = (input, context) => {
    const entries = {};
    if (input[_PP] != null) {
        entries[_PP] = input[_PP];
    }
    if (input[_M] != null) {
        entries[_M] = input[_M];
    }
    if (input[_MI] != null) {
        entries[_MI] = input[_MI];
    }
    return entries;
};
const se_ListServerCertificateTagsRequest = (input, context) => {
    const entries = {};
    if (input[_SCN] != null) {
        entries[_SCN] = input[_SCN];
    }
    if (input[_M] != null) {
        entries[_M] = input[_M];
    }
    if (input[_MI] != null) {
        entries[_MI] = input[_MI];
    }
    return entries;
};
const se_ListServiceSpecificCredentialsRequest = (input, context) => {
    const entries = {};
    if (input[_UN] != null) {
        entries[_UN] = input[_UN];
    }
    if (input[_SN] != null) {
        entries[_SN] = input[_SN];
    }
    if (input[_AU] != null) {
        entries[_AU] = input[_AU];
    }
    if (input[_M] != null) {
        entries[_M] = input[_M];
    }
    if (input[_MI] != null) {
        entries[_MI] = input[_MI];
    }
    return entries;
};
const se_ListSigningCertificatesRequest = (input, context) => {
    const entries = {};
    if (input[_UN] != null) {
        entries[_UN] = input[_UN];
    }
    if (input[_M] != null) {
        entries[_M] = input[_M];
    }
    if (input[_MI] != null) {
        entries[_MI] = input[_MI];
    }
    return entries;
};
const se_ListSSHPublicKeysRequest = (input, context) => {
    const entries = {};
    if (input[_UN] != null) {
        entries[_UN] = input[_UN];
    }
    if (input[_M] != null) {
        entries[_M] = input[_M];
    }
    if (input[_MI] != null) {
        entries[_MI] = input[_MI];
    }
    return entries;
};
const se_ListUserPoliciesRequest = (input, context) => {
    const entries = {};
    if (input[_UN] != null) {
        entries[_UN] = input[_UN];
    }
    if (input[_M] != null) {
        entries[_M] = input[_M];
    }
    if (input[_MI] != null) {
        entries[_MI] = input[_MI];
    }
    return entries;
};
const se_ListUsersRequest = (input, context) => {
    const entries = {};
    if (input[_PP] != null) {
        entries[_PP] = input[_PP];
    }
    if (input[_M] != null) {
        entries[_M] = input[_M];
    }
    if (input[_MI] != null) {
        entries[_MI] = input[_MI];
    }
    return entries;
};
const se_ListUserTagsRequest = (input, context) => {
    const entries = {};
    if (input[_UN] != null) {
        entries[_UN] = input[_UN];
    }
    if (input[_M] != null) {
        entries[_M] = input[_M];
    }
    if (input[_MI] != null) {
        entries[_MI] = input[_MI];
    }
    return entries;
};
const se_ListVirtualMFADevicesRequest = (input, context) => {
    const entries = {};
    if (input[_AS] != null) {
        entries[_AS] = input[_AS];
    }
    if (input[_M] != null) {
        entries[_M] = input[_M];
    }
    if (input[_MI] != null) {
        entries[_MI] = input[_MI];
    }
    return entries;
};
const se_PutGroupPolicyRequest = (input, context) => {
    const entries = {};
    if (input[_GN] != null) {
        entries[_GN] = input[_GN];
    }
    if (input[_PN] != null) {
        entries[_PN] = input[_PN];
    }
    if (input[_PD] != null) {
        entries[_PD] = input[_PD];
    }
    return entries;
};
const se_PutRolePermissionsBoundaryRequest = (input, context) => {
    const entries = {};
    if (input[_RN] != null) {
        entries[_RN] = input[_RN];
    }
    if (input[_PB] != null) {
        entries[_PB] = input[_PB];
    }
    return entries;
};
const se_PutRolePolicyRequest = (input, context) => {
    const entries = {};
    if (input[_RN] != null) {
        entries[_RN] = input[_RN];
    }
    if (input[_PN] != null) {
        entries[_PN] = input[_PN];
    }
    if (input[_PD] != null) {
        entries[_PD] = input[_PD];
    }
    return entries;
};
const se_PutUserPermissionsBoundaryRequest = (input, context) => {
    const entries = {};
    if (input[_UN] != null) {
        entries[_UN] = input[_UN];
    }
    if (input[_PB] != null) {
        entries[_PB] = input[_PB];
    }
    return entries;
};
const se_PutUserPolicyRequest = (input, context) => {
    const entries = {};
    if (input[_UN] != null) {
        entries[_UN] = input[_UN];
    }
    if (input[_PN] != null) {
        entries[_PN] = input[_PN];
    }
    if (input[_PD] != null) {
        entries[_PD] = input[_PD];
    }
    return entries;
};
const se_RemoveClientIDFromOpenIDConnectProviderRequest = (input, context) => {
    const entries = {};
    if (input[_OIDCPA] != null) {
        entries[_OIDCPA] = input[_OIDCPA];
    }
    if (input[_CID] != null) {
        entries[_CID] = input[_CID];
    }
    return entries;
};
const se_RemoveRoleFromInstanceProfileRequest = (input, context) => {
    const entries = {};
    if (input[_IPN] != null) {
        entries[_IPN] = input[_IPN];
    }
    if (input[_RN] != null) {
        entries[_RN] = input[_RN];
    }
    return entries;
};
const se_RemoveUserFromGroupRequest = (input, context) => {
    const entries = {};
    if (input[_GN] != null) {
        entries[_GN] = input[_GN];
    }
    if (input[_UN] != null) {
        entries[_UN] = input[_UN];
    }
    return entries;
};
const se_ResetServiceSpecificCredentialRequest = (input, context) => {
    const entries = {};
    if (input[_UN] != null) {
        entries[_UN] = input[_UN];
    }
    if (input[_SSCI] != null) {
        entries[_SSCI] = input[_SSCI];
    }
    return entries;
};
const se_ResourceNameListType = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`member.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_ResyncMFADeviceRequest = (input, context) => {
    const entries = {};
    if (input[_UN] != null) {
        entries[_UN] = input[_UN];
    }
    if (input[_SNe] != null) {
        entries[_SNe] = input[_SNe];
    }
    if (input[_AC] != null) {
        entries[_AC] = input[_AC];
    }
    if (input[_ACu] != null) {
        entries[_ACu] = input[_ACu];
    }
    return entries;
};
const se_serviceNamespaceListType = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`member.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_SetDefaultPolicyVersionRequest = (input, context) => {
    const entries = {};
    if (input[_PA] != null) {
        entries[_PA] = input[_PA];
    }
    if (input[_VI] != null) {
        entries[_VI] = input[_VI];
    }
    return entries;
};
const se_SetSecurityTokenServicePreferencesRequest = (input, context) => {
    const entries = {};
    if (input[_GETV] != null) {
        entries[_GETV] = input[_GETV];
    }
    return entries;
};
const se_SimulateCustomPolicyRequest = (input, context) => {
    const entries = {};
    if (input[_PIL] != null) {
        const memberEntries = se_SimulationPolicyListType(input[_PIL]);
        if (input[_PIL]?.length === 0) {
            entries.PolicyInputList = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `PolicyInputList.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_PBPIL] != null) {
        const memberEntries = se_SimulationPolicyListType(input[_PBPIL]);
        if (input[_PBPIL]?.length === 0) {
            entries.PermissionsBoundaryPolicyInputList = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `PermissionsBoundaryPolicyInputList.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_AN] != null) {
        const memberEntries = se_ActionNameListType(input[_AN]);
        if (input[_AN]?.length === 0) {
            entries.ActionNames = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ActionNames.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_RA] != null) {
        const memberEntries = se_ResourceNameListType(input[_RA]);
        if (input[_RA]?.length === 0) {
            entries.ResourceArns = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ResourceArns.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_RP] != null) {
        entries[_RP] = input[_RP];
    }
    if (input[_RO] != null) {
        entries[_RO] = input[_RO];
    }
    if (input[_CA] != null) {
        entries[_CA] = input[_CA];
    }
    if (input[_CE] != null) {
        const memberEntries = se_ContextEntryListType(input[_CE]);
        if (input[_CE]?.length === 0) {
            entries.ContextEntries = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ContextEntries.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_RHO] != null) {
        entries[_RHO] = input[_RHO];
    }
    if (input[_MI] != null) {
        entries[_MI] = input[_MI];
    }
    if (input[_M] != null) {
        entries[_M] = input[_M];
    }
    return entries;
};
const se_SimulatePrincipalPolicyRequest = (input, context) => {
    const entries = {};
    if (input[_PSA] != null) {
        entries[_PSA] = input[_PSA];
    }
    if (input[_PIL] != null) {
        const memberEntries = se_SimulationPolicyListType(input[_PIL]);
        if (input[_PIL]?.length === 0) {
            entries.PolicyInputList = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `PolicyInputList.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_PBPIL] != null) {
        const memberEntries = se_SimulationPolicyListType(input[_PBPIL]);
        if (input[_PBPIL]?.length === 0) {
            entries.PermissionsBoundaryPolicyInputList = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `PermissionsBoundaryPolicyInputList.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_AN] != null) {
        const memberEntries = se_ActionNameListType(input[_AN]);
        if (input[_AN]?.length === 0) {
            entries.ActionNames = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ActionNames.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_RA] != null) {
        const memberEntries = se_ResourceNameListType(input[_RA]);
        if (input[_RA]?.length === 0) {
            entries.ResourceArns = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ResourceArns.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_RP] != null) {
        entries[_RP] = input[_RP];
    }
    if (input[_RO] != null) {
        entries[_RO] = input[_RO];
    }
    if (input[_CA] != null) {
        entries[_CA] = input[_CA];
    }
    if (input[_CE] != null) {
        const memberEntries = se_ContextEntryListType(input[_CE]);
        if (input[_CE]?.length === 0) {
            entries.ContextEntries = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ContextEntries.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_RHO] != null) {
        entries[_RHO] = input[_RHO];
    }
    if (input[_MI] != null) {
        entries[_MI] = input[_MI];
    }
    if (input[_M] != null) {
        entries[_M] = input[_M];
    }
    return entries;
};
const se_SimulationPolicyListType = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`member.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_Tag = (input, context) => {
    const entries = {};
    if (input[_K] != null) {
        entries[_K] = input[_K];
    }
    if (input[_Va] != null) {
        entries[_Va] = input[_Va];
    }
    return entries;
};
const se_TagInstanceProfileRequest = (input, context) => {
    const entries = {};
    if (input[_IPN] != null) {
        entries[_IPN] = input[_IPN];
    }
    if (input[_T] != null) {
        const memberEntries = se_tagListType(input[_T]);
        if (input[_T]?.length === 0) {
            entries.Tags = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Tags.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_tagKeyListType = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`member.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_tagListType = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = se_Tag(entry);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`member.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const se_TagMFADeviceRequest = (input, context) => {
    const entries = {};
    if (input[_SNe] != null) {
        entries[_SNe] = input[_SNe];
    }
    if (input[_T] != null) {
        const memberEntries = se_tagListType(input[_T]);
        if (input[_T]?.length === 0) {
            entries.Tags = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Tags.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_TagOpenIDConnectProviderRequest = (input, context) => {
    const entries = {};
    if (input[_OIDCPA] != null) {
        entries[_OIDCPA] = input[_OIDCPA];
    }
    if (input[_T] != null) {
        const memberEntries = se_tagListType(input[_T]);
        if (input[_T]?.length === 0) {
            entries.Tags = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Tags.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_TagPolicyRequest = (input, context) => {
    const entries = {};
    if (input[_PA] != null) {
        entries[_PA] = input[_PA];
    }
    if (input[_T] != null) {
        const memberEntries = se_tagListType(input[_T]);
        if (input[_T]?.length === 0) {
            entries.Tags = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Tags.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_TagRoleRequest = (input, context) => {
    const entries = {};
    if (input[_RN] != null) {
        entries[_RN] = input[_RN];
    }
    if (input[_T] != null) {
        const memberEntries = se_tagListType(input[_T]);
        if (input[_T]?.length === 0) {
            entries.Tags = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Tags.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_TagSAMLProviderRequest = (input, context) => {
    const entries = {};
    if (input[_SAMLPA] != null) {
        entries[_SAMLPA] = input[_SAMLPA];
    }
    if (input[_T] != null) {
        const memberEntries = se_tagListType(input[_T]);
        if (input[_T]?.length === 0) {
            entries.Tags = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Tags.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_TagServerCertificateRequest = (input, context) => {
    const entries = {};
    if (input[_SCN] != null) {
        entries[_SCN] = input[_SCN];
    }
    if (input[_T] != null) {
        const memberEntries = se_tagListType(input[_T]);
        if (input[_T]?.length === 0) {
            entries.Tags = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Tags.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_TagUserRequest = (input, context) => {
    const entries = {};
    if (input[_UN] != null) {
        entries[_UN] = input[_UN];
    }
    if (input[_T] != null) {
        const memberEntries = se_tagListType(input[_T]);
        if (input[_T]?.length === 0) {
            entries.Tags = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Tags.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_thumbprintListType = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`member.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_UntagInstanceProfileRequest = (input, context) => {
    const entries = {};
    if (input[_IPN] != null) {
        entries[_IPN] = input[_IPN];
    }
    if (input[_TK] != null) {
        const memberEntries = se_tagKeyListType(input[_TK]);
        if (input[_TK]?.length === 0) {
            entries.TagKeys = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TagKeys.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_UntagMFADeviceRequest = (input, context) => {
    const entries = {};
    if (input[_SNe] != null) {
        entries[_SNe] = input[_SNe];
    }
    if (input[_TK] != null) {
        const memberEntries = se_tagKeyListType(input[_TK]);
        if (input[_TK]?.length === 0) {
            entries.TagKeys = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TagKeys.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_UntagOpenIDConnectProviderRequest = (input, context) => {
    const entries = {};
    if (input[_OIDCPA] != null) {
        entries[_OIDCPA] = input[_OIDCPA];
    }
    if (input[_TK] != null) {
        const memberEntries = se_tagKeyListType(input[_TK]);
        if (input[_TK]?.length === 0) {
            entries.TagKeys = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TagKeys.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_UntagPolicyRequest = (input, context) => {
    const entries = {};
    if (input[_PA] != null) {
        entries[_PA] = input[_PA];
    }
    if (input[_TK] != null) {
        const memberEntries = se_tagKeyListType(input[_TK]);
        if (input[_TK]?.length === 0) {
            entries.TagKeys = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TagKeys.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_UntagRoleRequest = (input, context) => {
    const entries = {};
    if (input[_RN] != null) {
        entries[_RN] = input[_RN];
    }
    if (input[_TK] != null) {
        const memberEntries = se_tagKeyListType(input[_TK]);
        if (input[_TK]?.length === 0) {
            entries.TagKeys = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TagKeys.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_UntagSAMLProviderRequest = (input, context) => {
    const entries = {};
    if (input[_SAMLPA] != null) {
        entries[_SAMLPA] = input[_SAMLPA];
    }
    if (input[_TK] != null) {
        const memberEntries = se_tagKeyListType(input[_TK]);
        if (input[_TK]?.length === 0) {
            entries.TagKeys = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TagKeys.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_UntagServerCertificateRequest = (input, context) => {
    const entries = {};
    if (input[_SCN] != null) {
        entries[_SCN] = input[_SCN];
    }
    if (input[_TK] != null) {
        const memberEntries = se_tagKeyListType(input[_TK]);
        if (input[_TK]?.length === 0) {
            entries.TagKeys = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TagKeys.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_UntagUserRequest = (input, context) => {
    const entries = {};
    if (input[_UN] != null) {
        entries[_UN] = input[_UN];
    }
    if (input[_TK] != null) {
        const memberEntries = se_tagKeyListType(input[_TK]);
        if (input[_TK]?.length === 0) {
            entries.TagKeys = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TagKeys.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_UpdateAccessKeyRequest = (input, context) => {
    const entries = {};
    if (input[_UN] != null) {
        entries[_UN] = input[_UN];
    }
    if (input[_AKI] != null) {
        entries[_AKI] = input[_AKI];
    }
    if (input[_St] != null) {
        entries[_St] = input[_St];
    }
    return entries;
};
const se_UpdateAccountPasswordPolicyRequest = (input, context) => {
    const entries = {};
    if (input[_MPL] != null) {
        entries[_MPL] = input[_MPL];
    }
    if (input[_RS] != null) {
        entries[_RS] = input[_RS];
    }
    if (input[_RNe] != null) {
        entries[_RNe] = input[_RNe];
    }
    if (input[_RUC] != null) {
        entries[_RUC] = input[_RUC];
    }
    if (input[_RLC] != null) {
        entries[_RLC] = input[_RLC];
    }
    if (input[_AUTCP] != null) {
        entries[_AUTCP] = input[_AUTCP];
    }
    if (input[_MPA] != null) {
        entries[_MPA] = input[_MPA];
    }
    if (input[_PRPa] != null) {
        entries[_PRPa] = input[_PRPa];
    }
    if (input[_HE] != null) {
        entries[_HE] = input[_HE];
    }
    return entries;
};
const se_UpdateAssumeRolePolicyRequest = (input, context) => {
    const entries = {};
    if (input[_RN] != null) {
        entries[_RN] = input[_RN];
    }
    if (input[_PD] != null) {
        entries[_PD] = input[_PD];
    }
    return entries;
};
const se_UpdateGroupRequest = (input, context) => {
    const entries = {};
    if (input[_GN] != null) {
        entries[_GN] = input[_GN];
    }
    if (input[_NPe] != null) {
        entries[_NPe] = input[_NPe];
    }
    if (input[_NGN] != null) {
        entries[_NGN] = input[_NGN];
    }
    return entries;
};
const se_UpdateLoginProfileRequest = (input, context) => {
    const entries = {};
    if (input[_UN] != null) {
        entries[_UN] = input[_UN];
    }
    if (input[_Pa] != null) {
        entries[_Pa] = input[_Pa];
    }
    if (input[_PRR] != null) {
        entries[_PRR] = input[_PRR];
    }
    return entries;
};
const se_UpdateOpenIDConnectProviderThumbprintRequest = (input, context) => {
    const entries = {};
    if (input[_OIDCPA] != null) {
        entries[_OIDCPA] = input[_OIDCPA];
    }
    if (input[_TL] != null) {
        const memberEntries = se_thumbprintListType(input[_TL]);
        if (input[_TL]?.length === 0) {
            entries.ThumbprintList = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ThumbprintList.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_UpdateRoleDescriptionRequest = (input, context) => {
    const entries = {};
    if (input[_RN] != null) {
        entries[_RN] = input[_RN];
    }
    if (input[_D] != null) {
        entries[_D] = input[_D];
    }
    return entries;
};
const se_UpdateRoleRequest = (input, context) => {
    const entries = {};
    if (input[_RN] != null) {
        entries[_RN] = input[_RN];
    }
    if (input[_D] != null) {
        entries[_D] = input[_D];
    }
    if (input[_MSD] != null) {
        entries[_MSD] = input[_MSD];
    }
    return entries;
};
const se_UpdateSAMLProviderRequest = (input, context) => {
    const entries = {};
    if (input[_SAMLMD] != null) {
        entries[_SAMLMD] = input[_SAMLMD];
    }
    if (input[_SAMLPA] != null) {
        entries[_SAMLPA] = input[_SAMLPA];
    }
    if (input[_AEM] != null) {
        entries[_AEM] = input[_AEM];
    }
    if (input[_APK] != null) {
        entries[_APK] = input[_APK];
    }
    if (input[_RPK] != null) {
        entries[_RPK] = input[_RPK];
    }
    return entries;
};
const se_UpdateServerCertificateRequest = (input, context) => {
    const entries = {};
    if (input[_SCN] != null) {
        entries[_SCN] = input[_SCN];
    }
    if (input[_NPe] != null) {
        entries[_NPe] = input[_NPe];
    }
    if (input[_NSCN] != null) {
        entries[_NSCN] = input[_NSCN];
    }
    return entries;
};
const se_UpdateServiceSpecificCredentialRequest = (input, context) => {
    const entries = {};
    if (input[_UN] != null) {
        entries[_UN] = input[_UN];
    }
    if (input[_SSCI] != null) {
        entries[_SSCI] = input[_SSCI];
    }
    if (input[_St] != null) {
        entries[_St] = input[_St];
    }
    return entries;
};
const se_UpdateSigningCertificateRequest = (input, context) => {
    const entries = {};
    if (input[_UN] != null) {
        entries[_UN] = input[_UN];
    }
    if (input[_CI] != null) {
        entries[_CI] = input[_CI];
    }
    if (input[_St] != null) {
        entries[_St] = input[_St];
    }
    return entries;
};
const se_UpdateSSHPublicKeyRequest = (input, context) => {
    const entries = {};
    if (input[_UN] != null) {
        entries[_UN] = input[_UN];
    }
    if (input[_SSHPKI] != null) {
        entries[_SSHPKI] = input[_SSHPKI];
    }
    if (input[_St] != null) {
        entries[_St] = input[_St];
    }
    return entries;
};
const se_UpdateUserRequest = (input, context) => {
    const entries = {};
    if (input[_UN] != null) {
        entries[_UN] = input[_UN];
    }
    if (input[_NPe] != null) {
        entries[_NPe] = input[_NPe];
    }
    if (input[_NUN] != null) {
        entries[_NUN] = input[_NUN];
    }
    return entries;
};
const se_UploadServerCertificateRequest = (input, context) => {
    const entries = {};
    if (input[_P] != null) {
        entries[_P] = input[_P];
    }
    if (input[_SCN] != null) {
        entries[_SCN] = input[_SCN];
    }
    if (input[_CB] != null) {
        entries[_CB] = input[_CB];
    }
    if (input[_PK] != null) {
        entries[_PK] = input[_PK];
    }
    if (input[_CC] != null) {
        entries[_CC] = input[_CC];
    }
    if (input[_T] != null) {
        const memberEntries = se_tagListType(input[_T]);
        if (input[_T]?.length === 0) {
            entries.Tags = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Tags.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_UploadSigningCertificateRequest = (input, context) => {
    const entries = {};
    if (input[_UN] != null) {
        entries[_UN] = input[_UN];
    }
    if (input[_CB] != null) {
        entries[_CB] = input[_CB];
    }
    return entries;
};
const se_UploadSSHPublicKeyRequest = (input, context) => {
    const entries = {};
    if (input[_UN] != null) {
        entries[_UN] = input[_UN];
    }
    if (input[_SSHPKB] != null) {
        entries[_SSHPKB] = input[_SSHPKB];
    }
    return entries;
};
const de_AccessDetail = (output, context) => {
    const contents = {};
    if (output[_SN] != null) {
        contents[_SN] = smithyClient.expectString(output[_SN]);
    }
    if (output[_SNer] != null) {
        contents[_SNer] = smithyClient.expectString(output[_SNer]);
    }
    if (output[_R] != null) {
        contents[_R] = smithyClient.expectString(output[_R]);
    }
    if (output[_EP] != null) {
        contents[_EP] = smithyClient.expectString(output[_EP]);
    }
    if (output[_LAT] != null) {
        contents[_LAT] = smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(output[_LAT]));
    }
    if (output[_TAE] != null) {
        contents[_TAE] = smithyClient.strictParseInt32(output[_TAE]);
    }
    return contents;
};
const de_AccessDetails = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_AccessDetail(entry);
    });
};
const de_AccessKey = (output, context) => {
    const contents = {};
    if (output[_UN] != null) {
        contents[_UN] = smithyClient.expectString(output[_UN]);
    }
    if (output[_AKI] != null) {
        contents[_AKI] = smithyClient.expectString(output[_AKI]);
    }
    if (output[_St] != null) {
        contents[_St] = smithyClient.expectString(output[_St]);
    }
    if (output[_SAK] != null) {
        contents[_SAK] = smithyClient.expectString(output[_SAK]);
    }
    if (output[_CD] != null) {
        contents[_CD] = smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(output[_CD]));
    }
    return contents;
};
const de_AccessKeyLastUsed = (output, context) => {
    const contents = {};
    if (output[_LUD] != null) {
        contents[_LUD] = smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(output[_LUD]));
    }
    if (output[_SN] != null) {
        contents[_SN] = smithyClient.expectString(output[_SN]);
    }
    if (output[_R] != null) {
        contents[_R] = smithyClient.expectString(output[_R]);
    }
    return contents;
};
const de_AccessKeyMetadata = (output, context) => {
    const contents = {};
    if (output[_UN] != null) {
        contents[_UN] = smithyClient.expectString(output[_UN]);
    }
    if (output[_AKI] != null) {
        contents[_AKI] = smithyClient.expectString(output[_AKI]);
    }
    if (output[_St] != null) {
        contents[_St] = smithyClient.expectString(output[_St]);
    }
    if (output[_CD] != null) {
        contents[_CD] = smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(output[_CD]));
    }
    return contents;
};
const de_accessKeyMetadataListType = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_AccessKeyMetadata(entry);
    });
};
const de_accountAliasListType = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return smithyClient.expectString(entry);
    });
};
const de_AccountNotManagementOrDelegatedAdministratorException = (output, context) => {
    const contents = {};
    if (output[_Me] != null) {
        contents[_Me] = smithyClient.expectString(output[_Me]);
    }
    return contents;
};
const de_ArnListType = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return smithyClient.expectString(entry);
    });
};
const de_AttachedPermissionsBoundary = (output, context) => {
    const contents = {};
    if (output[_PBT] != null) {
        contents[_PBT] = smithyClient.expectString(output[_PBT]);
    }
    if (output[_PBA] != null) {
        contents[_PBA] = smithyClient.expectString(output[_PBA]);
    }
    return contents;
};
const de_attachedPoliciesListType = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_AttachedPolicy(entry);
    });
};
const de_AttachedPolicy = (output, context) => {
    const contents = {};
    if (output[_PN] != null) {
        contents[_PN] = smithyClient.expectString(output[_PN]);
    }
    if (output[_PA] != null) {
        contents[_PA] = smithyClient.expectString(output[_PA]);
    }
    return contents;
};
const de_CallerIsNotManagementAccountException = (output, context) => {
    const contents = {};
    if (output[_Me] != null) {
        contents[_Me] = smithyClient.expectString(output[_Me]);
    }
    return contents;
};
const de_certificateListType = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_SigningCertificate(entry);
    });
};
const de_CertificationMapType = (output, context) => {
    return output.reduce((acc, pair) => {
        if (pair["value"] === null) {
            return acc;
        }
        acc[pair["key"]] = smithyClient.expectString(pair["value"]);
        return acc;
    }, {});
};
const de_clientIDListType = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return smithyClient.expectString(entry);
    });
};
const de_ConcurrentModificationException = (output, context) => {
    const contents = {};
    if (output[_m] != null) {
        contents[_m] = smithyClient.expectString(output[_m]);
    }
    return contents;
};
const de_ContextKeyNamesResultListType = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return smithyClient.expectString(entry);
    });
};
const de_CreateAccessKeyResponse = (output, context) => {
    const contents = {};
    if (output[_AK] != null) {
        contents[_AK] = de_AccessKey(output[_AK]);
    }
    return contents;
};
const de_CreateGroupResponse = (output, context) => {
    const contents = {};
    if (output[_Gr] != null) {
        contents[_Gr] = de_Group(output[_Gr]);
    }
    return contents;
};
const de_CreateInstanceProfileResponse = (output, context) => {
    const contents = {};
    if (output[_IP] != null) {
        contents[_IP] = de_InstanceProfile(output[_IP]);
    }
    return contents;
};
const de_CreateLoginProfileResponse = (output, context) => {
    const contents = {};
    if (output[_LPo] != null) {
        contents[_LPo] = de_LoginProfile(output[_LPo]);
    }
    return contents;
};
const de_CreateOpenIDConnectProviderResponse = (output, context) => {
    const contents = {};
    if (output[_OIDCPA] != null) {
        contents[_OIDCPA] = smithyClient.expectString(output[_OIDCPA]);
    }
    if (String(output.Tags).trim() === "") {
        contents[_T] = [];
    }
    else if (output[_T] != null && output[_T][_me] != null) {
        contents[_T] = de_tagListType(smithyClient.getArrayIfSingleItem(output[_T][_me]));
    }
    return contents;
};
const de_CreatePolicyResponse = (output, context) => {
    const contents = {};
    if (output[_Po] != null) {
        contents[_Po] = de_Policy(output[_Po]);
    }
    return contents;
};
const de_CreatePolicyVersionResponse = (output, context) => {
    const contents = {};
    if (output[_PV] != null) {
        contents[_PV] = de_PolicyVersion(output[_PV]);
    }
    return contents;
};
const de_CreateRoleResponse = (output, context) => {
    const contents = {};
    if (output[_Ro] != null) {
        contents[_Ro] = de_Role(output[_Ro]);
    }
    return contents;
};
const de_CreateSAMLProviderResponse = (output, context) => {
    const contents = {};
    if (output[_SAMLPA] != null) {
        contents[_SAMLPA] = smithyClient.expectString(output[_SAMLPA]);
    }
    if (String(output.Tags).trim() === "") {
        contents[_T] = [];
    }
    else if (output[_T] != null && output[_T][_me] != null) {
        contents[_T] = de_tagListType(smithyClient.getArrayIfSingleItem(output[_T][_me]));
    }
    return contents;
};
const de_CreateServiceLinkedRoleResponse = (output, context) => {
    const contents = {};
    if (output[_Ro] != null) {
        contents[_Ro] = de_Role(output[_Ro]);
    }
    return contents;
};
const de_CreateServiceSpecificCredentialResponse = (output, context) => {
    const contents = {};
    if (output[_SSC] != null) {
        contents[_SSC] = de_ServiceSpecificCredential(output[_SSC]);
    }
    return contents;
};
const de_CreateUserResponse = (output, context) => {
    const contents = {};
    if (output[_Us] != null) {
        contents[_Us] = de_User(output[_Us]);
    }
    return contents;
};
const de_CreateVirtualMFADeviceResponse = (output, context) => {
    const contents = {};
    if (output[_VMFAD] != null) {
        contents[_VMFAD] = de_VirtualMFADevice(output[_VMFAD], context);
    }
    return contents;
};
const de_CredentialReportExpiredException = (output, context) => {
    const contents = {};
    if (output[_m] != null) {
        contents[_m] = smithyClient.expectString(output[_m]);
    }
    return contents;
};
const de_CredentialReportNotPresentException = (output, context) => {
    const contents = {};
    if (output[_m] != null) {
        contents[_m] = smithyClient.expectString(output[_m]);
    }
    return contents;
};
const de_CredentialReportNotReadyException = (output, context) => {
    const contents = {};
    if (output[_m] != null) {
        contents[_m] = smithyClient.expectString(output[_m]);
    }
    return contents;
};
const de_DeleteConflictException = (output, context) => {
    const contents = {};
    if (output[_m] != null) {
        contents[_m] = smithyClient.expectString(output[_m]);
    }
    return contents;
};
const de_DeleteServiceLinkedRoleResponse = (output, context) => {
    const contents = {};
    if (output[_DTI] != null) {
        contents[_DTI] = smithyClient.expectString(output[_DTI]);
    }
    return contents;
};
const de_DeletionTaskFailureReasonType = (output, context) => {
    const contents = {};
    if (output[_Re] != null) {
        contents[_Re] = smithyClient.expectString(output[_Re]);
    }
    if (String(output.RoleUsageList).trim() === "") {
        contents[_RUL] = [];
    }
    else if (output[_RUL] != null && output[_RUL][_me] != null) {
        contents[_RUL] = de_RoleUsageListType(smithyClient.getArrayIfSingleItem(output[_RUL][_me]));
    }
    return contents;
};
const de_DisableOrganizationsRootCredentialsManagementResponse = (output, context) => {
    const contents = {};
    if (output[_OI] != null) {
        contents[_OI] = smithyClient.expectString(output[_OI]);
    }
    if (String(output.EnabledFeatures).trim() === "") {
        contents[_EFn] = [];
    }
    else if (output[_EFn] != null && output[_EFn][_me] != null) {
        contents[_EFn] = de_FeaturesListType(smithyClient.getArrayIfSingleItem(output[_EFn][_me]));
    }
    return contents;
};
const de_DisableOrganizationsRootSessionsResponse = (output, context) => {
    const contents = {};
    if (output[_OI] != null) {
        contents[_OI] = smithyClient.expectString(output[_OI]);
    }
    if (String(output.EnabledFeatures).trim() === "") {
        contents[_EFn] = [];
    }
    else if (output[_EFn] != null && output[_EFn][_me] != null) {
        contents[_EFn] = de_FeaturesListType(smithyClient.getArrayIfSingleItem(output[_EFn][_me]));
    }
    return contents;
};
const de_DuplicateCertificateException = (output, context) => {
    const contents = {};
    if (output[_m] != null) {
        contents[_m] = smithyClient.expectString(output[_m]);
    }
    return contents;
};
const de_DuplicateSSHPublicKeyException = (output, context) => {
    const contents = {};
    if (output[_m] != null) {
        contents[_m] = smithyClient.expectString(output[_m]);
    }
    return contents;
};
const de_EnableOrganizationsRootCredentialsManagementResponse = (output, context) => {
    const contents = {};
    if (output[_OI] != null) {
        contents[_OI] = smithyClient.expectString(output[_OI]);
    }
    if (String(output.EnabledFeatures).trim() === "") {
        contents[_EFn] = [];
    }
    else if (output[_EFn] != null && output[_EFn][_me] != null) {
        contents[_EFn] = de_FeaturesListType(smithyClient.getArrayIfSingleItem(output[_EFn][_me]));
    }
    return contents;
};
const de_EnableOrganizationsRootSessionsResponse = (output, context) => {
    const contents = {};
    if (output[_OI] != null) {
        contents[_OI] = smithyClient.expectString(output[_OI]);
    }
    if (String(output.EnabledFeatures).trim() === "") {
        contents[_EFn] = [];
    }
    else if (output[_EFn] != null && output[_EFn][_me] != null) {
        contents[_EFn] = de_FeaturesListType(smithyClient.getArrayIfSingleItem(output[_EFn][_me]));
    }
    return contents;
};
const de_EntityAlreadyExistsException = (output, context) => {
    const contents = {};
    if (output[_m] != null) {
        contents[_m] = smithyClient.expectString(output[_m]);
    }
    return contents;
};
const de_EntityDetails = (output, context) => {
    const contents = {};
    if (output[_EI] != null) {
        contents[_EI] = de_EntityInfo(output[_EI]);
    }
    if (output[_LA] != null) {
        contents[_LA] = smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(output[_LA]));
    }
    return contents;
};
const de_entityDetailsListType = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_EntityDetails(entry);
    });
};
const de_EntityInfo = (output, context) => {
    const contents = {};
    if (output[_Ar] != null) {
        contents[_Ar] = smithyClient.expectString(output[_Ar]);
    }
    if (output[_N] != null) {
        contents[_N] = smithyClient.expectString(output[_N]);
    }
    if (output[_Ty] != null) {
        contents[_Ty] = smithyClient.expectString(output[_Ty]);
    }
    if (output[_I] != null) {
        contents[_I] = smithyClient.expectString(output[_I]);
    }
    if (output[_P] != null) {
        contents[_P] = smithyClient.expectString(output[_P]);
    }
    return contents;
};
const de_EntityTemporarilyUnmodifiableException = (output, context) => {
    const contents = {};
    if (output[_m] != null) {
        contents[_m] = smithyClient.expectString(output[_m]);
    }
    return contents;
};
const de_ErrorDetails = (output, context) => {
    const contents = {};
    if (output[_Me] != null) {
        contents[_Me] = smithyClient.expectString(output[_Me]);
    }
    if (output[_C] != null) {
        contents[_C] = smithyClient.expectString(output[_C]);
    }
    return contents;
};
const de_EvalDecisionDetailsType = (output, context) => {
    return output.reduce((acc, pair) => {
        if (pair["value"] === null) {
            return acc;
        }
        acc[pair["key"]] = smithyClient.expectString(pair["value"]);
        return acc;
    }, {});
};
const de_EvaluationResult = (output, context) => {
    const contents = {};
    if (output[_EAN] != null) {
        contents[_EAN] = smithyClient.expectString(output[_EAN]);
    }
    if (output[_ERN] != null) {
        contents[_ERN] = smithyClient.expectString(output[_ERN]);
    }
    if (output[_ED] != null) {
        contents[_ED] = smithyClient.expectString(output[_ED]);
    }
    if (String(output.MatchedStatements).trim() === "") {
        contents[_MS] = [];
    }
    else if (output[_MS] != null && output[_MS][_me] != null) {
        contents[_MS] = de_StatementListType(smithyClient.getArrayIfSingleItem(output[_MS][_me]));
    }
    if (String(output.MissingContextValues).trim() === "") {
        contents[_MCV] = [];
    }
    else if (output[_MCV] != null && output[_MCV][_me] != null) {
        contents[_MCV] = de_ContextKeyNamesResultListType(smithyClient.getArrayIfSingleItem(output[_MCV][_me]));
    }
    if (output[_ODD] != null) {
        contents[_ODD] = de_OrganizationsDecisionDetail(output[_ODD]);
    }
    if (output[_PBDD] != null) {
        contents[_PBDD] = de_PermissionsBoundaryDecisionDetail(output[_PBDD]);
    }
    if (String(output.EvalDecisionDetails).trim() === "") {
        contents[_EDD] = {};
    }
    else if (output[_EDD] != null && output[_EDD][_e] != null) {
        contents[_EDD] = de_EvalDecisionDetailsType(smithyClient.getArrayIfSingleItem(output[_EDD][_e]));
    }
    if (String(output.ResourceSpecificResults).trim() === "") {
        contents[_RSR] = [];
    }
    else if (output[_RSR] != null && output[_RSR][_me] != null) {
        contents[_RSR] = de_ResourceSpecificResultListType(smithyClient.getArrayIfSingleItem(output[_RSR][_me]));
    }
    return contents;
};
const de_EvaluationResultsListType = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_EvaluationResult(entry);
    });
};
const de_FeaturesListType = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return smithyClient.expectString(entry);
    });
};
const de_GenerateCredentialReportResponse = (output, context) => {
    const contents = {};
    if (output[_Sta] != null) {
        contents[_Sta] = smithyClient.expectString(output[_Sta]);
    }
    if (output[_D] != null) {
        contents[_D] = smithyClient.expectString(output[_D]);
    }
    return contents;
};
const de_GenerateOrganizationsAccessReportResponse = (output, context) => {
    const contents = {};
    if (output[_JI] != null) {
        contents[_JI] = smithyClient.expectString(output[_JI]);
    }
    return contents;
};
const de_GenerateServiceLastAccessedDetailsResponse = (output, context) => {
    const contents = {};
    if (output[_JI] != null) {
        contents[_JI] = smithyClient.expectString(output[_JI]);
    }
    return contents;
};
const de_GetAccessKeyLastUsedResponse = (output, context) => {
    const contents = {};
    if (output[_UN] != null) {
        contents[_UN] = smithyClient.expectString(output[_UN]);
    }
    if (output[_AKLU] != null) {
        contents[_AKLU] = de_AccessKeyLastUsed(output[_AKLU]);
    }
    return contents;
};
const de_GetAccountAuthorizationDetailsResponse = (output, context) => {
    const contents = {};
    if (String(output.UserDetailList).trim() === "") {
        contents[_UDL] = [];
    }
    else if (output[_UDL] != null && output[_UDL][_me] != null) {
        contents[_UDL] = de_userDetailListType(smithyClient.getArrayIfSingleItem(output[_UDL][_me]));
    }
    if (String(output.GroupDetailList).trim() === "") {
        contents[_GDL] = [];
    }
    else if (output[_GDL] != null && output[_GDL][_me] != null) {
        contents[_GDL] = de_groupDetailListType(smithyClient.getArrayIfSingleItem(output[_GDL][_me]));
    }
    if (String(output.RoleDetailList).trim() === "") {
        contents[_RDL] = [];
    }
    else if (output[_RDL] != null && output[_RDL][_me] != null) {
        contents[_RDL] = de_roleDetailListType(smithyClient.getArrayIfSingleItem(output[_RDL][_me]));
    }
    if (String(output.Policies).trim() === "") {
        contents[_Pol] = [];
    }
    else if (output[_Pol] != null && output[_Pol][_me] != null) {
        contents[_Pol] = de_ManagedPolicyDetailListType(smithyClient.getArrayIfSingleItem(output[_Pol][_me]));
    }
    if (output[_IT] != null) {
        contents[_IT] = smithyClient.parseBoolean(output[_IT]);
    }
    if (output[_M] != null) {
        contents[_M] = smithyClient.expectString(output[_M]);
    }
    return contents;
};
const de_GetAccountPasswordPolicyResponse = (output, context) => {
    const contents = {};
    if (output[_PPa] != null) {
        contents[_PPa] = de_PasswordPolicy(output[_PPa]);
    }
    return contents;
};
const de_GetAccountSummaryResponse = (output, context) => {
    const contents = {};
    if (String(output.SummaryMap).trim() === "") {
        contents[_SM] = {};
    }
    else if (output[_SM] != null && output[_SM][_e] != null) {
        contents[_SM] = de_summaryMapType(smithyClient.getArrayIfSingleItem(output[_SM][_e]));
    }
    return contents;
};
const de_GetContextKeysForPolicyResponse = (output, context) => {
    const contents = {};
    if (String(output.ContextKeyNames).trim() === "") {
        contents[_CKNo] = [];
    }
    else if (output[_CKNo] != null && output[_CKNo][_me] != null) {
        contents[_CKNo] = de_ContextKeyNamesResultListType(smithyClient.getArrayIfSingleItem(output[_CKNo][_me]));
    }
    return contents;
};
const de_GetCredentialReportResponse = (output, context) => {
    const contents = {};
    if (output[_Co] != null) {
        contents[_Co] = context.base64Decoder(output[_Co]);
    }
    if (output[_RF] != null) {
        contents[_RF] = smithyClient.expectString(output[_RF]);
    }
    if (output[_GT] != null) {
        contents[_GT] = smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(output[_GT]));
    }
    return contents;
};
const de_GetGroupPolicyResponse = (output, context) => {
    const contents = {};
    if (output[_GN] != null) {
        contents[_GN] = smithyClient.expectString(output[_GN]);
    }
    if (output[_PN] != null) {
        contents[_PN] = smithyClient.expectString(output[_PN]);
    }
    if (output[_PD] != null) {
        contents[_PD] = smithyClient.expectString(output[_PD]);
    }
    return contents;
};
const de_GetGroupResponse = (output, context) => {
    const contents = {};
    if (output[_Gr] != null) {
        contents[_Gr] = de_Group(output[_Gr]);
    }
    if (String(output.Users).trim() === "") {
        contents[_Use] = [];
    }
    else if (output[_Use] != null && output[_Use][_me] != null) {
        contents[_Use] = de_userListType(smithyClient.getArrayIfSingleItem(output[_Use][_me]));
    }
    if (output[_IT] != null) {
        contents[_IT] = smithyClient.parseBoolean(output[_IT]);
    }
    if (output[_M] != null) {
        contents[_M] = smithyClient.expectString(output[_M]);
    }
    return contents;
};
const de_GetInstanceProfileResponse = (output, context) => {
    const contents = {};
    if (output[_IP] != null) {
        contents[_IP] = de_InstanceProfile(output[_IP]);
    }
    return contents;
};
const de_GetLoginProfileResponse = (output, context) => {
    const contents = {};
    if (output[_LPo] != null) {
        contents[_LPo] = de_LoginProfile(output[_LPo]);
    }
    return contents;
};
const de_GetMFADeviceResponse = (output, context) => {
    const contents = {};
    if (output[_UN] != null) {
        contents[_UN] = smithyClient.expectString(output[_UN]);
    }
    if (output[_SNe] != null) {
        contents[_SNe] = smithyClient.expectString(output[_SNe]);
    }
    if (output[_EDn] != null) {
        contents[_EDn] = smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(output[_EDn]));
    }
    if (String(output.Certifications).trim() === "") {
        contents[_Ce] = {};
    }
    else if (output[_Ce] != null && output[_Ce][_e] != null) {
        contents[_Ce] = de_CertificationMapType(smithyClient.getArrayIfSingleItem(output[_Ce][_e]));
    }
    return contents;
};
const de_GetOpenIDConnectProviderResponse = (output, context) => {
    const contents = {};
    if (output[_U] != null) {
        contents[_U] = smithyClient.expectString(output[_U]);
    }
    if (String(output.ClientIDList).trim() === "") {
        contents[_CIDL] = [];
    }
    else if (output[_CIDL] != null && output[_CIDL][_me] != null) {
        contents[_CIDL] = de_clientIDListType(smithyClient.getArrayIfSingleItem(output[_CIDL][_me]));
    }
    if (String(output.ThumbprintList).trim() === "") {
        contents[_TL] = [];
    }
    else if (output[_TL] != null && output[_TL][_me] != null) {
        contents[_TL] = de_thumbprintListType(smithyClient.getArrayIfSingleItem(output[_TL][_me]));
    }
    if (output[_CD] != null) {
        contents[_CD] = smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(output[_CD]));
    }
    if (String(output.Tags).trim() === "") {
        contents[_T] = [];
    }
    else if (output[_T] != null && output[_T][_me] != null) {
        contents[_T] = de_tagListType(smithyClient.getArrayIfSingleItem(output[_T][_me]));
    }
    return contents;
};
const de_GetOrganizationsAccessReportResponse = (output, context) => {
    const contents = {};
    if (output[_JS] != null) {
        contents[_JS] = smithyClient.expectString(output[_JS]);
    }
    if (output[_JCD] != null) {
        contents[_JCD] = smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(output[_JCD]));
    }
    if (output[_JCDo] != null) {
        contents[_JCDo] = smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(output[_JCDo]));
    }
    if (output[_NOSA] != null) {
        contents[_NOSA] = smithyClient.strictParseInt32(output[_NOSA]);
    }
    if (output[_NOSNA] != null) {
        contents[_NOSNA] = smithyClient.strictParseInt32(output[_NOSNA]);
    }
    if (String(output.AccessDetails).trim() === "") {
        contents[_AD] = [];
    }
    else if (output[_AD] != null && output[_AD][_me] != null) {
        contents[_AD] = de_AccessDetails(smithyClient.getArrayIfSingleItem(output[_AD][_me]));
    }
    if (output[_IT] != null) {
        contents[_IT] = smithyClient.parseBoolean(output[_IT]);
    }
    if (output[_M] != null) {
        contents[_M] = smithyClient.expectString(output[_M]);
    }
    if (output[_EDr] != null) {
        contents[_EDr] = de_ErrorDetails(output[_EDr]);
    }
    return contents;
};
const de_GetPolicyResponse = (output, context) => {
    const contents = {};
    if (output[_Po] != null) {
        contents[_Po] = de_Policy(output[_Po]);
    }
    return contents;
};
const de_GetPolicyVersionResponse = (output, context) => {
    const contents = {};
    if (output[_PV] != null) {
        contents[_PV] = de_PolicyVersion(output[_PV]);
    }
    return contents;
};
const de_GetRolePolicyResponse = (output, context) => {
    const contents = {};
    if (output[_RN] != null) {
        contents[_RN] = smithyClient.expectString(output[_RN]);
    }
    if (output[_PN] != null) {
        contents[_PN] = smithyClient.expectString(output[_PN]);
    }
    if (output[_PD] != null) {
        contents[_PD] = smithyClient.expectString(output[_PD]);
    }
    return contents;
};
const de_GetRoleResponse = (output, context) => {
    const contents = {};
    if (output[_Ro] != null) {
        contents[_Ro] = de_Role(output[_Ro]);
    }
    return contents;
};
const de_GetSAMLProviderResponse = (output, context) => {
    const contents = {};
    if (output[_SAMLPUUID] != null) {
        contents[_SAMLPUUID] = smithyClient.expectString(output[_SAMLPUUID]);
    }
    if (output[_SAMLMD] != null) {
        contents[_SAMLMD] = smithyClient.expectString(output[_SAMLMD]);
    }
    if (output[_CD] != null) {
        contents[_CD] = smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(output[_CD]));
    }
    if (output[_VU] != null) {
        contents[_VU] = smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(output[_VU]));
    }
    if (String(output.Tags).trim() === "") {
        contents[_T] = [];
    }
    else if (output[_T] != null && output[_T][_me] != null) {
        contents[_T] = de_tagListType(smithyClient.getArrayIfSingleItem(output[_T][_me]));
    }
    if (output[_AEM] != null) {
        contents[_AEM] = smithyClient.expectString(output[_AEM]);
    }
    if (String(output.PrivateKeyList).trim() === "") {
        contents[_PKL] = [];
    }
    else if (output[_PKL] != null && output[_PKL][_me] != null) {
        contents[_PKL] = de_privateKeyList(smithyClient.getArrayIfSingleItem(output[_PKL][_me]));
    }
    return contents;
};
const de_GetServerCertificateResponse = (output, context) => {
    const contents = {};
    if (output[_SC] != null) {
        contents[_SC] = de_ServerCertificate(output[_SC]);
    }
    return contents;
};
const de_GetServiceLastAccessedDetailsResponse = (output, context) => {
    const contents = {};
    if (output[_JS] != null) {
        contents[_JS] = smithyClient.expectString(output[_JS]);
    }
    if (output[_JT] != null) {
        contents[_JT] = smithyClient.expectString(output[_JT]);
    }
    if (output[_JCD] != null) {
        contents[_JCD] = smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(output[_JCD]));
    }
    if (String(output.ServicesLastAccessed).trim() === "") {
        contents[_SLA] = [];
    }
    else if (output[_SLA] != null && output[_SLA][_me] != null) {
        contents[_SLA] = de_ServicesLastAccessed(smithyClient.getArrayIfSingleItem(output[_SLA][_me]));
    }
    if (output[_JCDo] != null) {
        contents[_JCDo] = smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(output[_JCDo]));
    }
    if (output[_IT] != null) {
        contents[_IT] = smithyClient.parseBoolean(output[_IT]);
    }
    if (output[_M] != null) {
        contents[_M] = smithyClient.expectString(output[_M]);
    }
    if (output[_Er] != null) {
        contents[_Er] = de_ErrorDetails(output[_Er]);
    }
    return contents;
};
const de_GetServiceLastAccessedDetailsWithEntitiesResponse = (output, context) => {
    const contents = {};
    if (output[_JS] != null) {
        contents[_JS] = smithyClient.expectString(output[_JS]);
    }
    if (output[_JCD] != null) {
        contents[_JCD] = smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(output[_JCD]));
    }
    if (output[_JCDo] != null) {
        contents[_JCDo] = smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(output[_JCDo]));
    }
    if (String(output.EntityDetailsList).trim() === "") {
        contents[_EDL] = [];
    }
    else if (output[_EDL] != null && output[_EDL][_me] != null) {
        contents[_EDL] = de_entityDetailsListType(smithyClient.getArrayIfSingleItem(output[_EDL][_me]));
    }
    if (output[_IT] != null) {
        contents[_IT] = smithyClient.parseBoolean(output[_IT]);
    }
    if (output[_M] != null) {
        contents[_M] = smithyClient.expectString(output[_M]);
    }
    if (output[_Er] != null) {
        contents[_Er] = de_ErrorDetails(output[_Er]);
    }
    return contents;
};
const de_GetServiceLinkedRoleDeletionStatusResponse = (output, context) => {
    const contents = {};
    if (output[_St] != null) {
        contents[_St] = smithyClient.expectString(output[_St]);
    }
    if (output[_Re] != null) {
        contents[_Re] = de_DeletionTaskFailureReasonType(output[_Re]);
    }
    return contents;
};
const de_GetSSHPublicKeyResponse = (output, context) => {
    const contents = {};
    if (output[_SSHPK] != null) {
        contents[_SSHPK] = de_SSHPublicKey(output[_SSHPK]);
    }
    return contents;
};
const de_GetUserPolicyResponse = (output, context) => {
    const contents = {};
    if (output[_UN] != null) {
        contents[_UN] = smithyClient.expectString(output[_UN]);
    }
    if (output[_PN] != null) {
        contents[_PN] = smithyClient.expectString(output[_PN]);
    }
    if (output[_PD] != null) {
        contents[_PD] = smithyClient.expectString(output[_PD]);
    }
    return contents;
};
const de_GetUserResponse = (output, context) => {
    const contents = {};
    if (output[_Us] != null) {
        contents[_Us] = de_User(output[_Us]);
    }
    return contents;
};
const de_Group = (output, context) => {
    const contents = {};
    if (output[_P] != null) {
        contents[_P] = smithyClient.expectString(output[_P]);
    }
    if (output[_GN] != null) {
        contents[_GN] = smithyClient.expectString(output[_GN]);
    }
    if (output[_GI] != null) {
        contents[_GI] = smithyClient.expectString(output[_GI]);
    }
    if (output[_Ar] != null) {
        contents[_Ar] = smithyClient.expectString(output[_Ar]);
    }
    if (output[_CD] != null) {
        contents[_CD] = smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(output[_CD]));
    }
    return contents;
};
const de_GroupDetail = (output, context) => {
    const contents = {};
    if (output[_P] != null) {
        contents[_P] = smithyClient.expectString(output[_P]);
    }
    if (output[_GN] != null) {
        contents[_GN] = smithyClient.expectString(output[_GN]);
    }
    if (output[_GI] != null) {
        contents[_GI] = smithyClient.expectString(output[_GI]);
    }
    if (output[_Ar] != null) {
        contents[_Ar] = smithyClient.expectString(output[_Ar]);
    }
    if (output[_CD] != null) {
        contents[_CD] = smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(output[_CD]));
    }
    if (String(output.GroupPolicyList).trim() === "") {
        contents[_GPL] = [];
    }
    else if (output[_GPL] != null && output[_GPL][_me] != null) {
        contents[_GPL] = de_policyDetailListType(smithyClient.getArrayIfSingleItem(output[_GPL][_me]));
    }
    if (String(output.AttachedManagedPolicies).trim() === "") {
        contents[_AMP] = [];
    }
    else if (output[_AMP] != null && output[_AMP][_me] != null) {
        contents[_AMP] = de_attachedPoliciesListType(smithyClient.getArrayIfSingleItem(output[_AMP][_me]));
    }
    return contents;
};
const de_groupDetailListType = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_GroupDetail(entry);
    });
};
const de_groupListType = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Group(entry);
    });
};
const de_groupNameListType = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return smithyClient.expectString(entry);
    });
};
const de_InstanceProfile = (output, context) => {
    const contents = {};
    if (output[_P] != null) {
        contents[_P] = smithyClient.expectString(output[_P]);
    }
    if (output[_IPN] != null) {
        contents[_IPN] = smithyClient.expectString(output[_IPN]);
    }
    if (output[_IPI] != null) {
        contents[_IPI] = smithyClient.expectString(output[_IPI]);
    }
    if (output[_Ar] != null) {
        contents[_Ar] = smithyClient.expectString(output[_Ar]);
    }
    if (output[_CD] != null) {
        contents[_CD] = smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(output[_CD]));
    }
    if (String(output.Roles).trim() === "") {
        contents[_Rol] = [];
    }
    else if (output[_Rol] != null && output[_Rol][_me] != null) {
        contents[_Rol] = de_roleListType(smithyClient.getArrayIfSingleItem(output[_Rol][_me]));
    }
    if (String(output.Tags).trim() === "") {
        contents[_T] = [];
    }
    else if (output[_T] != null && output[_T][_me] != null) {
        contents[_T] = de_tagListType(smithyClient.getArrayIfSingleItem(output[_T][_me]));
    }
    return contents;
};
const de_instanceProfileListType = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_InstanceProfile(entry);
    });
};
const de_InvalidAuthenticationCodeException = (output, context) => {
    const contents = {};
    if (output[_m] != null) {
        contents[_m] = smithyClient.expectString(output[_m]);
    }
    return contents;
};
const de_InvalidCertificateException = (output, context) => {
    const contents = {};
    if (output[_m] != null) {
        contents[_m] = smithyClient.expectString(output[_m]);
    }
    return contents;
};
const de_InvalidInputException = (output, context) => {
    const contents = {};
    if (output[_m] != null) {
        contents[_m] = smithyClient.expectString(output[_m]);
    }
    return contents;
};
const de_InvalidPublicKeyException = (output, context) => {
    const contents = {};
    if (output[_m] != null) {
        contents[_m] = smithyClient.expectString(output[_m]);
    }
    return contents;
};
const de_InvalidUserTypeException = (output, context) => {
    const contents = {};
    if (output[_m] != null) {
        contents[_m] = smithyClient.expectString(output[_m]);
    }
    return contents;
};
const de_KeyPairMismatchException = (output, context) => {
    const contents = {};
    if (output[_m] != null) {
        contents[_m] = smithyClient.expectString(output[_m]);
    }
    return contents;
};
const de_LimitExceededException = (output, context) => {
    const contents = {};
    if (output[_m] != null) {
        contents[_m] = smithyClient.expectString(output[_m]);
    }
    return contents;
};
const de_ListAccessKeysResponse = (output, context) => {
    const contents = {};
    if (String(output.AccessKeyMetadata).trim() === "") {
        contents[_AKM] = [];
    }
    else if (output[_AKM] != null && output[_AKM][_me] != null) {
        contents[_AKM] = de_accessKeyMetadataListType(smithyClient.getArrayIfSingleItem(output[_AKM][_me]));
    }
    if (output[_IT] != null) {
        contents[_IT] = smithyClient.parseBoolean(output[_IT]);
    }
    if (output[_M] != null) {
        contents[_M] = smithyClient.expectString(output[_M]);
    }
    return contents;
};
const de_ListAccountAliasesResponse = (output, context) => {
    const contents = {};
    if (String(output.AccountAliases).trim() === "") {
        contents[_AAc] = [];
    }
    else if (output[_AAc] != null && output[_AAc][_me] != null) {
        contents[_AAc] = de_accountAliasListType(smithyClient.getArrayIfSingleItem(output[_AAc][_me]));
    }
    if (output[_IT] != null) {
        contents[_IT] = smithyClient.parseBoolean(output[_IT]);
    }
    if (output[_M] != null) {
        contents[_M] = smithyClient.expectString(output[_M]);
    }
    return contents;
};
const de_ListAttachedGroupPoliciesResponse = (output, context) => {
    const contents = {};
    if (String(output.AttachedPolicies).trim() === "") {
        contents[_AP] = [];
    }
    else if (output[_AP] != null && output[_AP][_me] != null) {
        contents[_AP] = de_attachedPoliciesListType(smithyClient.getArrayIfSingleItem(output[_AP][_me]));
    }
    if (output[_IT] != null) {
        contents[_IT] = smithyClient.parseBoolean(output[_IT]);
    }
    if (output[_M] != null) {
        contents[_M] = smithyClient.expectString(output[_M]);
    }
    return contents;
};
const de_ListAttachedRolePoliciesResponse = (output, context) => {
    const contents = {};
    if (String(output.AttachedPolicies).trim() === "") {
        contents[_AP] = [];
    }
    else if (output[_AP] != null && output[_AP][_me] != null) {
        contents[_AP] = de_attachedPoliciesListType(smithyClient.getArrayIfSingleItem(output[_AP][_me]));
    }
    if (output[_IT] != null) {
        contents[_IT] = smithyClient.parseBoolean(output[_IT]);
    }
    if (output[_M] != null) {
        contents[_M] = smithyClient.expectString(output[_M]);
    }
    return contents;
};
const de_ListAttachedUserPoliciesResponse = (output, context) => {
    const contents = {};
    if (String(output.AttachedPolicies).trim() === "") {
        contents[_AP] = [];
    }
    else if (output[_AP] != null && output[_AP][_me] != null) {
        contents[_AP] = de_attachedPoliciesListType(smithyClient.getArrayIfSingleItem(output[_AP][_me]));
    }
    if (output[_IT] != null) {
        contents[_IT] = smithyClient.parseBoolean(output[_IT]);
    }
    if (output[_M] != null) {
        contents[_M] = smithyClient.expectString(output[_M]);
    }
    return contents;
};
const de_ListEntitiesForPolicyResponse = (output, context) => {
    const contents = {};
    if (String(output.PolicyGroups).trim() === "") {
        contents[_PG] = [];
    }
    else if (output[_PG] != null && output[_PG][_me] != null) {
        contents[_PG] = de_PolicyGroupListType(smithyClient.getArrayIfSingleItem(output[_PG][_me]));
    }
    if (String(output.PolicyUsers).trim() === "") {
        contents[_PU] = [];
    }
    else if (output[_PU] != null && output[_PU][_me] != null) {
        contents[_PU] = de_PolicyUserListType(smithyClient.getArrayIfSingleItem(output[_PU][_me]));
    }
    if (String(output.PolicyRoles).trim() === "") {
        contents[_PR] = [];
    }
    else if (output[_PR] != null && output[_PR][_me] != null) {
        contents[_PR] = de_PolicyRoleListType(smithyClient.getArrayIfSingleItem(output[_PR][_me]));
    }
    if (output[_IT] != null) {
        contents[_IT] = smithyClient.parseBoolean(output[_IT]);
    }
    if (output[_M] != null) {
        contents[_M] = smithyClient.expectString(output[_M]);
    }
    return contents;
};
const de_ListGroupPoliciesResponse = (output, context) => {
    const contents = {};
    if (String(output.PolicyNames).trim() === "") {
        contents[_PNo] = [];
    }
    else if (output[_PNo] != null && output[_PNo][_me] != null) {
        contents[_PNo] = de_policyNameListType(smithyClient.getArrayIfSingleItem(output[_PNo][_me]));
    }
    if (output[_IT] != null) {
        contents[_IT] = smithyClient.parseBoolean(output[_IT]);
    }
    if (output[_M] != null) {
        contents[_M] = smithyClient.expectString(output[_M]);
    }
    return contents;
};
const de_ListGroupsForUserResponse = (output, context) => {
    const contents = {};
    if (String(output.Groups).trim() === "") {
        contents[_Gro] = [];
    }
    else if (output[_Gro] != null && output[_Gro][_me] != null) {
        contents[_Gro] = de_groupListType(smithyClient.getArrayIfSingleItem(output[_Gro][_me]));
    }
    if (output[_IT] != null) {
        contents[_IT] = smithyClient.parseBoolean(output[_IT]);
    }
    if (output[_M] != null) {
        contents[_M] = smithyClient.expectString(output[_M]);
    }
    return contents;
};
const de_ListGroupsResponse = (output, context) => {
    const contents = {};
    if (String(output.Groups).trim() === "") {
        contents[_Gro] = [];
    }
    else if (output[_Gro] != null && output[_Gro][_me] != null) {
        contents[_Gro] = de_groupListType(smithyClient.getArrayIfSingleItem(output[_Gro][_me]));
    }
    if (output[_IT] != null) {
        contents[_IT] = smithyClient.parseBoolean(output[_IT]);
    }
    if (output[_M] != null) {
        contents[_M] = smithyClient.expectString(output[_M]);
    }
    return contents;
};
const de_ListInstanceProfilesForRoleResponse = (output, context) => {
    const contents = {};
    if (String(output.InstanceProfiles).trim() === "") {
        contents[_IPn] = [];
    }
    else if (output[_IPn] != null && output[_IPn][_me] != null) {
        contents[_IPn] = de_instanceProfileListType(smithyClient.getArrayIfSingleItem(output[_IPn][_me]));
    }
    if (output[_IT] != null) {
        contents[_IT] = smithyClient.parseBoolean(output[_IT]);
    }
    if (output[_M] != null) {
        contents[_M] = smithyClient.expectString(output[_M]);
    }
    return contents;
};
const de_ListInstanceProfilesResponse = (output, context) => {
    const contents = {};
    if (String(output.InstanceProfiles).trim() === "") {
        contents[_IPn] = [];
    }
    else if (output[_IPn] != null && output[_IPn][_me] != null) {
        contents[_IPn] = de_instanceProfileListType(smithyClient.getArrayIfSingleItem(output[_IPn][_me]));
    }
    if (output[_IT] != null) {
        contents[_IT] = smithyClient.parseBoolean(output[_IT]);
    }
    if (output[_M] != null) {
        contents[_M] = smithyClient.expectString(output[_M]);
    }
    return contents;
};
const de_ListInstanceProfileTagsResponse = (output, context) => {
    const contents = {};
    if (String(output.Tags).trim() === "") {
        contents[_T] = [];
    }
    else if (output[_T] != null && output[_T][_me] != null) {
        contents[_T] = de_tagListType(smithyClient.getArrayIfSingleItem(output[_T][_me]));
    }
    if (output[_IT] != null) {
        contents[_IT] = smithyClient.parseBoolean(output[_IT]);
    }
    if (output[_M] != null) {
        contents[_M] = smithyClient.expectString(output[_M]);
    }
    return contents;
};
const de_ListMFADevicesResponse = (output, context) => {
    const contents = {};
    if (String(output.MFADevices).trim() === "") {
        contents[_MFAD] = [];
    }
    else if (output[_MFAD] != null && output[_MFAD][_me] != null) {
        contents[_MFAD] = de_mfaDeviceListType(smithyClient.getArrayIfSingleItem(output[_MFAD][_me]));
    }
    if (output[_IT] != null) {
        contents[_IT] = smithyClient.parseBoolean(output[_IT]);
    }
    if (output[_M] != null) {
        contents[_M] = smithyClient.expectString(output[_M]);
    }
    return contents;
};
const de_ListMFADeviceTagsResponse = (output, context) => {
    const contents = {};
    if (String(output.Tags).trim() === "") {
        contents[_T] = [];
    }
    else if (output[_T] != null && output[_T][_me] != null) {
        contents[_T] = de_tagListType(smithyClient.getArrayIfSingleItem(output[_T][_me]));
    }
    if (output[_IT] != null) {
        contents[_IT] = smithyClient.parseBoolean(output[_IT]);
    }
    if (output[_M] != null) {
        contents[_M] = smithyClient.expectString(output[_M]);
    }
    return contents;
};
const de_ListOpenIDConnectProvidersResponse = (output, context) => {
    const contents = {};
    if (String(output.OpenIDConnectProviderList).trim() === "") {
        contents[_OIDCPL] = [];
    }
    else if (output[_OIDCPL] != null && output[_OIDCPL][_me] != null) {
        contents[_OIDCPL] = de_OpenIDConnectProviderListType(smithyClient.getArrayIfSingleItem(output[_OIDCPL][_me]));
    }
    return contents;
};
const de_ListOpenIDConnectProviderTagsResponse = (output, context) => {
    const contents = {};
    if (String(output.Tags).trim() === "") {
        contents[_T] = [];
    }
    else if (output[_T] != null && output[_T][_me] != null) {
        contents[_T] = de_tagListType(smithyClient.getArrayIfSingleItem(output[_T][_me]));
    }
    if (output[_IT] != null) {
        contents[_IT] = smithyClient.parseBoolean(output[_IT]);
    }
    if (output[_M] != null) {
        contents[_M] = smithyClient.expectString(output[_M]);
    }
    return contents;
};
const de_ListOrganizationsFeaturesResponse = (output, context) => {
    const contents = {};
    if (output[_OI] != null) {
        contents[_OI] = smithyClient.expectString(output[_OI]);
    }
    if (String(output.EnabledFeatures).trim() === "") {
        contents[_EFn] = [];
    }
    else if (output[_EFn] != null && output[_EFn][_me] != null) {
        contents[_EFn] = de_FeaturesListType(smithyClient.getArrayIfSingleItem(output[_EFn][_me]));
    }
    return contents;
};
const de_ListPoliciesGrantingServiceAccessEntry = (output, context) => {
    const contents = {};
    if (output[_SNer] != null) {
        contents[_SNer] = smithyClient.expectString(output[_SNer]);
    }
    if (String(output.Policies).trim() === "") {
        contents[_Pol] = [];
    }
    else if (output[_Pol] != null && output[_Pol][_me] != null) {
        contents[_Pol] = de_policyGrantingServiceAccessListType(smithyClient.getArrayIfSingleItem(output[_Pol][_me]));
    }
    return contents;
};
const de_ListPoliciesGrantingServiceAccessResponse = (output, context) => {
    const contents = {};
    if (String(output.PoliciesGrantingServiceAccess).trim() === "") {
        contents[_PGSA] = [];
    }
    else if (output[_PGSA] != null && output[_PGSA][_me] != null) {
        contents[_PGSA] = de_listPolicyGrantingServiceAccessResponseListType(smithyClient.getArrayIfSingleItem(output[_PGSA][_me]));
    }
    if (output[_IT] != null) {
        contents[_IT] = smithyClient.parseBoolean(output[_IT]);
    }
    if (output[_M] != null) {
        contents[_M] = smithyClient.expectString(output[_M]);
    }
    return contents;
};
const de_ListPoliciesResponse = (output, context) => {
    const contents = {};
    if (String(output.Policies).trim() === "") {
        contents[_Pol] = [];
    }
    else if (output[_Pol] != null && output[_Pol][_me] != null) {
        contents[_Pol] = de_policyListType(smithyClient.getArrayIfSingleItem(output[_Pol][_me]));
    }
    if (output[_IT] != null) {
        contents[_IT] = smithyClient.parseBoolean(output[_IT]);
    }
    if (output[_M] != null) {
        contents[_M] = smithyClient.expectString(output[_M]);
    }
    return contents;
};
const de_listPolicyGrantingServiceAccessResponseListType = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ListPoliciesGrantingServiceAccessEntry(entry);
    });
};
const de_ListPolicyTagsResponse = (output, context) => {
    const contents = {};
    if (String(output.Tags).trim() === "") {
        contents[_T] = [];
    }
    else if (output[_T] != null && output[_T][_me] != null) {
        contents[_T] = de_tagListType(smithyClient.getArrayIfSingleItem(output[_T][_me]));
    }
    if (output[_IT] != null) {
        contents[_IT] = smithyClient.parseBoolean(output[_IT]);
    }
    if (output[_M] != null) {
        contents[_M] = smithyClient.expectString(output[_M]);
    }
    return contents;
};
const de_ListPolicyVersionsResponse = (output, context) => {
    const contents = {};
    if (String(output.Versions).trim() === "") {
        contents[_Ve] = [];
    }
    else if (output[_Ve] != null && output[_Ve][_me] != null) {
        contents[_Ve] = de_policyDocumentVersionListType(smithyClient.getArrayIfSingleItem(output[_Ve][_me]));
    }
    if (output[_IT] != null) {
        contents[_IT] = smithyClient.parseBoolean(output[_IT]);
    }
    if (output[_M] != null) {
        contents[_M] = smithyClient.expectString(output[_M]);
    }
    return contents;
};
const de_ListRolePoliciesResponse = (output, context) => {
    const contents = {};
    if (String(output.PolicyNames).trim() === "") {
        contents[_PNo] = [];
    }
    else if (output[_PNo] != null && output[_PNo][_me] != null) {
        contents[_PNo] = de_policyNameListType(smithyClient.getArrayIfSingleItem(output[_PNo][_me]));
    }
    if (output[_IT] != null) {
        contents[_IT] = smithyClient.parseBoolean(output[_IT]);
    }
    if (output[_M] != null) {
        contents[_M] = smithyClient.expectString(output[_M]);
    }
    return contents;
};
const de_ListRolesResponse = (output, context) => {
    const contents = {};
    if (String(output.Roles).trim() === "") {
        contents[_Rol] = [];
    }
    else if (output[_Rol] != null && output[_Rol][_me] != null) {
        contents[_Rol] = de_roleListType(smithyClient.getArrayIfSingleItem(output[_Rol][_me]));
    }
    if (output[_IT] != null) {
        contents[_IT] = smithyClient.parseBoolean(output[_IT]);
    }
    if (output[_M] != null) {
        contents[_M] = smithyClient.expectString(output[_M]);
    }
    return contents;
};
const de_ListRoleTagsResponse = (output, context) => {
    const contents = {};
    if (String(output.Tags).trim() === "") {
        contents[_T] = [];
    }
    else if (output[_T] != null && output[_T][_me] != null) {
        contents[_T] = de_tagListType(smithyClient.getArrayIfSingleItem(output[_T][_me]));
    }
    if (output[_IT] != null) {
        contents[_IT] = smithyClient.parseBoolean(output[_IT]);
    }
    if (output[_M] != null) {
        contents[_M] = smithyClient.expectString(output[_M]);
    }
    return contents;
};
const de_ListSAMLProvidersResponse = (output, context) => {
    const contents = {};
    if (String(output.SAMLProviderList).trim() === "") {
        contents[_SAMLPL] = [];
    }
    else if (output[_SAMLPL] != null && output[_SAMLPL][_me] != null) {
        contents[_SAMLPL] = de_SAMLProviderListType(smithyClient.getArrayIfSingleItem(output[_SAMLPL][_me]));
    }
    return contents;
};
const de_ListSAMLProviderTagsResponse = (output, context) => {
    const contents = {};
    if (String(output.Tags).trim() === "") {
        contents[_T] = [];
    }
    else if (output[_T] != null && output[_T][_me] != null) {
        contents[_T] = de_tagListType(smithyClient.getArrayIfSingleItem(output[_T][_me]));
    }
    if (output[_IT] != null) {
        contents[_IT] = smithyClient.parseBoolean(output[_IT]);
    }
    if (output[_M] != null) {
        contents[_M] = smithyClient.expectString(output[_M]);
    }
    return contents;
};
const de_ListServerCertificatesResponse = (output, context) => {
    const contents = {};
    if (String(output.ServerCertificateMetadataList).trim() === "") {
        contents[_SCML] = [];
    }
    else if (output[_SCML] != null && output[_SCML][_me] != null) {
        contents[_SCML] = de_serverCertificateMetadataListType(smithyClient.getArrayIfSingleItem(output[_SCML][_me]));
    }
    if (output[_IT] != null) {
        contents[_IT] = smithyClient.parseBoolean(output[_IT]);
    }
    if (output[_M] != null) {
        contents[_M] = smithyClient.expectString(output[_M]);
    }
    return contents;
};
const de_ListServerCertificateTagsResponse = (output, context) => {
    const contents = {};
    if (String(output.Tags).trim() === "") {
        contents[_T] = [];
    }
    else if (output[_T] != null && output[_T][_me] != null) {
        contents[_T] = de_tagListType(smithyClient.getArrayIfSingleItem(output[_T][_me]));
    }
    if (output[_IT] != null) {
        contents[_IT] = smithyClient.parseBoolean(output[_IT]);
    }
    if (output[_M] != null) {
        contents[_M] = smithyClient.expectString(output[_M]);
    }
    return contents;
};
const de_ListServiceSpecificCredentialsResponse = (output, context) => {
    const contents = {};
    if (String(output.ServiceSpecificCredentials).trim() === "") {
        contents[_SSCe] = [];
    }
    else if (output[_SSCe] != null && output[_SSCe][_me] != null) {
        contents[_SSCe] = de_ServiceSpecificCredentialsListType(smithyClient.getArrayIfSingleItem(output[_SSCe][_me]));
    }
    if (output[_M] != null) {
        contents[_M] = smithyClient.expectString(output[_M]);
    }
    if (output[_IT] != null) {
        contents[_IT] = smithyClient.parseBoolean(output[_IT]);
    }
    return contents;
};
const de_ListSigningCertificatesResponse = (output, context) => {
    const contents = {};
    if (String(output.Certificates).trim() === "") {
        contents[_Cer] = [];
    }
    else if (output[_Cer] != null && output[_Cer][_me] != null) {
        contents[_Cer] = de_certificateListType(smithyClient.getArrayIfSingleItem(output[_Cer][_me]));
    }
    if (output[_IT] != null) {
        contents[_IT] = smithyClient.parseBoolean(output[_IT]);
    }
    if (output[_M] != null) {
        contents[_M] = smithyClient.expectString(output[_M]);
    }
    return contents;
};
const de_ListSSHPublicKeysResponse = (output, context) => {
    const contents = {};
    if (String(output.SSHPublicKeys).trim() === "") {
        contents[_SSHPKu] = [];
    }
    else if (output[_SSHPKu] != null && output[_SSHPKu][_me] != null) {
        contents[_SSHPKu] = de_SSHPublicKeyListType(smithyClient.getArrayIfSingleItem(output[_SSHPKu][_me]));
    }
    if (output[_IT] != null) {
        contents[_IT] = smithyClient.parseBoolean(output[_IT]);
    }
    if (output[_M] != null) {
        contents[_M] = smithyClient.expectString(output[_M]);
    }
    return contents;
};
const de_ListUserPoliciesResponse = (output, context) => {
    const contents = {};
    if (String(output.PolicyNames).trim() === "") {
        contents[_PNo] = [];
    }
    else if (output[_PNo] != null && output[_PNo][_me] != null) {
        contents[_PNo] = de_policyNameListType(smithyClient.getArrayIfSingleItem(output[_PNo][_me]));
    }
    if (output[_IT] != null) {
        contents[_IT] = smithyClient.parseBoolean(output[_IT]);
    }
    if (output[_M] != null) {
        contents[_M] = smithyClient.expectString(output[_M]);
    }
    return contents;
};
const de_ListUsersResponse = (output, context) => {
    const contents = {};
    if (String(output.Users).trim() === "") {
        contents[_Use] = [];
    }
    else if (output[_Use] != null && output[_Use][_me] != null) {
        contents[_Use] = de_userListType(smithyClient.getArrayIfSingleItem(output[_Use][_me]));
    }
    if (output[_IT] != null) {
        contents[_IT] = smithyClient.parseBoolean(output[_IT]);
    }
    if (output[_M] != null) {
        contents[_M] = smithyClient.expectString(output[_M]);
    }
    return contents;
};
const de_ListUserTagsResponse = (output, context) => {
    const contents = {};
    if (String(output.Tags).trim() === "") {
        contents[_T] = [];
    }
    else if (output[_T] != null && output[_T][_me] != null) {
        contents[_T] = de_tagListType(smithyClient.getArrayIfSingleItem(output[_T][_me]));
    }
    if (output[_IT] != null) {
        contents[_IT] = smithyClient.parseBoolean(output[_IT]);
    }
    if (output[_M] != null) {
        contents[_M] = smithyClient.expectString(output[_M]);
    }
    return contents;
};
const de_ListVirtualMFADevicesResponse = (output, context) => {
    const contents = {};
    if (String(output.VirtualMFADevices).trim() === "") {
        contents[_VMFADi] = [];
    }
    else if (output[_VMFADi] != null && output[_VMFADi][_me] != null) {
        contents[_VMFADi] = de_virtualMFADeviceListType(smithyClient.getArrayIfSingleItem(output[_VMFADi][_me]), context);
    }
    if (output[_IT] != null) {
        contents[_IT] = smithyClient.parseBoolean(output[_IT]);
    }
    if (output[_M] != null) {
        contents[_M] = smithyClient.expectString(output[_M]);
    }
    return contents;
};
const de_LoginProfile = (output, context) => {
    const contents = {};
    if (output[_UN] != null) {
        contents[_UN] = smithyClient.expectString(output[_UN]);
    }
    if (output[_CD] != null) {
        contents[_CD] = smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(output[_CD]));
    }
    if (output[_PRR] != null) {
        contents[_PRR] = smithyClient.parseBoolean(output[_PRR]);
    }
    return contents;
};
const de_MalformedCertificateException = (output, context) => {
    const contents = {};
    if (output[_m] != null) {
        contents[_m] = smithyClient.expectString(output[_m]);
    }
    return contents;
};
const de_MalformedPolicyDocumentException = (output, context) => {
    const contents = {};
    if (output[_m] != null) {
        contents[_m] = smithyClient.expectString(output[_m]);
    }
    return contents;
};
const de_ManagedPolicyDetail = (output, context) => {
    const contents = {};
    if (output[_PN] != null) {
        contents[_PN] = smithyClient.expectString(output[_PN]);
    }
    if (output[_PI] != null) {
        contents[_PI] = smithyClient.expectString(output[_PI]);
    }
    if (output[_Ar] != null) {
        contents[_Ar] = smithyClient.expectString(output[_Ar]);
    }
    if (output[_P] != null) {
        contents[_P] = smithyClient.expectString(output[_P]);
    }
    if (output[_DVI] != null) {
        contents[_DVI] = smithyClient.expectString(output[_DVI]);
    }
    if (output[_ACt] != null) {
        contents[_ACt] = smithyClient.strictParseInt32(output[_ACt]);
    }
    if (output[_PBUC] != null) {
        contents[_PBUC] = smithyClient.strictParseInt32(output[_PBUC]);
    }
    if (output[_IA] != null) {
        contents[_IA] = smithyClient.parseBoolean(output[_IA]);
    }
    if (output[_D] != null) {
        contents[_D] = smithyClient.expectString(output[_D]);
    }
    if (output[_CD] != null) {
        contents[_CD] = smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(output[_CD]));
    }
    if (output[_UD] != null) {
        contents[_UD] = smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(output[_UD]));
    }
    if (String(output.PolicyVersionList).trim() === "") {
        contents[_PVL] = [];
    }
    else if (output[_PVL] != null && output[_PVL][_me] != null) {
        contents[_PVL] = de_policyDocumentVersionListType(smithyClient.getArrayIfSingleItem(output[_PVL][_me]));
    }
    return contents;
};
const de_ManagedPolicyDetailListType = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ManagedPolicyDetail(entry);
    });
};
const de_MFADevice = (output, context) => {
    const contents = {};
    if (output[_UN] != null) {
        contents[_UN] = smithyClient.expectString(output[_UN]);
    }
    if (output[_SNe] != null) {
        contents[_SNe] = smithyClient.expectString(output[_SNe]);
    }
    if (output[_EDn] != null) {
        contents[_EDn] = smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(output[_EDn]));
    }
    return contents;
};
const de_mfaDeviceListType = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_MFADevice(entry);
    });
};
const de_NoSuchEntityException = (output, context) => {
    const contents = {};
    if (output[_m] != null) {
        contents[_m] = smithyClient.expectString(output[_m]);
    }
    return contents;
};
const de_OpenIDConnectProviderListEntry = (output, context) => {
    const contents = {};
    if (output[_Ar] != null) {
        contents[_Ar] = smithyClient.expectString(output[_Ar]);
    }
    return contents;
};
const de_OpenIDConnectProviderListType = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_OpenIDConnectProviderListEntry(entry);
    });
};
const de_OpenIdIdpCommunicationErrorException = (output, context) => {
    const contents = {};
    if (output[_m] != null) {
        contents[_m] = smithyClient.expectString(output[_m]);
    }
    return contents;
};
const de_OrganizationNotFoundException = (output, context) => {
    const contents = {};
    if (output[_Me] != null) {
        contents[_Me] = smithyClient.expectString(output[_Me]);
    }
    return contents;
};
const de_OrganizationNotInAllFeaturesModeException = (output, context) => {
    const contents = {};
    if (output[_Me] != null) {
        contents[_Me] = smithyClient.expectString(output[_Me]);
    }
    return contents;
};
const de_OrganizationsDecisionDetail = (output, context) => {
    const contents = {};
    if (output[_ABO] != null) {
        contents[_ABO] = smithyClient.parseBoolean(output[_ABO]);
    }
    return contents;
};
const de_PasswordPolicy = (output, context) => {
    const contents = {};
    if (output[_MPL] != null) {
        contents[_MPL] = smithyClient.strictParseInt32(output[_MPL]);
    }
    if (output[_RS] != null) {
        contents[_RS] = smithyClient.parseBoolean(output[_RS]);
    }
    if (output[_RNe] != null) {
        contents[_RNe] = smithyClient.parseBoolean(output[_RNe]);
    }
    if (output[_RUC] != null) {
        contents[_RUC] = smithyClient.parseBoolean(output[_RUC]);
    }
    if (output[_RLC] != null) {
        contents[_RLC] = smithyClient.parseBoolean(output[_RLC]);
    }
    if (output[_AUTCP] != null) {
        contents[_AUTCP] = smithyClient.parseBoolean(output[_AUTCP]);
    }
    if (output[_EPx] != null) {
        contents[_EPx] = smithyClient.parseBoolean(output[_EPx]);
    }
    if (output[_MPA] != null) {
        contents[_MPA] = smithyClient.strictParseInt32(output[_MPA]);
    }
    if (output[_PRPa] != null) {
        contents[_PRPa] = smithyClient.strictParseInt32(output[_PRPa]);
    }
    if (output[_HE] != null) {
        contents[_HE] = smithyClient.parseBoolean(output[_HE]);
    }
    return contents;
};
const de_PasswordPolicyViolationException = (output, context) => {
    const contents = {};
    if (output[_m] != null) {
        contents[_m] = smithyClient.expectString(output[_m]);
    }
    return contents;
};
const de_PermissionsBoundaryDecisionDetail = (output, context) => {
    const contents = {};
    if (output[_ABPB] != null) {
        contents[_ABPB] = smithyClient.parseBoolean(output[_ABPB]);
    }
    return contents;
};
const de_Policy = (output, context) => {
    const contents = {};
    if (output[_PN] != null) {
        contents[_PN] = smithyClient.expectString(output[_PN]);
    }
    if (output[_PI] != null) {
        contents[_PI] = smithyClient.expectString(output[_PI]);
    }
    if (output[_Ar] != null) {
        contents[_Ar] = smithyClient.expectString(output[_Ar]);
    }
    if (output[_P] != null) {
        contents[_P] = smithyClient.expectString(output[_P]);
    }
    if (output[_DVI] != null) {
        contents[_DVI] = smithyClient.expectString(output[_DVI]);
    }
    if (output[_ACt] != null) {
        contents[_ACt] = smithyClient.strictParseInt32(output[_ACt]);
    }
    if (output[_PBUC] != null) {
        contents[_PBUC] = smithyClient.strictParseInt32(output[_PBUC]);
    }
    if (output[_IA] != null) {
        contents[_IA] = smithyClient.parseBoolean(output[_IA]);
    }
    if (output[_D] != null) {
        contents[_D] = smithyClient.expectString(output[_D]);
    }
    if (output[_CD] != null) {
        contents[_CD] = smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(output[_CD]));
    }
    if (output[_UD] != null) {
        contents[_UD] = smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(output[_UD]));
    }
    if (String(output.Tags).trim() === "") {
        contents[_T] = [];
    }
    else if (output[_T] != null && output[_T][_me] != null) {
        contents[_T] = de_tagListType(smithyClient.getArrayIfSingleItem(output[_T][_me]));
    }
    return contents;
};
const de_PolicyDetail = (output, context) => {
    const contents = {};
    if (output[_PN] != null) {
        contents[_PN] = smithyClient.expectString(output[_PN]);
    }
    if (output[_PD] != null) {
        contents[_PD] = smithyClient.expectString(output[_PD]);
    }
    return contents;
};
const de_policyDetailListType = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_PolicyDetail(entry);
    });
};
const de_policyDocumentVersionListType = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_PolicyVersion(entry);
    });
};
const de_PolicyEvaluationException = (output, context) => {
    const contents = {};
    if (output[_m] != null) {
        contents[_m] = smithyClient.expectString(output[_m]);
    }
    return contents;
};
const de_PolicyGrantingServiceAccess = (output, context) => {
    const contents = {};
    if (output[_PN] != null) {
        contents[_PN] = smithyClient.expectString(output[_PN]);
    }
    if (output[_PT] != null) {
        contents[_PT] = smithyClient.expectString(output[_PT]);
    }
    if (output[_PA] != null) {
        contents[_PA] = smithyClient.expectString(output[_PA]);
    }
    if (output[_ET] != null) {
        contents[_ET] = smithyClient.expectString(output[_ET]);
    }
    if (output[_EN] != null) {
        contents[_EN] = smithyClient.expectString(output[_EN]);
    }
    return contents;
};
const de_policyGrantingServiceAccessListType = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_PolicyGrantingServiceAccess(entry);
    });
};
const de_PolicyGroup = (output, context) => {
    const contents = {};
    if (output[_GN] != null) {
        contents[_GN] = smithyClient.expectString(output[_GN]);
    }
    if (output[_GI] != null) {
        contents[_GI] = smithyClient.expectString(output[_GI]);
    }
    return contents;
};
const de_PolicyGroupListType = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_PolicyGroup(entry);
    });
};
const de_policyListType = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Policy(entry);
    });
};
const de_policyNameListType = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return smithyClient.expectString(entry);
    });
};
const de_PolicyNotAttachableException = (output, context) => {
    const contents = {};
    if (output[_m] != null) {
        contents[_m] = smithyClient.expectString(output[_m]);
    }
    return contents;
};
const de_PolicyRole = (output, context) => {
    const contents = {};
    if (output[_RN] != null) {
        contents[_RN] = smithyClient.expectString(output[_RN]);
    }
    if (output[_RI] != null) {
        contents[_RI] = smithyClient.expectString(output[_RI]);
    }
    return contents;
};
const de_PolicyRoleListType = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_PolicyRole(entry);
    });
};
const de_PolicyUser = (output, context) => {
    const contents = {};
    if (output[_UN] != null) {
        contents[_UN] = smithyClient.expectString(output[_UN]);
    }
    if (output[_UI] != null) {
        contents[_UI] = smithyClient.expectString(output[_UI]);
    }
    return contents;
};
const de_PolicyUserListType = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_PolicyUser(entry);
    });
};
const de_PolicyVersion = (output, context) => {
    const contents = {};
    if (output[_Do] != null) {
        contents[_Do] = smithyClient.expectString(output[_Do]);
    }
    if (output[_VI] != null) {
        contents[_VI] = smithyClient.expectString(output[_VI]);
    }
    if (output[_IDV] != null) {
        contents[_IDV] = smithyClient.parseBoolean(output[_IDV]);
    }
    if (output[_CD] != null) {
        contents[_CD] = smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(output[_CD]));
    }
    return contents;
};
const de_Position = (output, context) => {
    const contents = {};
    if (output[_L] != null) {
        contents[_L] = smithyClient.strictParseInt32(output[_L]);
    }
    if (output[_Col] != null) {
        contents[_Col] = smithyClient.strictParseInt32(output[_Col]);
    }
    return contents;
};
const de_privateKeyList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_SAMLPrivateKey(entry);
    });
};
const de_ReportGenerationLimitExceededException = (output, context) => {
    const contents = {};
    if (output[_m] != null) {
        contents[_m] = smithyClient.expectString(output[_m]);
    }
    return contents;
};
const de_ResetServiceSpecificCredentialResponse = (output, context) => {
    const contents = {};
    if (output[_SSC] != null) {
        contents[_SSC] = de_ServiceSpecificCredential(output[_SSC]);
    }
    return contents;
};
const de_ResourceSpecificResult = (output, context) => {
    const contents = {};
    if (output[_ERN] != null) {
        contents[_ERN] = smithyClient.expectString(output[_ERN]);
    }
    if (output[_ERD] != null) {
        contents[_ERD] = smithyClient.expectString(output[_ERD]);
    }
    if (String(output.MatchedStatements).trim() === "") {
        contents[_MS] = [];
    }
    else if (output[_MS] != null && output[_MS][_me] != null) {
        contents[_MS] = de_StatementListType(smithyClient.getArrayIfSingleItem(output[_MS][_me]));
    }
    if (String(output.MissingContextValues).trim() === "") {
        contents[_MCV] = [];
    }
    else if (output[_MCV] != null && output[_MCV][_me] != null) {
        contents[_MCV] = de_ContextKeyNamesResultListType(smithyClient.getArrayIfSingleItem(output[_MCV][_me]));
    }
    if (String(output.EvalDecisionDetails).trim() === "") {
        contents[_EDD] = {};
    }
    else if (output[_EDD] != null && output[_EDD][_e] != null) {
        contents[_EDD] = de_EvalDecisionDetailsType(smithyClient.getArrayIfSingleItem(output[_EDD][_e]));
    }
    if (output[_PBDD] != null) {
        contents[_PBDD] = de_PermissionsBoundaryDecisionDetail(output[_PBDD]);
    }
    return contents;
};
const de_ResourceSpecificResultListType = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ResourceSpecificResult(entry);
    });
};
const de_Role = (output, context) => {
    const contents = {};
    if (output[_P] != null) {
        contents[_P] = smithyClient.expectString(output[_P]);
    }
    if (output[_RN] != null) {
        contents[_RN] = smithyClient.expectString(output[_RN]);
    }
    if (output[_RI] != null) {
        contents[_RI] = smithyClient.expectString(output[_RI]);
    }
    if (output[_Ar] != null) {
        contents[_Ar] = smithyClient.expectString(output[_Ar]);
    }
    if (output[_CD] != null) {
        contents[_CD] = smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(output[_CD]));
    }
    if (output[_ARPD] != null) {
        contents[_ARPD] = smithyClient.expectString(output[_ARPD]);
    }
    if (output[_D] != null) {
        contents[_D] = smithyClient.expectString(output[_D]);
    }
    if (output[_MSD] != null) {
        contents[_MSD] = smithyClient.strictParseInt32(output[_MSD]);
    }
    if (output[_PB] != null) {
        contents[_PB] = de_AttachedPermissionsBoundary(output[_PB]);
    }
    if (String(output.Tags).trim() === "") {
        contents[_T] = [];
    }
    else if (output[_T] != null && output[_T][_me] != null) {
        contents[_T] = de_tagListType(smithyClient.getArrayIfSingleItem(output[_T][_me]));
    }
    if (output[_RLU] != null) {
        contents[_RLU] = de_RoleLastUsed(output[_RLU]);
    }
    return contents;
};
const de_RoleDetail = (output, context) => {
    const contents = {};
    if (output[_P] != null) {
        contents[_P] = smithyClient.expectString(output[_P]);
    }
    if (output[_RN] != null) {
        contents[_RN] = smithyClient.expectString(output[_RN]);
    }
    if (output[_RI] != null) {
        contents[_RI] = smithyClient.expectString(output[_RI]);
    }
    if (output[_Ar] != null) {
        contents[_Ar] = smithyClient.expectString(output[_Ar]);
    }
    if (output[_CD] != null) {
        contents[_CD] = smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(output[_CD]));
    }
    if (output[_ARPD] != null) {
        contents[_ARPD] = smithyClient.expectString(output[_ARPD]);
    }
    if (String(output.InstanceProfileList).trim() === "") {
        contents[_IPL] = [];
    }
    else if (output[_IPL] != null && output[_IPL][_me] != null) {
        contents[_IPL] = de_instanceProfileListType(smithyClient.getArrayIfSingleItem(output[_IPL][_me]));
    }
    if (String(output.RolePolicyList).trim() === "") {
        contents[_RPL] = [];
    }
    else if (output[_RPL] != null && output[_RPL][_me] != null) {
        contents[_RPL] = de_policyDetailListType(smithyClient.getArrayIfSingleItem(output[_RPL][_me]));
    }
    if (String(output.AttachedManagedPolicies).trim() === "") {
        contents[_AMP] = [];
    }
    else if (output[_AMP] != null && output[_AMP][_me] != null) {
        contents[_AMP] = de_attachedPoliciesListType(smithyClient.getArrayIfSingleItem(output[_AMP][_me]));
    }
    if (output[_PB] != null) {
        contents[_PB] = de_AttachedPermissionsBoundary(output[_PB]);
    }
    if (String(output.Tags).trim() === "") {
        contents[_T] = [];
    }
    else if (output[_T] != null && output[_T][_me] != null) {
        contents[_T] = de_tagListType(smithyClient.getArrayIfSingleItem(output[_T][_me]));
    }
    if (output[_RLU] != null) {
        contents[_RLU] = de_RoleLastUsed(output[_RLU]);
    }
    return contents;
};
const de_roleDetailListType = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_RoleDetail(entry);
    });
};
const de_RoleLastUsed = (output, context) => {
    const contents = {};
    if (output[_LUD] != null) {
        contents[_LUD] = smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(output[_LUD]));
    }
    if (output[_R] != null) {
        contents[_R] = smithyClient.expectString(output[_R]);
    }
    return contents;
};
const de_roleListType = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Role(entry);
    });
};
const de_RoleUsageListType = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_RoleUsageType(entry);
    });
};
const de_RoleUsageType = (output, context) => {
    const contents = {};
    if (output[_R] != null) {
        contents[_R] = smithyClient.expectString(output[_R]);
    }
    if (String(output.Resources).trim() === "") {
        contents[_Res] = [];
    }
    else if (output[_Res] != null && output[_Res][_me] != null) {
        contents[_Res] = de_ArnListType(smithyClient.getArrayIfSingleItem(output[_Res][_me]));
    }
    return contents;
};
const de_SAMLPrivateKey = (output, context) => {
    const contents = {};
    if (output[_KI] != null) {
        contents[_KI] = smithyClient.expectString(output[_KI]);
    }
    if (output[_Ti] != null) {
        contents[_Ti] = smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(output[_Ti]));
    }
    return contents;
};
const de_SAMLProviderListEntry = (output, context) => {
    const contents = {};
    if (output[_Ar] != null) {
        contents[_Ar] = smithyClient.expectString(output[_Ar]);
    }
    if (output[_VU] != null) {
        contents[_VU] = smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(output[_VU]));
    }
    if (output[_CD] != null) {
        contents[_CD] = smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(output[_CD]));
    }
    return contents;
};
const de_SAMLProviderListType = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_SAMLProviderListEntry(entry);
    });
};
const de_ServerCertificate = (output, context) => {
    const contents = {};
    if (output[_SCM] != null) {
        contents[_SCM] = de_ServerCertificateMetadata(output[_SCM]);
    }
    if (output[_CB] != null) {
        contents[_CB] = smithyClient.expectString(output[_CB]);
    }
    if (output[_CC] != null) {
        contents[_CC] = smithyClient.expectString(output[_CC]);
    }
    if (String(output.Tags).trim() === "") {
        contents[_T] = [];
    }
    else if (output[_T] != null && output[_T][_me] != null) {
        contents[_T] = de_tagListType(smithyClient.getArrayIfSingleItem(output[_T][_me]));
    }
    return contents;
};
const de_ServerCertificateMetadata = (output, context) => {
    const contents = {};
    if (output[_P] != null) {
        contents[_P] = smithyClient.expectString(output[_P]);
    }
    if (output[_SCN] != null) {
        contents[_SCN] = smithyClient.expectString(output[_SCN]);
    }
    if (output[_SCI] != null) {
        contents[_SCI] = smithyClient.expectString(output[_SCI]);
    }
    if (output[_Ar] != null) {
        contents[_Ar] = smithyClient.expectString(output[_Ar]);
    }
    if (output[_UDp] != null) {
        contents[_UDp] = smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(output[_UDp]));
    }
    if (output[_Ex] != null) {
        contents[_Ex] = smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(output[_Ex]));
    }
    return contents;
};
const de_serverCertificateMetadataListType = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ServerCertificateMetadata(entry);
    });
};
const de_ServiceAccessNotEnabledException = (output, context) => {
    const contents = {};
    if (output[_Me] != null) {
        contents[_Me] = smithyClient.expectString(output[_Me]);
    }
    return contents;
};
const de_ServiceFailureException = (output, context) => {
    const contents = {};
    if (output[_m] != null) {
        contents[_m] = smithyClient.expectString(output[_m]);
    }
    return contents;
};
const de_ServiceLastAccessed = (output, context) => {
    const contents = {};
    if (output[_SN] != null) {
        contents[_SN] = smithyClient.expectString(output[_SN]);
    }
    if (output[_LA] != null) {
        contents[_LA] = smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(output[_LA]));
    }
    if (output[_SNer] != null) {
        contents[_SNer] = smithyClient.expectString(output[_SNer]);
    }
    if (output[_LAE] != null) {
        contents[_LAE] = smithyClient.expectString(output[_LAE]);
    }
    if (output[_LAR] != null) {
        contents[_LAR] = smithyClient.expectString(output[_LAR]);
    }
    if (output[_TAE] != null) {
        contents[_TAE] = smithyClient.strictParseInt32(output[_TAE]);
    }
    if (String(output.TrackedActionsLastAccessed).trim() === "") {
        contents[_TALA] = [];
    }
    else if (output[_TALA] != null && output[_TALA][_me] != null) {
        contents[_TALA] = de_TrackedActionsLastAccessed(smithyClient.getArrayIfSingleItem(output[_TALA][_me]));
    }
    return contents;
};
const de_ServiceNotSupportedException = (output, context) => {
    const contents = {};
    if (output[_m] != null) {
        contents[_m] = smithyClient.expectString(output[_m]);
    }
    return contents;
};
const de_ServicesLastAccessed = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ServiceLastAccessed(entry);
    });
};
const de_ServiceSpecificCredential = (output, context) => {
    const contents = {};
    if (output[_CD] != null) {
        contents[_CD] = smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(output[_CD]));
    }
    if (output[_EDx] != null) {
        contents[_EDx] = smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(output[_EDx]));
    }
    if (output[_SN] != null) {
        contents[_SN] = smithyClient.expectString(output[_SN]);
    }
    if (output[_SUN] != null) {
        contents[_SUN] = smithyClient.expectString(output[_SUN]);
    }
    if (output[_SP] != null) {
        contents[_SP] = smithyClient.expectString(output[_SP]);
    }
    if (output[_SCA] != null) {
        contents[_SCA] = smithyClient.expectString(output[_SCA]);
    }
    if (output[_SCS] != null) {
        contents[_SCS] = smithyClient.expectString(output[_SCS]);
    }
    if (output[_SSCI] != null) {
        contents[_SSCI] = smithyClient.expectString(output[_SSCI]);
    }
    if (output[_UN] != null) {
        contents[_UN] = smithyClient.expectString(output[_UN]);
    }
    if (output[_St] != null) {
        contents[_St] = smithyClient.expectString(output[_St]);
    }
    return contents;
};
const de_ServiceSpecificCredentialMetadata = (output, context) => {
    const contents = {};
    if (output[_UN] != null) {
        contents[_UN] = smithyClient.expectString(output[_UN]);
    }
    if (output[_St] != null) {
        contents[_St] = smithyClient.expectString(output[_St]);
    }
    if (output[_SUN] != null) {
        contents[_SUN] = smithyClient.expectString(output[_SUN]);
    }
    if (output[_SCA] != null) {
        contents[_SCA] = smithyClient.expectString(output[_SCA]);
    }
    if (output[_CD] != null) {
        contents[_CD] = smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(output[_CD]));
    }
    if (output[_EDx] != null) {
        contents[_EDx] = smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(output[_EDx]));
    }
    if (output[_SSCI] != null) {
        contents[_SSCI] = smithyClient.expectString(output[_SSCI]);
    }
    if (output[_SN] != null) {
        contents[_SN] = smithyClient.expectString(output[_SN]);
    }
    return contents;
};
const de_ServiceSpecificCredentialsListType = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ServiceSpecificCredentialMetadata(entry);
    });
};
const de_SigningCertificate = (output, context) => {
    const contents = {};
    if (output[_UN] != null) {
        contents[_UN] = smithyClient.expectString(output[_UN]);
    }
    if (output[_CI] != null) {
        contents[_CI] = smithyClient.expectString(output[_CI]);
    }
    if (output[_CB] != null) {
        contents[_CB] = smithyClient.expectString(output[_CB]);
    }
    if (output[_St] != null) {
        contents[_St] = smithyClient.expectString(output[_St]);
    }
    if (output[_UDp] != null) {
        contents[_UDp] = smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(output[_UDp]));
    }
    return contents;
};
const de_SimulatePolicyResponse = (output, context) => {
    const contents = {};
    if (String(output.EvaluationResults).trim() === "") {
        contents[_ER] = [];
    }
    else if (output[_ER] != null && output[_ER][_me] != null) {
        contents[_ER] = de_EvaluationResultsListType(smithyClient.getArrayIfSingleItem(output[_ER][_me]));
    }
    if (output[_IT] != null) {
        contents[_IT] = smithyClient.parseBoolean(output[_IT]);
    }
    if (output[_M] != null) {
        contents[_M] = smithyClient.expectString(output[_M]);
    }
    return contents;
};
const de_SSHPublicKey = (output, context) => {
    const contents = {};
    if (output[_UN] != null) {
        contents[_UN] = smithyClient.expectString(output[_UN]);
    }
    if (output[_SSHPKI] != null) {
        contents[_SSHPKI] = smithyClient.expectString(output[_SSHPKI]);
    }
    if (output[_Fi] != null) {
        contents[_Fi] = smithyClient.expectString(output[_Fi]);
    }
    if (output[_SSHPKB] != null) {
        contents[_SSHPKB] = smithyClient.expectString(output[_SSHPKB]);
    }
    if (output[_St] != null) {
        contents[_St] = smithyClient.expectString(output[_St]);
    }
    if (output[_UDp] != null) {
        contents[_UDp] = smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(output[_UDp]));
    }
    return contents;
};
const de_SSHPublicKeyListType = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_SSHPublicKeyMetadata(entry);
    });
};
const de_SSHPublicKeyMetadata = (output, context) => {
    const contents = {};
    if (output[_UN] != null) {
        contents[_UN] = smithyClient.expectString(output[_UN]);
    }
    if (output[_SSHPKI] != null) {
        contents[_SSHPKI] = smithyClient.expectString(output[_SSHPKI]);
    }
    if (output[_St] != null) {
        contents[_St] = smithyClient.expectString(output[_St]);
    }
    if (output[_UDp] != null) {
        contents[_UDp] = smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(output[_UDp]));
    }
    return contents;
};
const de_Statement = (output, context) => {
    const contents = {};
    if (output[_SPI] != null) {
        contents[_SPI] = smithyClient.expectString(output[_SPI]);
    }
    if (output[_SPT] != null) {
        contents[_SPT] = smithyClient.expectString(output[_SPT]);
    }
    if (output[_SPt] != null) {
        contents[_SPt] = de_Position(output[_SPt]);
    }
    if (output[_EPn] != null) {
        contents[_EPn] = de_Position(output[_EPn]);
    }
    return contents;
};
const de_StatementListType = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Statement(entry);
    });
};
const de_summaryMapType = (output, context) => {
    return output.reduce((acc, pair) => {
        if (pair["value"] === null) {
            return acc;
        }
        acc[pair["key"]] = smithyClient.strictParseInt32(pair["value"]);
        return acc;
    }, {});
};
const de_Tag = (output, context) => {
    const contents = {};
    if (output[_K] != null) {
        contents[_K] = smithyClient.expectString(output[_K]);
    }
    if (output[_Va] != null) {
        contents[_Va] = smithyClient.expectString(output[_Va]);
    }
    return contents;
};
const de_tagListType = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Tag(entry);
    });
};
const de_thumbprintListType = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return smithyClient.expectString(entry);
    });
};
const de_TrackedActionLastAccessed = (output, context) => {
    const contents = {};
    if (output[_ANc] != null) {
        contents[_ANc] = smithyClient.expectString(output[_ANc]);
    }
    if (output[_LAEa] != null) {
        contents[_LAEa] = smithyClient.expectString(output[_LAEa]);
    }
    if (output[_LATa] != null) {
        contents[_LATa] = smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(output[_LATa]));
    }
    if (output[_LARa] != null) {
        contents[_LARa] = smithyClient.expectString(output[_LARa]);
    }
    return contents;
};
const de_TrackedActionsLastAccessed = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_TrackedActionLastAccessed(entry);
    });
};
const de_UnmodifiableEntityException = (output, context) => {
    const contents = {};
    if (output[_m] != null) {
        contents[_m] = smithyClient.expectString(output[_m]);
    }
    return contents;
};
const de_UnrecognizedPublicKeyEncodingException = (output, context) => {
    const contents = {};
    if (output[_m] != null) {
        contents[_m] = smithyClient.expectString(output[_m]);
    }
    return contents;
};
const de_UpdateRoleDescriptionResponse = (output, context) => {
    const contents = {};
    if (output[_Ro] != null) {
        contents[_Ro] = de_Role(output[_Ro]);
    }
    return contents;
};
const de_UpdateRoleResponse = (output, context) => {
    const contents = {};
    return contents;
};
const de_UpdateSAMLProviderResponse = (output, context) => {
    const contents = {};
    if (output[_SAMLPA] != null) {
        contents[_SAMLPA] = smithyClient.expectString(output[_SAMLPA]);
    }
    return contents;
};
const de_UploadServerCertificateResponse = (output, context) => {
    const contents = {};
    if (output[_SCM] != null) {
        contents[_SCM] = de_ServerCertificateMetadata(output[_SCM]);
    }
    if (String(output.Tags).trim() === "") {
        contents[_T] = [];
    }
    else if (output[_T] != null && output[_T][_me] != null) {
        contents[_T] = de_tagListType(smithyClient.getArrayIfSingleItem(output[_T][_me]));
    }
    return contents;
};
const de_UploadSigningCertificateResponse = (output, context) => {
    const contents = {};
    if (output[_Cert] != null) {
        contents[_Cert] = de_SigningCertificate(output[_Cert]);
    }
    return contents;
};
const de_UploadSSHPublicKeyResponse = (output, context) => {
    const contents = {};
    if (output[_SSHPK] != null) {
        contents[_SSHPK] = de_SSHPublicKey(output[_SSHPK]);
    }
    return contents;
};
const de_User = (output, context) => {
    const contents = {};
    if (output[_P] != null) {
        contents[_P] = smithyClient.expectString(output[_P]);
    }
    if (output[_UN] != null) {
        contents[_UN] = smithyClient.expectString(output[_UN]);
    }
    if (output[_UI] != null) {
        contents[_UI] = smithyClient.expectString(output[_UI]);
    }
    if (output[_Ar] != null) {
        contents[_Ar] = smithyClient.expectString(output[_Ar]);
    }
    if (output[_CD] != null) {
        contents[_CD] = smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(output[_CD]));
    }
    if (output[_PLU] != null) {
        contents[_PLU] = smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(output[_PLU]));
    }
    if (output[_PB] != null) {
        contents[_PB] = de_AttachedPermissionsBoundary(output[_PB]);
    }
    if (String(output.Tags).trim() === "") {
        contents[_T] = [];
    }
    else if (output[_T] != null && output[_T][_me] != null) {
        contents[_T] = de_tagListType(smithyClient.getArrayIfSingleItem(output[_T][_me]));
    }
    return contents;
};
const de_UserDetail = (output, context) => {
    const contents = {};
    if (output[_P] != null) {
        contents[_P] = smithyClient.expectString(output[_P]);
    }
    if (output[_UN] != null) {
        contents[_UN] = smithyClient.expectString(output[_UN]);
    }
    if (output[_UI] != null) {
        contents[_UI] = smithyClient.expectString(output[_UI]);
    }
    if (output[_Ar] != null) {
        contents[_Ar] = smithyClient.expectString(output[_Ar]);
    }
    if (output[_CD] != null) {
        contents[_CD] = smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(output[_CD]));
    }
    if (String(output.UserPolicyList).trim() === "") {
        contents[_UPL] = [];
    }
    else if (output[_UPL] != null && output[_UPL][_me] != null) {
        contents[_UPL] = de_policyDetailListType(smithyClient.getArrayIfSingleItem(output[_UPL][_me]));
    }
    if (String(output.GroupList).trim() === "") {
        contents[_GL] = [];
    }
    else if (output[_GL] != null && output[_GL][_me] != null) {
        contents[_GL] = de_groupNameListType(smithyClient.getArrayIfSingleItem(output[_GL][_me]));
    }
    if (String(output.AttachedManagedPolicies).trim() === "") {
        contents[_AMP] = [];
    }
    else if (output[_AMP] != null && output[_AMP][_me] != null) {
        contents[_AMP] = de_attachedPoliciesListType(smithyClient.getArrayIfSingleItem(output[_AMP][_me]));
    }
    if (output[_PB] != null) {
        contents[_PB] = de_AttachedPermissionsBoundary(output[_PB]);
    }
    if (String(output.Tags).trim() === "") {
        contents[_T] = [];
    }
    else if (output[_T] != null && output[_T][_me] != null) {
        contents[_T] = de_tagListType(smithyClient.getArrayIfSingleItem(output[_T][_me]));
    }
    return contents;
};
const de_userDetailListType = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_UserDetail(entry);
    });
};
const de_userListType = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_User(entry);
    });
};
const de_VirtualMFADevice = (output, context) => {
    const contents = {};
    if (output[_SNe] != null) {
        contents[_SNe] = smithyClient.expectString(output[_SNe]);
    }
    if (output[_BSS] != null) {
        contents[_BSS] = context.base64Decoder(output[_BSS]);
    }
    if (output[_QRCPNG] != null) {
        contents[_QRCPNG] = context.base64Decoder(output[_QRCPNG]);
    }
    if (output[_Us] != null) {
        contents[_Us] = de_User(output[_Us]);
    }
    if (output[_EDn] != null) {
        contents[_EDn] = smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(output[_EDn]));
    }
    if (String(output.Tags).trim() === "") {
        contents[_T] = [];
    }
    else if (output[_T] != null && output[_T][_me] != null) {
        contents[_T] = de_tagListType(smithyClient.getArrayIfSingleItem(output[_T][_me]));
    }
    return contents;
};
const de_virtualMFADeviceListType = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_VirtualMFADevice(entry, context);
    });
};
const deserializeMetadata = (output) => ({
    httpStatusCode: output.statusCode,
    requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
    extendedRequestId: output.headers["x-amz-id-2"],
    cfId: output.headers["x-amz-cf-id"],
});
const throwDefaultError = smithyClient.withBaseException(IAMServiceException);
const buildHttpRpcRequest = async (context, headers, path, resolvedHostname, body) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const contents = {
        protocol,
        hostname,
        port,
        method: "POST",
        path: basePath.endsWith("/") ? basePath.slice(0, -1) + path : basePath + path,
        headers,
    };
    if (body !== undefined) {
        contents.body = body;
    }
    return new protocolHttp.HttpRequest(contents);
};
const SHARED_HEADERS = {
    "content-type": "application/x-www-form-urlencoded",
};
const _ = "2010-05-08";
const _A = "Action";
const _AA = "AccountAlias";
const _AAc = "AccountAliases";
const _ABO = "AllowedByOrganizations";
const _ABPB = "AllowedByPermissionsBoundary";
const _AC = "AuthenticationCode1";
const _ACIDTOIDCP = "AddClientIDToOpenIDConnectProvider";
const _ACt = "AttachmentCount";
const _ACu = "AuthenticationCode2";
const _AD = "AccessDetails";
const _AEM = "AssertionEncryptionMode";
const _AGP = "AttachGroupPolicy";
const _AK = "AccessKey";
const _AKI = "AccessKeyId";
const _AKLU = "AccessKeyLastUsed";
const _AKM = "AccessKeyMetadata";
const _AMP = "AttachedManagedPolicies";
const _AN = "ActionNames";
const _ANc = "ActionName";
const _AP = "AttachedPolicies";
const _APK = "AddPrivateKey";
const _ARP = "AttachRolePolicy";
const _ARPD = "AssumeRolePolicyDocument";
const _ARTIP = "AddRoleToInstanceProfile";
const _AS = "AssignmentStatus";
const _AU = "AllUsers";
const _AUP = "AttachUserPolicy";
const _AUTCP = "AllowUsersToChangePassword";
const _AUTG = "AddUserToGroup";
const _AWSSN = "AWSServiceName";
const _Ar = "Arn";
const _BSS = "Base32StringSeed";
const _C = "Code";
const _CA = "CallerArn";
const _CAA = "CreateAccountAlias";
const _CAD = "CredentialAgeDays";
const _CAK = "CreateAccessKey";
const _CB = "CertificateBody";
const _CC = "CertificateChain";
const _CD = "CreateDate";
const _CE = "ContextEntries";
const _CG = "CreateGroup";
const _CI = "CertificateId";
const _CID = "ClientID";
const _CIDL = "ClientIDList";
const _CIP = "CreateInstanceProfile";
const _CKN = "ContextKeyName";
const _CKNo = "ContextKeyNames";
const _CKT = "ContextKeyType";
const _CKV = "ContextKeyValues";
const _CLP = "CreateLoginProfile";
const _COIDCP = "CreateOpenIDConnectProvider";
const _CP = "ChangePassword";
const _CPV = "CreatePolicyVersion";
const _CPr = "CreatePolicy";
const _CR = "CreateRole";
const _CS = "CustomSuffix";
const _CSAMLP = "CreateSAMLProvider";
const _CSLR = "CreateServiceLinkedRole";
const _CSSC = "CreateServiceSpecificCredential";
const _CU = "CreateUser";
const _CVMFAD = "CreateVirtualMFADevice";
const _Ce = "Certifications";
const _Cer = "Certificates";
const _Cert = "Certificate";
const _Co = "Content";
const _Col = "Column";
const _D = "Description";
const _DAA = "DeleteAccountAlias";
const _DAK = "DeleteAccessKey";
const _DAPP = "DeleteAccountPasswordPolicy";
const _DG = "DeleteGroup";
const _DGP = "DeleteGroupPolicy";
const _DGPe = "DetachGroupPolicy";
const _DIP = "DeleteInstanceProfile";
const _DLP = "DeleteLoginProfile";
const _DMFAD = "DeactivateMFADevice";
const _DOIDCP = "DeleteOpenIDConnectProvider";
const _DORCM = "DisableOrganizationsRootCredentialsManagement";
const _DORS = "DisableOrganizationsRootSessions";
const _DP = "DeletePolicy";
const _DPV = "DeletePolicyVersion";
const _DR = "DeleteRole";
const _DRP = "DeleteRolePolicy";
const _DRPB = "DeleteRolePermissionsBoundary";
const _DRPe = "DetachRolePolicy";
const _DSAMLP = "DeleteSAMLProvider";
const _DSC = "DeleteServerCertificate";
const _DSCe = "DeleteSigningCertificate";
const _DSLR = "DeleteServiceLinkedRole";
const _DSSC = "DeleteServiceSpecificCredential";
const _DSSHPK = "DeleteSSHPublicKey";
const _DTI = "DeletionTaskId";
const _DU = "DeleteUser";
const _DUP = "DeleteUserPolicy";
const _DUPB = "DeleteUserPermissionsBoundary";
const _DUPe = "DetachUserPolicy";
const _DVI = "DefaultVersionId";
const _DVMFAD = "DeleteVirtualMFADevice";
const _Do = "Document";
const _E = "Encoding";
const _EAN = "EvalActionName";
const _ED = "EvalDecision";
const _EDD = "EvalDecisionDetails";
const _EDL = "EntityDetailsList";
const _EDn = "EnableDate";
const _EDr = "ErrorDetails";
const _EDx = "ExpirationDate";
const _EF = "EntityFilter";
const _EFn = "EnabledFeatures";
const _EI = "EntityInfo";
const _EMFAD = "EnableMFADevice";
const _EN = "EntityName";
const _EORCM = "EnableOrganizationsRootCredentialsManagement";
const _EORS = "EnableOrganizationsRootSessions";
const _EP = "EntityPath";
const _EPn = "EndPosition";
const _EPx = "ExpirePasswords";
const _ER = "EvaluationResults";
const _ERD = "EvalResourceDecision";
const _ERN = "EvalResourceName";
const _ET = "EntityType";
const _Er = "Error";
const _Ex = "Expiration";
const _F = "Filter";
const _Fi = "Fingerprint";
const _G = "Granularity";
const _GAAD = "GetAccountAuthorizationDetails";
const _GAKLU = "GetAccessKeyLastUsed";
const _GAPP = "GetAccountPasswordPolicy";
const _GAS = "GetAccountSummary";
const _GCKFCP = "GetContextKeysForCustomPolicy";
const _GCKFPP = "GetContextKeysForPrincipalPolicy";
const _GCR = "GenerateCredentialReport";
const _GCRe = "GetCredentialReport";
const _GDL = "GroupDetailList";
const _GETV = "GlobalEndpointTokenVersion";
const _GG = "GetGroup";
const _GGP = "GetGroupPolicy";
const _GI = "GroupId";
const _GIP = "GetInstanceProfile";
const _GL = "GroupList";
const _GLP = "GetLoginProfile";
const _GMFAD = "GetMFADevice";
const _GN = "GroupName";
const _GOAR = "GenerateOrganizationsAccessReport";
const _GOARe = "GetOrganizationsAccessReport";
const _GOIDCP = "GetOpenIDConnectProvider";
const _GP = "GetPolicy";
const _GPL = "GroupPolicyList";
const _GPV = "GetPolicyVersion";
const _GR = "GetRole";
const _GRP = "GetRolePolicy";
const _GSAMLP = "GetSAMLProvider";
const _GSC = "GetServerCertificate";
const _GSLAD = "GenerateServiceLastAccessedDetails";
const _GSLADWE = "GetServiceLastAccessedDetailsWithEntities";
const _GSLADe = "GetServiceLastAccessedDetails";
const _GSLRDS = "GetServiceLinkedRoleDeletionStatus";
const _GSSHPK = "GetSSHPublicKey";
const _GT = "GeneratedTime";
const _GU = "GetUser";
const _GUP = "GetUserPolicy";
const _Gr = "Group";
const _Gro = "Groups";
const _HE = "HardExpiry";
const _I = "Id";
const _IA = "IsAttachable";
const _IDV = "IsDefaultVersion";
const _IP = "InstanceProfile";
const _IPI = "InstanceProfileId";
const _IPL = "InstanceProfileList";
const _IPN = "InstanceProfileName";
const _IPn = "InstanceProfiles";
const _IT = "IsTruncated";
const _JCD = "JobCreationDate";
const _JCDo = "JobCompletionDate";
const _JI = "JobId";
const _JS = "JobStatus";
const _JT = "JobType";
const _K = "Key";
const _KI = "KeyId";
const _L = "Line";
const _LA = "LastAuthenticated";
const _LAA = "ListAccountAliases";
const _LAE = "LastAuthenticatedEntity";
const _LAEa = "LastAccessedEntity";
const _LAGP = "ListAttachedGroupPolicies";
const _LAK = "ListAccessKeys";
const _LAR = "LastAuthenticatedRegion";
const _LARP = "ListAttachedRolePolicies";
const _LARa = "LastAccessedRegion";
const _LAT = "LastAuthenticatedTime";
const _LATa = "LastAccessedTime";
const _LAUP = "ListAttachedUserPolicies";
const _LEFP = "ListEntitiesForPolicy";
const _LG = "ListGroups";
const _LGFU = "ListGroupsForUser";
const _LGP = "ListGroupPolicies";
const _LIP = "ListInstanceProfiles";
const _LIPFR = "ListInstanceProfilesForRole";
const _LIPT = "ListInstanceProfileTags";
const _LMFAD = "ListMFADevices";
const _LMFADT = "ListMFADeviceTags";
const _LOF = "ListOrganizationsFeatures";
const _LOIDCP = "ListOpenIDConnectProviders";
const _LOIDCPT = "ListOpenIDConnectProviderTags";
const _LP = "ListPolicies";
const _LPGSA = "ListPoliciesGrantingServiceAccess";
const _LPT = "ListPolicyTags";
const _LPV = "ListPolicyVersions";
const _LPo = "LoginProfile";
const _LR = "ListRoles";
const _LRP = "ListRolePolicies";
const _LRT = "ListRoleTags";
const _LSAMLP = "ListSAMLProviders";
const _LSAMLPT = "ListSAMLProviderTags";
const _LSC = "ListServerCertificates";
const _LSCT = "ListServerCertificateTags";
const _LSCi = "ListSigningCertificates";
const _LSSC = "ListServiceSpecificCredentials";
const _LSSHPK = "ListSSHPublicKeys";
const _LU = "ListUsers";
const _LUD = "LastUsedDate";
const _LUP = "ListUserPolicies";
const _LUT = "ListUserTags";
const _LVMFAD = "ListVirtualMFADevices";
const _M = "Marker";
const _MCV = "MissingContextValues";
const _MFAD = "MFADevices";
const _MI = "MaxItems";
const _MPA = "MaxPasswordAge";
const _MPL = "MinimumPasswordLength";
const _MS = "MatchedStatements";
const _MSD = "MaxSessionDuration";
const _Me = "Message";
const _N = "Name";
const _NGN = "NewGroupName";
const _NOSA = "NumberOfServicesAccessible";
const _NOSNA = "NumberOfServicesNotAccessed";
const _NP = "NewPassword";
const _NPe = "NewPath";
const _NSCN = "NewServerCertificateName";
const _NUN = "NewUserName";
const _OA = "OnlyAttached";
const _ODD = "OrganizationsDecisionDetail";
const _OI = "OrganizationId";
const _OIDCPA = "OpenIDConnectProviderArn";
const _OIDCPL = "OpenIDConnectProviderList";
const _OP = "OldPassword";
const _OPI = "OrganizationsPolicyId";
const _P = "Path";
const _PA = "PolicyArn";
const _PB = "PermissionsBoundary";
const _PBA = "PermissionsBoundaryArn";
const _PBDD = "PermissionsBoundaryDecisionDetail";
const _PBPIL = "PermissionsBoundaryPolicyInputList";
const _PBT = "PermissionsBoundaryType";
const _PBUC = "PermissionsBoundaryUsageCount";
const _PD = "PolicyDocument";
const _PG = "PolicyGroups";
const _PGP = "PutGroupPolicy";
const _PGSA = "PoliciesGrantingServiceAccess";
const _PI = "PolicyId";
const _PIL = "PolicyInputList";
const _PK = "PrivateKey";
const _PKL = "PrivateKeyList";
const _PLU = "PasswordLastUsed";
const _PN = "PolicyName";
const _PNo = "PolicyNames";
const _PP = "PathPrefix";
const _PPa = "PasswordPolicy";
const _PR = "PolicyRoles";
const _PRP = "PutRolePolicy";
const _PRPB = "PutRolePermissionsBoundary";
const _PRPa = "PasswordReusePrevention";
const _PRR = "PasswordResetRequired";
const _PSA = "PolicySourceArn";
const _PT = "PolicyType";
const _PU = "PolicyUsers";
const _PUF = "PolicyUsageFilter";
const _PUP = "PutUserPolicy";
const _PUPB = "PutUserPermissionsBoundary";
const _PV = "PolicyVersion";
const _PVL = "PolicyVersionList";
const _Pa = "Password";
const _Po = "Policy";
const _Pol = "Policies";
const _QRCPNG = "QRCodePNG";
const _R = "Region";
const _RA = "ResourceArns";
const _RCIDFOIDCP = "RemoveClientIDFromOpenIDConnectProvider";
const _RDL = "RoleDetailList";
const _RF = "ReportFormat";
const _RHO = "ResourceHandlingOption";
const _RI = "RoleId";
const _RLC = "RequireLowercaseCharacters";
const _RLU = "RoleLastUsed";
const _RMFAD = "ResyncMFADevice";
const _RN = "RoleName";
const _RNe = "RequireNumbers";
const _RO = "ResourceOwner";
const _RP = "ResourcePolicy";
const _RPK = "RemovePrivateKey";
const _RPL = "RolePolicyList";
const _RRFIP = "RemoveRoleFromInstanceProfile";
const _RS = "RequireSymbols";
const _RSR = "ResourceSpecificResults";
const _RSSC = "ResetServiceSpecificCredential";
const _RUC = "RequireUppercaseCharacters";
const _RUFG = "RemoveUserFromGroup";
const _RUL = "RoleUsageList";
const _Re = "Reason";
const _Res = "Resources";
const _Ro = "Role";
const _Rol = "Roles";
const _S = "Scope";
const _SAD = "SetAsDefault";
const _SAK = "SecretAccessKey";
const _SAMLMD = "SAMLMetadataDocument";
const _SAMLPA = "SAMLProviderArn";
const _SAMLPL = "SAMLProviderList";
const _SAMLPUUID = "SAMLProviderUUID";
const _SC = "ServerCertificate";
const _SCA = "ServiceCredentialAlias";
const _SCI = "ServerCertificateId";
const _SCM = "ServerCertificateMetadata";
const _SCML = "ServerCertificateMetadataList";
const _SCN = "ServerCertificateName";
const _SCP = "SimulateCustomPolicy";
const _SCS = "ServiceCredentialSecret";
const _SDPV = "SetDefaultPolicyVersion";
const _SK = "SortKey";
const _SLA = "ServicesLastAccessed";
const _SM = "SummaryMap";
const _SN = "ServiceName";
const _SNe = "SerialNumber";
const _SNer = "ServiceNamespace";
const _SNerv = "ServiceNamespaces";
const _SP = "ServicePassword";
const _SPI = "SourcePolicyId";
const _SPP = "SimulatePrincipalPolicy";
const _SPT = "SourcePolicyType";
const _SPt = "StartPosition";
const _SSC = "ServiceSpecificCredential";
const _SSCI = "ServiceSpecificCredentialId";
const _SSCe = "ServiceSpecificCredentials";
const _SSHPK = "SSHPublicKey";
const _SSHPKB = "SSHPublicKeyBody";
const _SSHPKI = "SSHPublicKeyId";
const _SSHPKu = "SSHPublicKeys";
const _SSTSP = "SetSecurityTokenServicePreferences";
const _SUN = "ServiceUserName";
const _St = "Status";
const _Sta = "State";
const _T = "Tags";
const _TAE = "TotalAuthenticatedEntities";
const _TALA = "TrackedActionsLastAccessed";
const _TIP = "TagInstanceProfile";
const _TK = "TagKeys";
const _TL = "ThumbprintList";
const _TMFAD = "TagMFADevice";
const _TOIDCP = "TagOpenIDConnectProvider";
const _TP = "TagPolicy";
const _TR = "TagRole";
const _TSAMLP = "TagSAMLProvider";
const _TSC = "TagServerCertificate";
const _TU = "TagUser";
const _Ti = "Timestamp";
const _Ty = "Type";
const _U = "Url";
const _UAK = "UpdateAccessKey";
const _UAPP = "UpdateAccountPasswordPolicy";
const _UARP = "UpdateAssumeRolePolicy";
const _UD = "UpdateDate";
const _UDL = "UserDetailList";
const _UDp = "UploadDate";
const _UG = "UpdateGroup";
const _UI = "UserId";
const _UIP = "UntagInstanceProfile";
const _ULP = "UpdateLoginProfile";
const _UMFAD = "UntagMFADevice";
const _UN = "UserName";
const _UOIDCP = "UntagOpenIDConnectProvider";
const _UOIDCPT = "UpdateOpenIDConnectProviderThumbprint";
const _UP = "UntagPolicy";
const _UPL = "UserPolicyList";
const _UR = "UntagRole";
const _URD = "UpdateRoleDescription";
const _URp = "UpdateRole";
const _USAMLP = "UntagSAMLProvider";
const _USAMLPp = "UpdateSAMLProvider";
const _USC = "UntagServerCertificate";
const _USCp = "UpdateServerCertificate";
const _USCpd = "UpdateSigningCertificate";
const _USCpl = "UploadServerCertificate";
const _USCplo = "UploadSigningCertificate";
const _USSC = "UpdateServiceSpecificCredential";
const _USSHPK = "UpdateSSHPublicKey";
const _USSHPKp = "UploadSSHPublicKey";
const _UU = "UntagUser";
const _UUp = "UpdateUser";
const _Us = "User";
const _Use = "Users";
const _V = "Version";
const _VI = "VersionId";
const _VMFAD = "VirtualMFADevice";
const _VMFADN = "VirtualMFADeviceName";
const _VMFADi = "VirtualMFADevices";
const _VU = "ValidUntil";
const _Va = "Value";
const _Ve = "Versions";
const _e = "entry";
const _m = "message";
const _me = "member";
const buildFormUrlencodedString = (formEntries) => Object.entries(formEntries)
    .map(([key, value]) => smithyClient.extendedEncodeURIComponent(key) + "=" + smithyClient.extendedEncodeURIComponent(value))
    .join("&");
const loadQueryErrorCode = (output, data) => {
    if (data.Error?.Code !== undefined) {
        return data.Error.Code;
    }
    if (output.statusCode == 404) {
        return "NotFound";
    }
};

class AddClientIDToOpenIDConnectProviderCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSIdentityManagementV20100508", "AddClientIDToOpenIDConnectProvider", {})
    .n("IAMClient", "AddClientIDToOpenIDConnectProviderCommand")
    .f(void 0, void 0)
    .ser(se_AddClientIDToOpenIDConnectProviderCommand)
    .de(de_AddClientIDToOpenIDConnectProviderCommand)
    .build() {
}

class AddRoleToInstanceProfileCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSIdentityManagementV20100508", "AddRoleToInstanceProfile", {})
    .n("IAMClient", "AddRoleToInstanceProfileCommand")
    .f(void 0, void 0)
    .ser(se_AddRoleToInstanceProfileCommand)
    .de(de_AddRoleToInstanceProfileCommand)
    .build() {
}

class AddUserToGroupCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSIdentityManagementV20100508", "AddUserToGroup", {})
    .n("IAMClient", "AddUserToGroupCommand")
    .f(void 0, void 0)
    .ser(se_AddUserToGroupCommand)
    .de(de_AddUserToGroupCommand)
    .build() {
}

class AttachGroupPolicyCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSIdentityManagementV20100508", "AttachGroupPolicy", {})
    .n("IAMClient", "AttachGroupPolicyCommand")
    .f(void 0, void 0)
    .ser(se_AttachGroupPolicyCommand)
    .de(de_AttachGroupPolicyCommand)
    .build() {
}

class AttachRolePolicyCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSIdentityManagementV20100508", "AttachRolePolicy", {})
    .n("IAMClient", "AttachRolePolicyCommand")
    .f(void 0, void 0)
    .ser(se_AttachRolePolicyCommand)
    .de(de_AttachRolePolicyCommand)
    .build() {
}

class AttachUserPolicyCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSIdentityManagementV20100508", "AttachUserPolicy", {})
    .n("IAMClient", "AttachUserPolicyCommand")
    .f(void 0, void 0)
    .ser(se_AttachUserPolicyCommand)
    .de(de_AttachUserPolicyCommand)
    .build() {
}

class ChangePasswordCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSIdentityManagementV20100508", "ChangePassword", {})
    .n("IAMClient", "ChangePasswordCommand")
    .f(ChangePasswordRequestFilterSensitiveLog, void 0)
    .ser(se_ChangePasswordCommand)
    .de(de_ChangePasswordCommand)
    .build() {
}

class CreateAccessKeyCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSIdentityManagementV20100508", "CreateAccessKey", {})
    .n("IAMClient", "CreateAccessKeyCommand")
    .f(void 0, CreateAccessKeyResponseFilterSensitiveLog)
    .ser(se_CreateAccessKeyCommand)
    .de(de_CreateAccessKeyCommand)
    .build() {
}

class CreateAccountAliasCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSIdentityManagementV20100508", "CreateAccountAlias", {})
    .n("IAMClient", "CreateAccountAliasCommand")
    .f(void 0, void 0)
    .ser(se_CreateAccountAliasCommand)
    .de(de_CreateAccountAliasCommand)
    .build() {
}

class CreateGroupCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSIdentityManagementV20100508", "CreateGroup", {})
    .n("IAMClient", "CreateGroupCommand")
    .f(void 0, void 0)
    .ser(se_CreateGroupCommand)
    .de(de_CreateGroupCommand)
    .build() {
}

class CreateInstanceProfileCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSIdentityManagementV20100508", "CreateInstanceProfile", {})
    .n("IAMClient", "CreateInstanceProfileCommand")
    .f(void 0, void 0)
    .ser(se_CreateInstanceProfileCommand)
    .de(de_CreateInstanceProfileCommand)
    .build() {
}

class CreateLoginProfileCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSIdentityManagementV20100508", "CreateLoginProfile", {})
    .n("IAMClient", "CreateLoginProfileCommand")
    .f(CreateLoginProfileRequestFilterSensitiveLog, void 0)
    .ser(se_CreateLoginProfileCommand)
    .de(de_CreateLoginProfileCommand)
    .build() {
}

class CreateOpenIDConnectProviderCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSIdentityManagementV20100508", "CreateOpenIDConnectProvider", {})
    .n("IAMClient", "CreateOpenIDConnectProviderCommand")
    .f(void 0, void 0)
    .ser(se_CreateOpenIDConnectProviderCommand)
    .de(de_CreateOpenIDConnectProviderCommand)
    .build() {
}

class CreatePolicyCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSIdentityManagementV20100508", "CreatePolicy", {})
    .n("IAMClient", "CreatePolicyCommand")
    .f(void 0, void 0)
    .ser(se_CreatePolicyCommand)
    .de(de_CreatePolicyCommand)
    .build() {
}

class CreatePolicyVersionCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSIdentityManagementV20100508", "CreatePolicyVersion", {})
    .n("IAMClient", "CreatePolicyVersionCommand")
    .f(void 0, void 0)
    .ser(se_CreatePolicyVersionCommand)
    .de(de_CreatePolicyVersionCommand)
    .build() {
}

class CreateRoleCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSIdentityManagementV20100508", "CreateRole", {})
    .n("IAMClient", "CreateRoleCommand")
    .f(void 0, void 0)
    .ser(se_CreateRoleCommand)
    .de(de_CreateRoleCommand)
    .build() {
}

class CreateSAMLProviderCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSIdentityManagementV20100508", "CreateSAMLProvider", {})
    .n("IAMClient", "CreateSAMLProviderCommand")
    .f(CreateSAMLProviderRequestFilterSensitiveLog, void 0)
    .ser(se_CreateSAMLProviderCommand)
    .de(de_CreateSAMLProviderCommand)
    .build() {
}

class CreateServiceLinkedRoleCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSIdentityManagementV20100508", "CreateServiceLinkedRole", {})
    .n("IAMClient", "CreateServiceLinkedRoleCommand")
    .f(void 0, void 0)
    .ser(se_CreateServiceLinkedRoleCommand)
    .de(de_CreateServiceLinkedRoleCommand)
    .build() {
}

class CreateServiceSpecificCredentialCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSIdentityManagementV20100508", "CreateServiceSpecificCredential", {})
    .n("IAMClient", "CreateServiceSpecificCredentialCommand")
    .f(void 0, CreateServiceSpecificCredentialResponseFilterSensitiveLog)
    .ser(se_CreateServiceSpecificCredentialCommand)
    .de(de_CreateServiceSpecificCredentialCommand)
    .build() {
}

class CreateUserCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSIdentityManagementV20100508", "CreateUser", {})
    .n("IAMClient", "CreateUserCommand")
    .f(void 0, void 0)
    .ser(se_CreateUserCommand)
    .de(de_CreateUserCommand)
    .build() {
}

class CreateVirtualMFADeviceCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSIdentityManagementV20100508", "CreateVirtualMFADevice", {})
    .n("IAMClient", "CreateVirtualMFADeviceCommand")
    .f(void 0, CreateVirtualMFADeviceResponseFilterSensitiveLog)
    .ser(se_CreateVirtualMFADeviceCommand)
    .de(de_CreateVirtualMFADeviceCommand)
    .build() {
}

class DeactivateMFADeviceCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSIdentityManagementV20100508", "DeactivateMFADevice", {})
    .n("IAMClient", "DeactivateMFADeviceCommand")
    .f(void 0, void 0)
    .ser(se_DeactivateMFADeviceCommand)
    .de(de_DeactivateMFADeviceCommand)
    .build() {
}

class DeleteAccessKeyCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSIdentityManagementV20100508", "DeleteAccessKey", {})
    .n("IAMClient", "DeleteAccessKeyCommand")
    .f(void 0, void 0)
    .ser(se_DeleteAccessKeyCommand)
    .de(de_DeleteAccessKeyCommand)
    .build() {
}

class DeleteAccountAliasCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSIdentityManagementV20100508", "DeleteAccountAlias", {})
    .n("IAMClient", "DeleteAccountAliasCommand")
    .f(void 0, void 0)
    .ser(se_DeleteAccountAliasCommand)
    .de(de_DeleteAccountAliasCommand)
    .build() {
}

class DeleteAccountPasswordPolicyCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSIdentityManagementV20100508", "DeleteAccountPasswordPolicy", {})
    .n("IAMClient", "DeleteAccountPasswordPolicyCommand")
    .f(void 0, void 0)
    .ser(se_DeleteAccountPasswordPolicyCommand)
    .de(de_DeleteAccountPasswordPolicyCommand)
    .build() {
}

class DeleteGroupCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSIdentityManagementV20100508", "DeleteGroup", {})
    .n("IAMClient", "DeleteGroupCommand")
    .f(void 0, void 0)
    .ser(se_DeleteGroupCommand)
    .de(de_DeleteGroupCommand)
    .build() {
}

class DeleteGroupPolicyCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSIdentityManagementV20100508", "DeleteGroupPolicy", {})
    .n("IAMClient", "DeleteGroupPolicyCommand")
    .f(void 0, void 0)
    .ser(se_DeleteGroupPolicyCommand)
    .de(de_DeleteGroupPolicyCommand)
    .build() {
}

class DeleteInstanceProfileCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSIdentityManagementV20100508", "DeleteInstanceProfile", {})
    .n("IAMClient", "DeleteInstanceProfileCommand")
    .f(void 0, void 0)
    .ser(se_DeleteInstanceProfileCommand)
    .de(de_DeleteInstanceProfileCommand)
    .build() {
}

class DeleteLoginProfileCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSIdentityManagementV20100508", "DeleteLoginProfile", {})
    .n("IAMClient", "DeleteLoginProfileCommand")
    .f(void 0, void 0)
    .ser(se_DeleteLoginProfileCommand)
    .de(de_DeleteLoginProfileCommand)
    .build() {
}

class DeleteOpenIDConnectProviderCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSIdentityManagementV20100508", "DeleteOpenIDConnectProvider", {})
    .n("IAMClient", "DeleteOpenIDConnectProviderCommand")
    .f(void 0, void 0)
    .ser(se_DeleteOpenIDConnectProviderCommand)
    .de(de_DeleteOpenIDConnectProviderCommand)
    .build() {
}

class DeletePolicyCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSIdentityManagementV20100508", "DeletePolicy", {})
    .n("IAMClient", "DeletePolicyCommand")
    .f(void 0, void 0)
    .ser(se_DeletePolicyCommand)
    .de(de_DeletePolicyCommand)
    .build() {
}

class DeletePolicyVersionCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSIdentityManagementV20100508", "DeletePolicyVersion", {})
    .n("IAMClient", "DeletePolicyVersionCommand")
    .f(void 0, void 0)
    .ser(se_DeletePolicyVersionCommand)
    .de(de_DeletePolicyVersionCommand)
    .build() {
}

class DeleteRoleCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSIdentityManagementV20100508", "DeleteRole", {})
    .n("IAMClient", "DeleteRoleCommand")
    .f(void 0, void 0)
    .ser(se_DeleteRoleCommand)
    .de(de_DeleteRoleCommand)
    .build() {
}

class DeleteRolePermissionsBoundaryCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSIdentityManagementV20100508", "DeleteRolePermissionsBoundary", {})
    .n("IAMClient", "DeleteRolePermissionsBoundaryCommand")
    .f(void 0, void 0)
    .ser(se_DeleteRolePermissionsBoundaryCommand)
    .de(de_DeleteRolePermissionsBoundaryCommand)
    .build() {
}

class DeleteRolePolicyCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSIdentityManagementV20100508", "DeleteRolePolicy", {})
    .n("IAMClient", "DeleteRolePolicyCommand")
    .f(void 0, void 0)
    .ser(se_DeleteRolePolicyCommand)
    .de(de_DeleteRolePolicyCommand)
    .build() {
}

class DeleteSAMLProviderCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSIdentityManagementV20100508", "DeleteSAMLProvider", {})
    .n("IAMClient", "DeleteSAMLProviderCommand")
    .f(void 0, void 0)
    .ser(se_DeleteSAMLProviderCommand)
    .de(de_DeleteSAMLProviderCommand)
    .build() {
}

class DeleteServerCertificateCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSIdentityManagementV20100508", "DeleteServerCertificate", {})
    .n("IAMClient", "DeleteServerCertificateCommand")
    .f(void 0, void 0)
    .ser(se_DeleteServerCertificateCommand)
    .de(de_DeleteServerCertificateCommand)
    .build() {
}

class DeleteServiceLinkedRoleCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSIdentityManagementV20100508", "DeleteServiceLinkedRole", {})
    .n("IAMClient", "DeleteServiceLinkedRoleCommand")
    .f(void 0, void 0)
    .ser(se_DeleteServiceLinkedRoleCommand)
    .de(de_DeleteServiceLinkedRoleCommand)
    .build() {
}

class DeleteServiceSpecificCredentialCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSIdentityManagementV20100508", "DeleteServiceSpecificCredential", {})
    .n("IAMClient", "DeleteServiceSpecificCredentialCommand")
    .f(void 0, void 0)
    .ser(se_DeleteServiceSpecificCredentialCommand)
    .de(de_DeleteServiceSpecificCredentialCommand)
    .build() {
}

class DeleteSigningCertificateCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSIdentityManagementV20100508", "DeleteSigningCertificate", {})
    .n("IAMClient", "DeleteSigningCertificateCommand")
    .f(void 0, void 0)
    .ser(se_DeleteSigningCertificateCommand)
    .de(de_DeleteSigningCertificateCommand)
    .build() {
}

class DeleteSSHPublicKeyCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSIdentityManagementV20100508", "DeleteSSHPublicKey", {})
    .n("IAMClient", "DeleteSSHPublicKeyCommand")
    .f(void 0, void 0)
    .ser(se_DeleteSSHPublicKeyCommand)
    .de(de_DeleteSSHPublicKeyCommand)
    .build() {
}

class DeleteUserCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSIdentityManagementV20100508", "DeleteUser", {})
    .n("IAMClient", "DeleteUserCommand")
    .f(void 0, void 0)
    .ser(se_DeleteUserCommand)
    .de(de_DeleteUserCommand)
    .build() {
}

class DeleteUserPermissionsBoundaryCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSIdentityManagementV20100508", "DeleteUserPermissionsBoundary", {})
    .n("IAMClient", "DeleteUserPermissionsBoundaryCommand")
    .f(void 0, void 0)
    .ser(se_DeleteUserPermissionsBoundaryCommand)
    .de(de_DeleteUserPermissionsBoundaryCommand)
    .build() {
}

class DeleteUserPolicyCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSIdentityManagementV20100508", "DeleteUserPolicy", {})
    .n("IAMClient", "DeleteUserPolicyCommand")
    .f(void 0, void 0)
    .ser(se_DeleteUserPolicyCommand)
    .de(de_DeleteUserPolicyCommand)
    .build() {
}

class DeleteVirtualMFADeviceCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSIdentityManagementV20100508", "DeleteVirtualMFADevice", {})
    .n("IAMClient", "DeleteVirtualMFADeviceCommand")
    .f(void 0, void 0)
    .ser(se_DeleteVirtualMFADeviceCommand)
    .de(de_DeleteVirtualMFADeviceCommand)
    .build() {
}

class DetachGroupPolicyCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSIdentityManagementV20100508", "DetachGroupPolicy", {})
    .n("IAMClient", "DetachGroupPolicyCommand")
    .f(void 0, void 0)
    .ser(se_DetachGroupPolicyCommand)
    .de(de_DetachGroupPolicyCommand)
    .build() {
}

class DetachRolePolicyCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSIdentityManagementV20100508", "DetachRolePolicy", {})
    .n("IAMClient", "DetachRolePolicyCommand")
    .f(void 0, void 0)
    .ser(se_DetachRolePolicyCommand)
    .de(de_DetachRolePolicyCommand)
    .build() {
}

class DetachUserPolicyCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSIdentityManagementV20100508", "DetachUserPolicy", {})
    .n("IAMClient", "DetachUserPolicyCommand")
    .f(void 0, void 0)
    .ser(se_DetachUserPolicyCommand)
    .de(de_DetachUserPolicyCommand)
    .build() {
}

class DisableOrganizationsRootCredentialsManagementCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSIdentityManagementV20100508", "DisableOrganizationsRootCredentialsManagement", {})
    .n("IAMClient", "DisableOrganizationsRootCredentialsManagementCommand")
    .f(void 0, void 0)
    .ser(se_DisableOrganizationsRootCredentialsManagementCommand)
    .de(de_DisableOrganizationsRootCredentialsManagementCommand)
    .build() {
}

class DisableOrganizationsRootSessionsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSIdentityManagementV20100508", "DisableOrganizationsRootSessions", {})
    .n("IAMClient", "DisableOrganizationsRootSessionsCommand")
    .f(void 0, void 0)
    .ser(se_DisableOrganizationsRootSessionsCommand)
    .de(de_DisableOrganizationsRootSessionsCommand)
    .build() {
}

class EnableMFADeviceCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSIdentityManagementV20100508", "EnableMFADevice", {})
    .n("IAMClient", "EnableMFADeviceCommand")
    .f(void 0, void 0)
    .ser(se_EnableMFADeviceCommand)
    .de(de_EnableMFADeviceCommand)
    .build() {
}

class EnableOrganizationsRootCredentialsManagementCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSIdentityManagementV20100508", "EnableOrganizationsRootCredentialsManagement", {})
    .n("IAMClient", "EnableOrganizationsRootCredentialsManagementCommand")
    .f(void 0, void 0)
    .ser(se_EnableOrganizationsRootCredentialsManagementCommand)
    .de(de_EnableOrganizationsRootCredentialsManagementCommand)
    .build() {
}

class EnableOrganizationsRootSessionsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSIdentityManagementV20100508", "EnableOrganizationsRootSessions", {})
    .n("IAMClient", "EnableOrganizationsRootSessionsCommand")
    .f(void 0, void 0)
    .ser(se_EnableOrganizationsRootSessionsCommand)
    .de(de_EnableOrganizationsRootSessionsCommand)
    .build() {
}

class GenerateCredentialReportCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSIdentityManagementV20100508", "GenerateCredentialReport", {})
    .n("IAMClient", "GenerateCredentialReportCommand")
    .f(void 0, void 0)
    .ser(se_GenerateCredentialReportCommand)
    .de(de_GenerateCredentialReportCommand)
    .build() {
}

class GenerateOrganizationsAccessReportCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSIdentityManagementV20100508", "GenerateOrganizationsAccessReport", {})
    .n("IAMClient", "GenerateOrganizationsAccessReportCommand")
    .f(void 0, void 0)
    .ser(se_GenerateOrganizationsAccessReportCommand)
    .de(de_GenerateOrganizationsAccessReportCommand)
    .build() {
}

class GenerateServiceLastAccessedDetailsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSIdentityManagementV20100508", "GenerateServiceLastAccessedDetails", {})
    .n("IAMClient", "GenerateServiceLastAccessedDetailsCommand")
    .f(void 0, void 0)
    .ser(se_GenerateServiceLastAccessedDetailsCommand)
    .de(de_GenerateServiceLastAccessedDetailsCommand)
    .build() {
}

class GetAccessKeyLastUsedCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSIdentityManagementV20100508", "GetAccessKeyLastUsed", {})
    .n("IAMClient", "GetAccessKeyLastUsedCommand")
    .f(void 0, void 0)
    .ser(se_GetAccessKeyLastUsedCommand)
    .de(de_GetAccessKeyLastUsedCommand)
    .build() {
}

class GetAccountAuthorizationDetailsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSIdentityManagementV20100508", "GetAccountAuthorizationDetails", {})
    .n("IAMClient", "GetAccountAuthorizationDetailsCommand")
    .f(void 0, void 0)
    .ser(se_GetAccountAuthorizationDetailsCommand)
    .de(de_GetAccountAuthorizationDetailsCommand)
    .build() {
}

class GetAccountPasswordPolicyCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSIdentityManagementV20100508", "GetAccountPasswordPolicy", {})
    .n("IAMClient", "GetAccountPasswordPolicyCommand")
    .f(void 0, void 0)
    .ser(se_GetAccountPasswordPolicyCommand)
    .de(de_GetAccountPasswordPolicyCommand)
    .build() {
}

class GetAccountSummaryCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSIdentityManagementV20100508", "GetAccountSummary", {})
    .n("IAMClient", "GetAccountSummaryCommand")
    .f(void 0, void 0)
    .ser(se_GetAccountSummaryCommand)
    .de(de_GetAccountSummaryCommand)
    .build() {
}

class GetContextKeysForCustomPolicyCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSIdentityManagementV20100508", "GetContextKeysForCustomPolicy", {})
    .n("IAMClient", "GetContextKeysForCustomPolicyCommand")
    .f(void 0, void 0)
    .ser(se_GetContextKeysForCustomPolicyCommand)
    .de(de_GetContextKeysForCustomPolicyCommand)
    .build() {
}

class GetContextKeysForPrincipalPolicyCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSIdentityManagementV20100508", "GetContextKeysForPrincipalPolicy", {})
    .n("IAMClient", "GetContextKeysForPrincipalPolicyCommand")
    .f(void 0, void 0)
    .ser(se_GetContextKeysForPrincipalPolicyCommand)
    .de(de_GetContextKeysForPrincipalPolicyCommand)
    .build() {
}

class GetCredentialReportCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSIdentityManagementV20100508", "GetCredentialReport", {})
    .n("IAMClient", "GetCredentialReportCommand")
    .f(void 0, void 0)
    .ser(se_GetCredentialReportCommand)
    .de(de_GetCredentialReportCommand)
    .build() {
}

class GetGroupCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSIdentityManagementV20100508", "GetGroup", {})
    .n("IAMClient", "GetGroupCommand")
    .f(void 0, void 0)
    .ser(se_GetGroupCommand)
    .de(de_GetGroupCommand)
    .build() {
}

class GetGroupPolicyCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSIdentityManagementV20100508", "GetGroupPolicy", {})
    .n("IAMClient", "GetGroupPolicyCommand")
    .f(void 0, void 0)
    .ser(se_GetGroupPolicyCommand)
    .de(de_GetGroupPolicyCommand)
    .build() {
}

class GetInstanceProfileCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSIdentityManagementV20100508", "GetInstanceProfile", {})
    .n("IAMClient", "GetInstanceProfileCommand")
    .f(void 0, void 0)
    .ser(se_GetInstanceProfileCommand)
    .de(de_GetInstanceProfileCommand)
    .build() {
}

class GetLoginProfileCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSIdentityManagementV20100508", "GetLoginProfile", {})
    .n("IAMClient", "GetLoginProfileCommand")
    .f(void 0, void 0)
    .ser(se_GetLoginProfileCommand)
    .de(de_GetLoginProfileCommand)
    .build() {
}

class GetMFADeviceCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSIdentityManagementV20100508", "GetMFADevice", {})
    .n("IAMClient", "GetMFADeviceCommand")
    .f(void 0, void 0)
    .ser(se_GetMFADeviceCommand)
    .de(de_GetMFADeviceCommand)
    .build() {
}

class GetOpenIDConnectProviderCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSIdentityManagementV20100508", "GetOpenIDConnectProvider", {})
    .n("IAMClient", "GetOpenIDConnectProviderCommand")
    .f(void 0, void 0)
    .ser(se_GetOpenIDConnectProviderCommand)
    .de(de_GetOpenIDConnectProviderCommand)
    .build() {
}

class GetOrganizationsAccessReportCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSIdentityManagementV20100508", "GetOrganizationsAccessReport", {})
    .n("IAMClient", "GetOrganizationsAccessReportCommand")
    .f(void 0, void 0)
    .ser(se_GetOrganizationsAccessReportCommand)
    .de(de_GetOrganizationsAccessReportCommand)
    .build() {
}

class GetPolicyCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSIdentityManagementV20100508", "GetPolicy", {})
    .n("IAMClient", "GetPolicyCommand")
    .f(void 0, void 0)
    .ser(se_GetPolicyCommand)
    .de(de_GetPolicyCommand)
    .build() {
}

class GetPolicyVersionCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSIdentityManagementV20100508", "GetPolicyVersion", {})
    .n("IAMClient", "GetPolicyVersionCommand")
    .f(void 0, void 0)
    .ser(se_GetPolicyVersionCommand)
    .de(de_GetPolicyVersionCommand)
    .build() {
}

class GetRoleCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSIdentityManagementV20100508", "GetRole", {})
    .n("IAMClient", "GetRoleCommand")
    .f(void 0, void 0)
    .ser(se_GetRoleCommand)
    .de(de_GetRoleCommand)
    .build() {
}

class GetRolePolicyCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSIdentityManagementV20100508", "GetRolePolicy", {})
    .n("IAMClient", "GetRolePolicyCommand")
    .f(void 0, void 0)
    .ser(se_GetRolePolicyCommand)
    .de(de_GetRolePolicyCommand)
    .build() {
}

class GetSAMLProviderCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSIdentityManagementV20100508", "GetSAMLProvider", {})
    .n("IAMClient", "GetSAMLProviderCommand")
    .f(void 0, void 0)
    .ser(se_GetSAMLProviderCommand)
    .de(de_GetSAMLProviderCommand)
    .build() {
}

class GetServerCertificateCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSIdentityManagementV20100508", "GetServerCertificate", {})
    .n("IAMClient", "GetServerCertificateCommand")
    .f(void 0, void 0)
    .ser(se_GetServerCertificateCommand)
    .de(de_GetServerCertificateCommand)
    .build() {
}

class GetServiceLastAccessedDetailsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSIdentityManagementV20100508", "GetServiceLastAccessedDetails", {})
    .n("IAMClient", "GetServiceLastAccessedDetailsCommand")
    .f(void 0, void 0)
    .ser(se_GetServiceLastAccessedDetailsCommand)
    .de(de_GetServiceLastAccessedDetailsCommand)
    .build() {
}

class GetServiceLastAccessedDetailsWithEntitiesCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSIdentityManagementV20100508", "GetServiceLastAccessedDetailsWithEntities", {})
    .n("IAMClient", "GetServiceLastAccessedDetailsWithEntitiesCommand")
    .f(void 0, void 0)
    .ser(se_GetServiceLastAccessedDetailsWithEntitiesCommand)
    .de(de_GetServiceLastAccessedDetailsWithEntitiesCommand)
    .build() {
}

class GetServiceLinkedRoleDeletionStatusCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSIdentityManagementV20100508", "GetServiceLinkedRoleDeletionStatus", {})
    .n("IAMClient", "GetServiceLinkedRoleDeletionStatusCommand")
    .f(void 0, void 0)
    .ser(se_GetServiceLinkedRoleDeletionStatusCommand)
    .de(de_GetServiceLinkedRoleDeletionStatusCommand)
    .build() {
}

class GetSSHPublicKeyCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSIdentityManagementV20100508", "GetSSHPublicKey", {})
    .n("IAMClient", "GetSSHPublicKeyCommand")
    .f(void 0, void 0)
    .ser(se_GetSSHPublicKeyCommand)
    .de(de_GetSSHPublicKeyCommand)
    .build() {
}

class GetUserCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSIdentityManagementV20100508", "GetUser", {})
    .n("IAMClient", "GetUserCommand")
    .f(void 0, void 0)
    .ser(se_GetUserCommand)
    .de(de_GetUserCommand)
    .build() {
}

class GetUserPolicyCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSIdentityManagementV20100508", "GetUserPolicy", {})
    .n("IAMClient", "GetUserPolicyCommand")
    .f(void 0, void 0)
    .ser(se_GetUserPolicyCommand)
    .de(de_GetUserPolicyCommand)
    .build() {
}

class ListAccessKeysCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSIdentityManagementV20100508", "ListAccessKeys", {})
    .n("IAMClient", "ListAccessKeysCommand")
    .f(void 0, void 0)
    .ser(se_ListAccessKeysCommand)
    .de(de_ListAccessKeysCommand)
    .build() {
}

class ListAccountAliasesCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSIdentityManagementV20100508", "ListAccountAliases", {})
    .n("IAMClient", "ListAccountAliasesCommand")
    .f(void 0, void 0)
    .ser(se_ListAccountAliasesCommand)
    .de(de_ListAccountAliasesCommand)
    .build() {
}

class ListAttachedGroupPoliciesCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSIdentityManagementV20100508", "ListAttachedGroupPolicies", {})
    .n("IAMClient", "ListAttachedGroupPoliciesCommand")
    .f(void 0, void 0)
    .ser(se_ListAttachedGroupPoliciesCommand)
    .de(de_ListAttachedGroupPoliciesCommand)
    .build() {
}

class ListAttachedRolePoliciesCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSIdentityManagementV20100508", "ListAttachedRolePolicies", {})
    .n("IAMClient", "ListAttachedRolePoliciesCommand")
    .f(void 0, void 0)
    .ser(se_ListAttachedRolePoliciesCommand)
    .de(de_ListAttachedRolePoliciesCommand)
    .build() {
}

class ListAttachedUserPoliciesCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSIdentityManagementV20100508", "ListAttachedUserPolicies", {})
    .n("IAMClient", "ListAttachedUserPoliciesCommand")
    .f(void 0, void 0)
    .ser(se_ListAttachedUserPoliciesCommand)
    .de(de_ListAttachedUserPoliciesCommand)
    .build() {
}

class ListEntitiesForPolicyCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSIdentityManagementV20100508", "ListEntitiesForPolicy", {})
    .n("IAMClient", "ListEntitiesForPolicyCommand")
    .f(void 0, void 0)
    .ser(se_ListEntitiesForPolicyCommand)
    .de(de_ListEntitiesForPolicyCommand)
    .build() {
}

class ListGroupPoliciesCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSIdentityManagementV20100508", "ListGroupPolicies", {})
    .n("IAMClient", "ListGroupPoliciesCommand")
    .f(void 0, void 0)
    .ser(se_ListGroupPoliciesCommand)
    .de(de_ListGroupPoliciesCommand)
    .build() {
}

class ListGroupsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSIdentityManagementV20100508", "ListGroups", {})
    .n("IAMClient", "ListGroupsCommand")
    .f(void 0, void 0)
    .ser(se_ListGroupsCommand)
    .de(de_ListGroupsCommand)
    .build() {
}

class ListGroupsForUserCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSIdentityManagementV20100508", "ListGroupsForUser", {})
    .n("IAMClient", "ListGroupsForUserCommand")
    .f(void 0, void 0)
    .ser(se_ListGroupsForUserCommand)
    .de(de_ListGroupsForUserCommand)
    .build() {
}

class ListInstanceProfilesCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSIdentityManagementV20100508", "ListInstanceProfiles", {})
    .n("IAMClient", "ListInstanceProfilesCommand")
    .f(void 0, void 0)
    .ser(se_ListInstanceProfilesCommand)
    .de(de_ListInstanceProfilesCommand)
    .build() {
}

class ListInstanceProfilesForRoleCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSIdentityManagementV20100508", "ListInstanceProfilesForRole", {})
    .n("IAMClient", "ListInstanceProfilesForRoleCommand")
    .f(void 0, void 0)
    .ser(se_ListInstanceProfilesForRoleCommand)
    .de(de_ListInstanceProfilesForRoleCommand)
    .build() {
}

class ListInstanceProfileTagsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSIdentityManagementV20100508", "ListInstanceProfileTags", {})
    .n("IAMClient", "ListInstanceProfileTagsCommand")
    .f(void 0, void 0)
    .ser(se_ListInstanceProfileTagsCommand)
    .de(de_ListInstanceProfileTagsCommand)
    .build() {
}

class ListMFADevicesCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSIdentityManagementV20100508", "ListMFADevices", {})
    .n("IAMClient", "ListMFADevicesCommand")
    .f(void 0, void 0)
    .ser(se_ListMFADevicesCommand)
    .de(de_ListMFADevicesCommand)
    .build() {
}

class ListMFADeviceTagsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSIdentityManagementV20100508", "ListMFADeviceTags", {})
    .n("IAMClient", "ListMFADeviceTagsCommand")
    .f(void 0, void 0)
    .ser(se_ListMFADeviceTagsCommand)
    .de(de_ListMFADeviceTagsCommand)
    .build() {
}

class ListOpenIDConnectProvidersCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSIdentityManagementV20100508", "ListOpenIDConnectProviders", {})
    .n("IAMClient", "ListOpenIDConnectProvidersCommand")
    .f(void 0, void 0)
    .ser(se_ListOpenIDConnectProvidersCommand)
    .de(de_ListOpenIDConnectProvidersCommand)
    .build() {
}

class ListOpenIDConnectProviderTagsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSIdentityManagementV20100508", "ListOpenIDConnectProviderTags", {})
    .n("IAMClient", "ListOpenIDConnectProviderTagsCommand")
    .f(void 0, void 0)
    .ser(se_ListOpenIDConnectProviderTagsCommand)
    .de(de_ListOpenIDConnectProviderTagsCommand)
    .build() {
}

class ListOrganizationsFeaturesCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSIdentityManagementV20100508", "ListOrganizationsFeatures", {})
    .n("IAMClient", "ListOrganizationsFeaturesCommand")
    .f(void 0, void 0)
    .ser(se_ListOrganizationsFeaturesCommand)
    .de(de_ListOrganizationsFeaturesCommand)
    .build() {
}

class ListPoliciesCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSIdentityManagementV20100508", "ListPolicies", {})
    .n("IAMClient", "ListPoliciesCommand")
    .f(void 0, void 0)
    .ser(se_ListPoliciesCommand)
    .de(de_ListPoliciesCommand)
    .build() {
}

class ListPoliciesGrantingServiceAccessCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSIdentityManagementV20100508", "ListPoliciesGrantingServiceAccess", {})
    .n("IAMClient", "ListPoliciesGrantingServiceAccessCommand")
    .f(void 0, void 0)
    .ser(se_ListPoliciesGrantingServiceAccessCommand)
    .de(de_ListPoliciesGrantingServiceAccessCommand)
    .build() {
}

class ListPolicyTagsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSIdentityManagementV20100508", "ListPolicyTags", {})
    .n("IAMClient", "ListPolicyTagsCommand")
    .f(void 0, void 0)
    .ser(se_ListPolicyTagsCommand)
    .de(de_ListPolicyTagsCommand)
    .build() {
}

class ListPolicyVersionsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSIdentityManagementV20100508", "ListPolicyVersions", {})
    .n("IAMClient", "ListPolicyVersionsCommand")
    .f(void 0, void 0)
    .ser(se_ListPolicyVersionsCommand)
    .de(de_ListPolicyVersionsCommand)
    .build() {
}

class ListRolePoliciesCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSIdentityManagementV20100508", "ListRolePolicies", {})
    .n("IAMClient", "ListRolePoliciesCommand")
    .f(void 0, void 0)
    .ser(se_ListRolePoliciesCommand)
    .de(de_ListRolePoliciesCommand)
    .build() {
}

class ListRolesCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSIdentityManagementV20100508", "ListRoles", {})
    .n("IAMClient", "ListRolesCommand")
    .f(void 0, void 0)
    .ser(se_ListRolesCommand)
    .de(de_ListRolesCommand)
    .build() {
}

class ListRoleTagsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSIdentityManagementV20100508", "ListRoleTags", {})
    .n("IAMClient", "ListRoleTagsCommand")
    .f(void 0, void 0)
    .ser(se_ListRoleTagsCommand)
    .de(de_ListRoleTagsCommand)
    .build() {
}

class ListSAMLProvidersCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSIdentityManagementV20100508", "ListSAMLProviders", {})
    .n("IAMClient", "ListSAMLProvidersCommand")
    .f(void 0, void 0)
    .ser(se_ListSAMLProvidersCommand)
    .de(de_ListSAMLProvidersCommand)
    .build() {
}

class ListSAMLProviderTagsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSIdentityManagementV20100508", "ListSAMLProviderTags", {})
    .n("IAMClient", "ListSAMLProviderTagsCommand")
    .f(void 0, void 0)
    .ser(se_ListSAMLProviderTagsCommand)
    .de(de_ListSAMLProviderTagsCommand)
    .build() {
}

class ListServerCertificatesCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSIdentityManagementV20100508", "ListServerCertificates", {})
    .n("IAMClient", "ListServerCertificatesCommand")
    .f(void 0, void 0)
    .ser(se_ListServerCertificatesCommand)
    .de(de_ListServerCertificatesCommand)
    .build() {
}

class ListServerCertificateTagsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSIdentityManagementV20100508", "ListServerCertificateTags", {})
    .n("IAMClient", "ListServerCertificateTagsCommand")
    .f(void 0, void 0)
    .ser(se_ListServerCertificateTagsCommand)
    .de(de_ListServerCertificateTagsCommand)
    .build() {
}

class ListServiceSpecificCredentialsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSIdentityManagementV20100508", "ListServiceSpecificCredentials", {})
    .n("IAMClient", "ListServiceSpecificCredentialsCommand")
    .f(void 0, void 0)
    .ser(se_ListServiceSpecificCredentialsCommand)
    .de(de_ListServiceSpecificCredentialsCommand)
    .build() {
}

class ListSigningCertificatesCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSIdentityManagementV20100508", "ListSigningCertificates", {})
    .n("IAMClient", "ListSigningCertificatesCommand")
    .f(void 0, void 0)
    .ser(se_ListSigningCertificatesCommand)
    .de(de_ListSigningCertificatesCommand)
    .build() {
}

class ListSSHPublicKeysCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSIdentityManagementV20100508", "ListSSHPublicKeys", {})
    .n("IAMClient", "ListSSHPublicKeysCommand")
    .f(void 0, void 0)
    .ser(se_ListSSHPublicKeysCommand)
    .de(de_ListSSHPublicKeysCommand)
    .build() {
}

class ListUserPoliciesCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSIdentityManagementV20100508", "ListUserPolicies", {})
    .n("IAMClient", "ListUserPoliciesCommand")
    .f(void 0, void 0)
    .ser(se_ListUserPoliciesCommand)
    .de(de_ListUserPoliciesCommand)
    .build() {
}

class ListUsersCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSIdentityManagementV20100508", "ListUsers", {})
    .n("IAMClient", "ListUsersCommand")
    .f(void 0, void 0)
    .ser(se_ListUsersCommand)
    .de(de_ListUsersCommand)
    .build() {
}

class ListUserTagsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSIdentityManagementV20100508", "ListUserTags", {})
    .n("IAMClient", "ListUserTagsCommand")
    .f(void 0, void 0)
    .ser(se_ListUserTagsCommand)
    .de(de_ListUserTagsCommand)
    .build() {
}

class ListVirtualMFADevicesCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSIdentityManagementV20100508", "ListVirtualMFADevices", {})
    .n("IAMClient", "ListVirtualMFADevicesCommand")
    .f(void 0, ListVirtualMFADevicesResponseFilterSensitiveLog)
    .ser(se_ListVirtualMFADevicesCommand)
    .de(de_ListVirtualMFADevicesCommand)
    .build() {
}

class PutGroupPolicyCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSIdentityManagementV20100508", "PutGroupPolicy", {})
    .n("IAMClient", "PutGroupPolicyCommand")
    .f(void 0, void 0)
    .ser(se_PutGroupPolicyCommand)
    .de(de_PutGroupPolicyCommand)
    .build() {
}

class PutRolePermissionsBoundaryCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSIdentityManagementV20100508", "PutRolePermissionsBoundary", {})
    .n("IAMClient", "PutRolePermissionsBoundaryCommand")
    .f(void 0, void 0)
    .ser(se_PutRolePermissionsBoundaryCommand)
    .de(de_PutRolePermissionsBoundaryCommand)
    .build() {
}

class PutRolePolicyCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSIdentityManagementV20100508", "PutRolePolicy", {})
    .n("IAMClient", "PutRolePolicyCommand")
    .f(void 0, void 0)
    .ser(se_PutRolePolicyCommand)
    .de(de_PutRolePolicyCommand)
    .build() {
}

class PutUserPermissionsBoundaryCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSIdentityManagementV20100508", "PutUserPermissionsBoundary", {})
    .n("IAMClient", "PutUserPermissionsBoundaryCommand")
    .f(void 0, void 0)
    .ser(se_PutUserPermissionsBoundaryCommand)
    .de(de_PutUserPermissionsBoundaryCommand)
    .build() {
}

class PutUserPolicyCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSIdentityManagementV20100508", "PutUserPolicy", {})
    .n("IAMClient", "PutUserPolicyCommand")
    .f(void 0, void 0)
    .ser(se_PutUserPolicyCommand)
    .de(de_PutUserPolicyCommand)
    .build() {
}

class RemoveClientIDFromOpenIDConnectProviderCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSIdentityManagementV20100508", "RemoveClientIDFromOpenIDConnectProvider", {})
    .n("IAMClient", "RemoveClientIDFromOpenIDConnectProviderCommand")
    .f(void 0, void 0)
    .ser(se_RemoveClientIDFromOpenIDConnectProviderCommand)
    .de(de_RemoveClientIDFromOpenIDConnectProviderCommand)
    .build() {
}

class RemoveRoleFromInstanceProfileCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSIdentityManagementV20100508", "RemoveRoleFromInstanceProfile", {})
    .n("IAMClient", "RemoveRoleFromInstanceProfileCommand")
    .f(void 0, void 0)
    .ser(se_RemoveRoleFromInstanceProfileCommand)
    .de(de_RemoveRoleFromInstanceProfileCommand)
    .build() {
}

class RemoveUserFromGroupCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSIdentityManagementV20100508", "RemoveUserFromGroup", {})
    .n("IAMClient", "RemoveUserFromGroupCommand")
    .f(void 0, void 0)
    .ser(se_RemoveUserFromGroupCommand)
    .de(de_RemoveUserFromGroupCommand)
    .build() {
}

class ResetServiceSpecificCredentialCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSIdentityManagementV20100508", "ResetServiceSpecificCredential", {})
    .n("IAMClient", "ResetServiceSpecificCredentialCommand")
    .f(void 0, ResetServiceSpecificCredentialResponseFilterSensitiveLog)
    .ser(se_ResetServiceSpecificCredentialCommand)
    .de(de_ResetServiceSpecificCredentialCommand)
    .build() {
}

class ResyncMFADeviceCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSIdentityManagementV20100508", "ResyncMFADevice", {})
    .n("IAMClient", "ResyncMFADeviceCommand")
    .f(void 0, void 0)
    .ser(se_ResyncMFADeviceCommand)
    .de(de_ResyncMFADeviceCommand)
    .build() {
}

class SetDefaultPolicyVersionCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSIdentityManagementV20100508", "SetDefaultPolicyVersion", {})
    .n("IAMClient", "SetDefaultPolicyVersionCommand")
    .f(void 0, void 0)
    .ser(se_SetDefaultPolicyVersionCommand)
    .de(de_SetDefaultPolicyVersionCommand)
    .build() {
}

class SetSecurityTokenServicePreferencesCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSIdentityManagementV20100508", "SetSecurityTokenServicePreferences", {})
    .n("IAMClient", "SetSecurityTokenServicePreferencesCommand")
    .f(void 0, void 0)
    .ser(se_SetSecurityTokenServicePreferencesCommand)
    .de(de_SetSecurityTokenServicePreferencesCommand)
    .build() {
}

class SimulateCustomPolicyCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSIdentityManagementV20100508", "SimulateCustomPolicy", {})
    .n("IAMClient", "SimulateCustomPolicyCommand")
    .f(void 0, void 0)
    .ser(se_SimulateCustomPolicyCommand)
    .de(de_SimulateCustomPolicyCommand)
    .build() {
}

class SimulatePrincipalPolicyCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSIdentityManagementV20100508", "SimulatePrincipalPolicy", {})
    .n("IAMClient", "SimulatePrincipalPolicyCommand")
    .f(void 0, void 0)
    .ser(se_SimulatePrincipalPolicyCommand)
    .de(de_SimulatePrincipalPolicyCommand)
    .build() {
}

class TagInstanceProfileCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSIdentityManagementV20100508", "TagInstanceProfile", {})
    .n("IAMClient", "TagInstanceProfileCommand")
    .f(void 0, void 0)
    .ser(se_TagInstanceProfileCommand)
    .de(de_TagInstanceProfileCommand)
    .build() {
}

class TagMFADeviceCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSIdentityManagementV20100508", "TagMFADevice", {})
    .n("IAMClient", "TagMFADeviceCommand")
    .f(void 0, void 0)
    .ser(se_TagMFADeviceCommand)
    .de(de_TagMFADeviceCommand)
    .build() {
}

class TagOpenIDConnectProviderCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSIdentityManagementV20100508", "TagOpenIDConnectProvider", {})
    .n("IAMClient", "TagOpenIDConnectProviderCommand")
    .f(void 0, void 0)
    .ser(se_TagOpenIDConnectProviderCommand)
    .de(de_TagOpenIDConnectProviderCommand)
    .build() {
}

class TagPolicyCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSIdentityManagementV20100508", "TagPolicy", {})
    .n("IAMClient", "TagPolicyCommand")
    .f(void 0, void 0)
    .ser(se_TagPolicyCommand)
    .de(de_TagPolicyCommand)
    .build() {
}

class TagRoleCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSIdentityManagementV20100508", "TagRole", {})
    .n("IAMClient", "TagRoleCommand")
    .f(void 0, void 0)
    .ser(se_TagRoleCommand)
    .de(de_TagRoleCommand)
    .build() {
}

class TagSAMLProviderCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSIdentityManagementV20100508", "TagSAMLProvider", {})
    .n("IAMClient", "TagSAMLProviderCommand")
    .f(void 0, void 0)
    .ser(se_TagSAMLProviderCommand)
    .de(de_TagSAMLProviderCommand)
    .build() {
}

class TagServerCertificateCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSIdentityManagementV20100508", "TagServerCertificate", {})
    .n("IAMClient", "TagServerCertificateCommand")
    .f(void 0, void 0)
    .ser(se_TagServerCertificateCommand)
    .de(de_TagServerCertificateCommand)
    .build() {
}

class TagUserCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSIdentityManagementV20100508", "TagUser", {})
    .n("IAMClient", "TagUserCommand")
    .f(void 0, void 0)
    .ser(se_TagUserCommand)
    .de(de_TagUserCommand)
    .build() {
}

class UntagInstanceProfileCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSIdentityManagementV20100508", "UntagInstanceProfile", {})
    .n("IAMClient", "UntagInstanceProfileCommand")
    .f(void 0, void 0)
    .ser(se_UntagInstanceProfileCommand)
    .de(de_UntagInstanceProfileCommand)
    .build() {
}

class UntagMFADeviceCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSIdentityManagementV20100508", "UntagMFADevice", {})
    .n("IAMClient", "UntagMFADeviceCommand")
    .f(void 0, void 0)
    .ser(se_UntagMFADeviceCommand)
    .de(de_UntagMFADeviceCommand)
    .build() {
}

class UntagOpenIDConnectProviderCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSIdentityManagementV20100508", "UntagOpenIDConnectProvider", {})
    .n("IAMClient", "UntagOpenIDConnectProviderCommand")
    .f(void 0, void 0)
    .ser(se_UntagOpenIDConnectProviderCommand)
    .de(de_UntagOpenIDConnectProviderCommand)
    .build() {
}

class UntagPolicyCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSIdentityManagementV20100508", "UntagPolicy", {})
    .n("IAMClient", "UntagPolicyCommand")
    .f(void 0, void 0)
    .ser(se_UntagPolicyCommand)
    .de(de_UntagPolicyCommand)
    .build() {
}

class UntagRoleCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSIdentityManagementV20100508", "UntagRole", {})
    .n("IAMClient", "UntagRoleCommand")
    .f(void 0, void 0)
    .ser(se_UntagRoleCommand)
    .de(de_UntagRoleCommand)
    .build() {
}

class UntagSAMLProviderCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSIdentityManagementV20100508", "UntagSAMLProvider", {})
    .n("IAMClient", "UntagSAMLProviderCommand")
    .f(void 0, void 0)
    .ser(se_UntagSAMLProviderCommand)
    .de(de_UntagSAMLProviderCommand)
    .build() {
}

class UntagServerCertificateCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSIdentityManagementV20100508", "UntagServerCertificate", {})
    .n("IAMClient", "UntagServerCertificateCommand")
    .f(void 0, void 0)
    .ser(se_UntagServerCertificateCommand)
    .de(de_UntagServerCertificateCommand)
    .build() {
}

class UntagUserCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSIdentityManagementV20100508", "UntagUser", {})
    .n("IAMClient", "UntagUserCommand")
    .f(void 0, void 0)
    .ser(se_UntagUserCommand)
    .de(de_UntagUserCommand)
    .build() {
}

class UpdateAccessKeyCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSIdentityManagementV20100508", "UpdateAccessKey", {})
    .n("IAMClient", "UpdateAccessKeyCommand")
    .f(void 0, void 0)
    .ser(se_UpdateAccessKeyCommand)
    .de(de_UpdateAccessKeyCommand)
    .build() {
}

class UpdateAccountPasswordPolicyCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSIdentityManagementV20100508", "UpdateAccountPasswordPolicy", {})
    .n("IAMClient", "UpdateAccountPasswordPolicyCommand")
    .f(void 0, void 0)
    .ser(se_UpdateAccountPasswordPolicyCommand)
    .de(de_UpdateAccountPasswordPolicyCommand)
    .build() {
}

class UpdateAssumeRolePolicyCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSIdentityManagementV20100508", "UpdateAssumeRolePolicy", {})
    .n("IAMClient", "UpdateAssumeRolePolicyCommand")
    .f(void 0, void 0)
    .ser(se_UpdateAssumeRolePolicyCommand)
    .de(de_UpdateAssumeRolePolicyCommand)
    .build() {
}

class UpdateGroupCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSIdentityManagementV20100508", "UpdateGroup", {})
    .n("IAMClient", "UpdateGroupCommand")
    .f(void 0, void 0)
    .ser(se_UpdateGroupCommand)
    .de(de_UpdateGroupCommand)
    .build() {
}

class UpdateLoginProfileCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSIdentityManagementV20100508", "UpdateLoginProfile", {})
    .n("IAMClient", "UpdateLoginProfileCommand")
    .f(UpdateLoginProfileRequestFilterSensitiveLog, void 0)
    .ser(se_UpdateLoginProfileCommand)
    .de(de_UpdateLoginProfileCommand)
    .build() {
}

class UpdateOpenIDConnectProviderThumbprintCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSIdentityManagementV20100508", "UpdateOpenIDConnectProviderThumbprint", {})
    .n("IAMClient", "UpdateOpenIDConnectProviderThumbprintCommand")
    .f(void 0, void 0)
    .ser(se_UpdateOpenIDConnectProviderThumbprintCommand)
    .de(de_UpdateOpenIDConnectProviderThumbprintCommand)
    .build() {
}

class UpdateRoleCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSIdentityManagementV20100508", "UpdateRole", {})
    .n("IAMClient", "UpdateRoleCommand")
    .f(void 0, void 0)
    .ser(se_UpdateRoleCommand)
    .de(de_UpdateRoleCommand)
    .build() {
}

class UpdateRoleDescriptionCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSIdentityManagementV20100508", "UpdateRoleDescription", {})
    .n("IAMClient", "UpdateRoleDescriptionCommand")
    .f(void 0, void 0)
    .ser(se_UpdateRoleDescriptionCommand)
    .de(de_UpdateRoleDescriptionCommand)
    .build() {
}

class UpdateSAMLProviderCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSIdentityManagementV20100508", "UpdateSAMLProvider", {})
    .n("IAMClient", "UpdateSAMLProviderCommand")
    .f(UpdateSAMLProviderRequestFilterSensitiveLog, void 0)
    .ser(se_UpdateSAMLProviderCommand)
    .de(de_UpdateSAMLProviderCommand)
    .build() {
}

class UpdateServerCertificateCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSIdentityManagementV20100508", "UpdateServerCertificate", {})
    .n("IAMClient", "UpdateServerCertificateCommand")
    .f(void 0, void 0)
    .ser(se_UpdateServerCertificateCommand)
    .de(de_UpdateServerCertificateCommand)
    .build() {
}

class UpdateServiceSpecificCredentialCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSIdentityManagementV20100508", "UpdateServiceSpecificCredential", {})
    .n("IAMClient", "UpdateServiceSpecificCredentialCommand")
    .f(void 0, void 0)
    .ser(se_UpdateServiceSpecificCredentialCommand)
    .de(de_UpdateServiceSpecificCredentialCommand)
    .build() {
}

class UpdateSigningCertificateCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSIdentityManagementV20100508", "UpdateSigningCertificate", {})
    .n("IAMClient", "UpdateSigningCertificateCommand")
    .f(void 0, void 0)
    .ser(se_UpdateSigningCertificateCommand)
    .de(de_UpdateSigningCertificateCommand)
    .build() {
}

class UpdateSSHPublicKeyCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSIdentityManagementV20100508", "UpdateSSHPublicKey", {})
    .n("IAMClient", "UpdateSSHPublicKeyCommand")
    .f(void 0, void 0)
    .ser(se_UpdateSSHPublicKeyCommand)
    .de(de_UpdateSSHPublicKeyCommand)
    .build() {
}

class UpdateUserCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSIdentityManagementV20100508", "UpdateUser", {})
    .n("IAMClient", "UpdateUserCommand")
    .f(void 0, void 0)
    .ser(se_UpdateUserCommand)
    .de(de_UpdateUserCommand)
    .build() {
}

class UploadServerCertificateCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSIdentityManagementV20100508", "UploadServerCertificate", {})
    .n("IAMClient", "UploadServerCertificateCommand")
    .f(UploadServerCertificateRequestFilterSensitiveLog, void 0)
    .ser(se_UploadServerCertificateCommand)
    .de(de_UploadServerCertificateCommand)
    .build() {
}

class UploadSigningCertificateCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSIdentityManagementV20100508", "UploadSigningCertificate", {})
    .n("IAMClient", "UploadSigningCertificateCommand")
    .f(void 0, void 0)
    .ser(se_UploadSigningCertificateCommand)
    .de(de_UploadSigningCertificateCommand)
    .build() {
}

class UploadSSHPublicKeyCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSIdentityManagementV20100508", "UploadSSHPublicKey", {})
    .n("IAMClient", "UploadSSHPublicKeyCommand")
    .f(void 0, void 0)
    .ser(se_UploadSSHPublicKeyCommand)
    .de(de_UploadSSHPublicKeyCommand)
    .build() {
}

const commands = {
    AddClientIDToOpenIDConnectProviderCommand,
    AddRoleToInstanceProfileCommand,
    AddUserToGroupCommand,
    AttachGroupPolicyCommand,
    AttachRolePolicyCommand,
    AttachUserPolicyCommand,
    ChangePasswordCommand,
    CreateAccessKeyCommand,
    CreateAccountAliasCommand,
    CreateGroupCommand,
    CreateInstanceProfileCommand,
    CreateLoginProfileCommand,
    CreateOpenIDConnectProviderCommand,
    CreatePolicyCommand,
    CreatePolicyVersionCommand,
    CreateRoleCommand,
    CreateSAMLProviderCommand,
    CreateServiceLinkedRoleCommand,
    CreateServiceSpecificCredentialCommand,
    CreateUserCommand,
    CreateVirtualMFADeviceCommand,
    DeactivateMFADeviceCommand,
    DeleteAccessKeyCommand,
    DeleteAccountAliasCommand,
    DeleteAccountPasswordPolicyCommand,
    DeleteGroupCommand,
    DeleteGroupPolicyCommand,
    DeleteInstanceProfileCommand,
    DeleteLoginProfileCommand,
    DeleteOpenIDConnectProviderCommand,
    DeletePolicyCommand,
    DeletePolicyVersionCommand,
    DeleteRoleCommand,
    DeleteRolePermissionsBoundaryCommand,
    DeleteRolePolicyCommand,
    DeleteSAMLProviderCommand,
    DeleteServerCertificateCommand,
    DeleteServiceLinkedRoleCommand,
    DeleteServiceSpecificCredentialCommand,
    DeleteSigningCertificateCommand,
    DeleteSSHPublicKeyCommand,
    DeleteUserCommand,
    DeleteUserPermissionsBoundaryCommand,
    DeleteUserPolicyCommand,
    DeleteVirtualMFADeviceCommand,
    DetachGroupPolicyCommand,
    DetachRolePolicyCommand,
    DetachUserPolicyCommand,
    DisableOrganizationsRootCredentialsManagementCommand,
    DisableOrganizationsRootSessionsCommand,
    EnableMFADeviceCommand,
    EnableOrganizationsRootCredentialsManagementCommand,
    EnableOrganizationsRootSessionsCommand,
    GenerateCredentialReportCommand,
    GenerateOrganizationsAccessReportCommand,
    GenerateServiceLastAccessedDetailsCommand,
    GetAccessKeyLastUsedCommand,
    GetAccountAuthorizationDetailsCommand,
    GetAccountPasswordPolicyCommand,
    GetAccountSummaryCommand,
    GetContextKeysForCustomPolicyCommand,
    GetContextKeysForPrincipalPolicyCommand,
    GetCredentialReportCommand,
    GetGroupCommand,
    GetGroupPolicyCommand,
    GetInstanceProfileCommand,
    GetLoginProfileCommand,
    GetMFADeviceCommand,
    GetOpenIDConnectProviderCommand,
    GetOrganizationsAccessReportCommand,
    GetPolicyCommand,
    GetPolicyVersionCommand,
    GetRoleCommand,
    GetRolePolicyCommand,
    GetSAMLProviderCommand,
    GetServerCertificateCommand,
    GetServiceLastAccessedDetailsCommand,
    GetServiceLastAccessedDetailsWithEntitiesCommand,
    GetServiceLinkedRoleDeletionStatusCommand,
    GetSSHPublicKeyCommand,
    GetUserCommand,
    GetUserPolicyCommand,
    ListAccessKeysCommand,
    ListAccountAliasesCommand,
    ListAttachedGroupPoliciesCommand,
    ListAttachedRolePoliciesCommand,
    ListAttachedUserPoliciesCommand,
    ListEntitiesForPolicyCommand,
    ListGroupPoliciesCommand,
    ListGroupsCommand,
    ListGroupsForUserCommand,
    ListInstanceProfilesCommand,
    ListInstanceProfilesForRoleCommand,
    ListInstanceProfileTagsCommand,
    ListMFADevicesCommand,
    ListMFADeviceTagsCommand,
    ListOpenIDConnectProvidersCommand,
    ListOpenIDConnectProviderTagsCommand,
    ListOrganizationsFeaturesCommand,
    ListPoliciesCommand,
    ListPoliciesGrantingServiceAccessCommand,
    ListPolicyTagsCommand,
    ListPolicyVersionsCommand,
    ListRolePoliciesCommand,
    ListRolesCommand,
    ListRoleTagsCommand,
    ListSAMLProvidersCommand,
    ListSAMLProviderTagsCommand,
    ListServerCertificatesCommand,
    ListServerCertificateTagsCommand,
    ListServiceSpecificCredentialsCommand,
    ListSigningCertificatesCommand,
    ListSSHPublicKeysCommand,
    ListUserPoliciesCommand,
    ListUsersCommand,
    ListUserTagsCommand,
    ListVirtualMFADevicesCommand,
    PutGroupPolicyCommand,
    PutRolePermissionsBoundaryCommand,
    PutRolePolicyCommand,
    PutUserPermissionsBoundaryCommand,
    PutUserPolicyCommand,
    RemoveClientIDFromOpenIDConnectProviderCommand,
    RemoveRoleFromInstanceProfileCommand,
    RemoveUserFromGroupCommand,
    ResetServiceSpecificCredentialCommand,
    ResyncMFADeviceCommand,
    SetDefaultPolicyVersionCommand,
    SetSecurityTokenServicePreferencesCommand,
    SimulateCustomPolicyCommand,
    SimulatePrincipalPolicyCommand,
    TagInstanceProfileCommand,
    TagMFADeviceCommand,
    TagOpenIDConnectProviderCommand,
    TagPolicyCommand,
    TagRoleCommand,
    TagSAMLProviderCommand,
    TagServerCertificateCommand,
    TagUserCommand,
    UntagInstanceProfileCommand,
    UntagMFADeviceCommand,
    UntagOpenIDConnectProviderCommand,
    UntagPolicyCommand,
    UntagRoleCommand,
    UntagSAMLProviderCommand,
    UntagServerCertificateCommand,
    UntagUserCommand,
    UpdateAccessKeyCommand,
    UpdateAccountPasswordPolicyCommand,
    UpdateAssumeRolePolicyCommand,
    UpdateGroupCommand,
    UpdateLoginProfileCommand,
    UpdateOpenIDConnectProviderThumbprintCommand,
    UpdateRoleCommand,
    UpdateRoleDescriptionCommand,
    UpdateSAMLProviderCommand,
    UpdateServerCertificateCommand,
    UpdateServiceSpecificCredentialCommand,
    UpdateSigningCertificateCommand,
    UpdateSSHPublicKeyCommand,
    UpdateUserCommand,
    UploadServerCertificateCommand,
    UploadSigningCertificateCommand,
    UploadSSHPublicKeyCommand,
};
class IAM extends IAMClient {
}
smithyClient.createAggregatedClient(commands, IAM);

const paginateGetAccountAuthorizationDetails = core.createPaginator(IAMClient, GetAccountAuthorizationDetailsCommand, "Marker", "Marker", "MaxItems");

const paginateGetGroup = core.createPaginator(IAMClient, GetGroupCommand, "Marker", "Marker", "MaxItems");

const paginateListAccessKeys = core.createPaginator(IAMClient, ListAccessKeysCommand, "Marker", "Marker", "MaxItems");

const paginateListAccountAliases = core.createPaginator(IAMClient, ListAccountAliasesCommand, "Marker", "Marker", "MaxItems");

const paginateListAttachedGroupPolicies = core.createPaginator(IAMClient, ListAttachedGroupPoliciesCommand, "Marker", "Marker", "MaxItems");

const paginateListAttachedRolePolicies = core.createPaginator(IAMClient, ListAttachedRolePoliciesCommand, "Marker", "Marker", "MaxItems");

const paginateListAttachedUserPolicies = core.createPaginator(IAMClient, ListAttachedUserPoliciesCommand, "Marker", "Marker", "MaxItems");

const paginateListEntitiesForPolicy = core.createPaginator(IAMClient, ListEntitiesForPolicyCommand, "Marker", "Marker", "MaxItems");

const paginateListGroupPolicies = core.createPaginator(IAMClient, ListGroupPoliciesCommand, "Marker", "Marker", "MaxItems");

const paginateListGroupsForUser = core.createPaginator(IAMClient, ListGroupsForUserCommand, "Marker", "Marker", "MaxItems");

const paginateListGroups = core.createPaginator(IAMClient, ListGroupsCommand, "Marker", "Marker", "MaxItems");

const paginateListInstanceProfileTags = core.createPaginator(IAMClient, ListInstanceProfileTagsCommand, "Marker", "Marker", "MaxItems");

const paginateListInstanceProfilesForRole = core.createPaginator(IAMClient, ListInstanceProfilesForRoleCommand, "Marker", "Marker", "MaxItems");

const paginateListInstanceProfiles = core.createPaginator(IAMClient, ListInstanceProfilesCommand, "Marker", "Marker", "MaxItems");

const paginateListMFADeviceTags = core.createPaginator(IAMClient, ListMFADeviceTagsCommand, "Marker", "Marker", "MaxItems");

const paginateListMFADevices = core.createPaginator(IAMClient, ListMFADevicesCommand, "Marker", "Marker", "MaxItems");

const paginateListOpenIDConnectProviderTags = core.createPaginator(IAMClient, ListOpenIDConnectProviderTagsCommand, "Marker", "Marker", "MaxItems");

const paginateListPolicies = core.createPaginator(IAMClient, ListPoliciesCommand, "Marker", "Marker", "MaxItems");

const paginateListPolicyTags = core.createPaginator(IAMClient, ListPolicyTagsCommand, "Marker", "Marker", "MaxItems");

const paginateListPolicyVersions = core.createPaginator(IAMClient, ListPolicyVersionsCommand, "Marker", "Marker", "MaxItems");

const paginateListRolePolicies = core.createPaginator(IAMClient, ListRolePoliciesCommand, "Marker", "Marker", "MaxItems");

const paginateListRoleTags = core.createPaginator(IAMClient, ListRoleTagsCommand, "Marker", "Marker", "MaxItems");

const paginateListRoles = core.createPaginator(IAMClient, ListRolesCommand, "Marker", "Marker", "MaxItems");

const paginateListSAMLProviderTags = core.createPaginator(IAMClient, ListSAMLProviderTagsCommand, "Marker", "Marker", "MaxItems");

const paginateListSSHPublicKeys = core.createPaginator(IAMClient, ListSSHPublicKeysCommand, "Marker", "Marker", "MaxItems");

const paginateListServerCertificateTags = core.createPaginator(IAMClient, ListServerCertificateTagsCommand, "Marker", "Marker", "MaxItems");

const paginateListServerCertificates = core.createPaginator(IAMClient, ListServerCertificatesCommand, "Marker", "Marker", "MaxItems");

const paginateListSigningCertificates = core.createPaginator(IAMClient, ListSigningCertificatesCommand, "Marker", "Marker", "MaxItems");

const paginateListUserPolicies = core.createPaginator(IAMClient, ListUserPoliciesCommand, "Marker", "Marker", "MaxItems");

const paginateListUserTags = core.createPaginator(IAMClient, ListUserTagsCommand, "Marker", "Marker", "MaxItems");

const paginateListUsers = core.createPaginator(IAMClient, ListUsersCommand, "Marker", "Marker", "MaxItems");

const paginateListVirtualMFADevices = core.createPaginator(IAMClient, ListVirtualMFADevicesCommand, "Marker", "Marker", "MaxItems");

const paginateSimulateCustomPolicy = core.createPaginator(IAMClient, SimulateCustomPolicyCommand, "Marker", "Marker", "MaxItems");

const paginateSimulatePrincipalPolicy = core.createPaginator(IAMClient, SimulatePrincipalPolicyCommand, "Marker", "Marker", "MaxItems");

const checkState$3 = async (client, input) => {
    let reason;
    try {
        const result = await client.send(new GetInstanceProfileCommand(input));
        reason = result;
        return { state: utilWaiter.WaiterState.SUCCESS, reason };
    }
    catch (exception) {
        reason = exception;
        if (exception.name && exception.name == "NoSuchEntityException") {
            return { state: utilWaiter.WaiterState.RETRY, reason };
        }
    }
    return { state: utilWaiter.WaiterState.RETRY, reason };
};
const waitForInstanceProfileExists = async (params, input) => {
    const serviceDefaults = { minDelay: 1, maxDelay: 120 };
    return utilWaiter.createWaiter({ ...serviceDefaults, ...params }, input, checkState$3);
};
const waitUntilInstanceProfileExists = async (params, input) => {
    const serviceDefaults = { minDelay: 1, maxDelay: 120 };
    const result = await utilWaiter.createWaiter({ ...serviceDefaults, ...params }, input, checkState$3);
    return utilWaiter.checkExceptions(result);
};

const checkState$2 = async (client, input) => {
    let reason;
    try {
        const result = await client.send(new GetPolicyCommand(input));
        reason = result;
        return { state: utilWaiter.WaiterState.SUCCESS, reason };
    }
    catch (exception) {
        reason = exception;
        if (exception.name && exception.name == "NoSuchEntityException") {
            return { state: utilWaiter.WaiterState.RETRY, reason };
        }
    }
    return { state: utilWaiter.WaiterState.RETRY, reason };
};
const waitForPolicyExists = async (params, input) => {
    const serviceDefaults = { minDelay: 1, maxDelay: 120 };
    return utilWaiter.createWaiter({ ...serviceDefaults, ...params }, input, checkState$2);
};
const waitUntilPolicyExists = async (params, input) => {
    const serviceDefaults = { minDelay: 1, maxDelay: 120 };
    const result = await utilWaiter.createWaiter({ ...serviceDefaults, ...params }, input, checkState$2);
    return utilWaiter.checkExceptions(result);
};

const checkState$1 = async (client, input) => {
    let reason;
    try {
        const result = await client.send(new GetRoleCommand(input));
        reason = result;
        return { state: utilWaiter.WaiterState.SUCCESS, reason };
    }
    catch (exception) {
        reason = exception;
        if (exception.name && exception.name == "NoSuchEntityException") {
            return { state: utilWaiter.WaiterState.RETRY, reason };
        }
    }
    return { state: utilWaiter.WaiterState.RETRY, reason };
};
const waitForRoleExists = async (params, input) => {
    const serviceDefaults = { minDelay: 1, maxDelay: 120 };
    return utilWaiter.createWaiter({ ...serviceDefaults, ...params }, input, checkState$1);
};
const waitUntilRoleExists = async (params, input) => {
    const serviceDefaults = { minDelay: 1, maxDelay: 120 };
    const result = await utilWaiter.createWaiter({ ...serviceDefaults, ...params }, input, checkState$1);
    return utilWaiter.checkExceptions(result);
};

const checkState = async (client, input) => {
    let reason;
    try {
        const result = await client.send(new GetUserCommand(input));
        reason = result;
        return { state: utilWaiter.WaiterState.SUCCESS, reason };
    }
    catch (exception) {
        reason = exception;
        if (exception.name && exception.name == "NoSuchEntityException") {
            return { state: utilWaiter.WaiterState.RETRY, reason };
        }
    }
    return { state: utilWaiter.WaiterState.RETRY, reason };
};
const waitForUserExists = async (params, input) => {
    const serviceDefaults = { minDelay: 1, maxDelay: 120 };
    return utilWaiter.createWaiter({ ...serviceDefaults, ...params }, input, checkState);
};
const waitUntilUserExists = async (params, input) => {
    const serviceDefaults = { minDelay: 1, maxDelay: 120 };
    const result = await utilWaiter.createWaiter({ ...serviceDefaults, ...params }, input, checkState);
    return utilWaiter.checkExceptions(result);
};

Object.defineProperty(exports, "$Command", {
    enumerable: true,
    get: function () { return smithyClient.Command; }
});
Object.defineProperty(exports, "__Client", {
    enumerable: true,
    get: function () { return smithyClient.Client; }
});
exports.AccessAdvisorUsageGranularityType = AccessAdvisorUsageGranularityType;
exports.AccessKeyFilterSensitiveLog = AccessKeyFilterSensitiveLog;
exports.AccountNotManagementOrDelegatedAdministratorException = AccountNotManagementOrDelegatedAdministratorException;
exports.AddClientIDToOpenIDConnectProviderCommand = AddClientIDToOpenIDConnectProviderCommand;
exports.AddRoleToInstanceProfileCommand = AddRoleToInstanceProfileCommand;
exports.AddUserToGroupCommand = AddUserToGroupCommand;
exports.AssertionEncryptionModeType = AssertionEncryptionModeType;
exports.AssignmentStatusType = AssignmentStatusType;
exports.AttachGroupPolicyCommand = AttachGroupPolicyCommand;
exports.AttachRolePolicyCommand = AttachRolePolicyCommand;
exports.AttachUserPolicyCommand = AttachUserPolicyCommand;
exports.CallerIsNotManagementAccountException = CallerIsNotManagementAccountException;
exports.ChangePasswordCommand = ChangePasswordCommand;
exports.ChangePasswordRequestFilterSensitiveLog = ChangePasswordRequestFilterSensitiveLog;
exports.ConcurrentModificationException = ConcurrentModificationException;
exports.ContextKeyTypeEnum = ContextKeyTypeEnum;
exports.CreateAccessKeyCommand = CreateAccessKeyCommand;
exports.CreateAccessKeyResponseFilterSensitiveLog = CreateAccessKeyResponseFilterSensitiveLog;
exports.CreateAccountAliasCommand = CreateAccountAliasCommand;
exports.CreateGroupCommand = CreateGroupCommand;
exports.CreateInstanceProfileCommand = CreateInstanceProfileCommand;
exports.CreateLoginProfileCommand = CreateLoginProfileCommand;
exports.CreateLoginProfileRequestFilterSensitiveLog = CreateLoginProfileRequestFilterSensitiveLog;
exports.CreateOpenIDConnectProviderCommand = CreateOpenIDConnectProviderCommand;
exports.CreatePolicyCommand = CreatePolicyCommand;
exports.CreatePolicyVersionCommand = CreatePolicyVersionCommand;
exports.CreateRoleCommand = CreateRoleCommand;
exports.CreateSAMLProviderCommand = CreateSAMLProviderCommand;
exports.CreateSAMLProviderRequestFilterSensitiveLog = CreateSAMLProviderRequestFilterSensitiveLog;
exports.CreateServiceLinkedRoleCommand = CreateServiceLinkedRoleCommand;
exports.CreateServiceSpecificCredentialCommand = CreateServiceSpecificCredentialCommand;
exports.CreateServiceSpecificCredentialResponseFilterSensitiveLog = CreateServiceSpecificCredentialResponseFilterSensitiveLog;
exports.CreateUserCommand = CreateUserCommand;
exports.CreateVirtualMFADeviceCommand = CreateVirtualMFADeviceCommand;
exports.CreateVirtualMFADeviceResponseFilterSensitiveLog = CreateVirtualMFADeviceResponseFilterSensitiveLog;
exports.CredentialReportExpiredException = CredentialReportExpiredException;
exports.CredentialReportNotPresentException = CredentialReportNotPresentException;
exports.CredentialReportNotReadyException = CredentialReportNotReadyException;
exports.DeactivateMFADeviceCommand = DeactivateMFADeviceCommand;
exports.DeleteAccessKeyCommand = DeleteAccessKeyCommand;
exports.DeleteAccountAliasCommand = DeleteAccountAliasCommand;
exports.DeleteAccountPasswordPolicyCommand = DeleteAccountPasswordPolicyCommand;
exports.DeleteConflictException = DeleteConflictException;
exports.DeleteGroupCommand = DeleteGroupCommand;
exports.DeleteGroupPolicyCommand = DeleteGroupPolicyCommand;
exports.DeleteInstanceProfileCommand = DeleteInstanceProfileCommand;
exports.DeleteLoginProfileCommand = DeleteLoginProfileCommand;
exports.DeleteOpenIDConnectProviderCommand = DeleteOpenIDConnectProviderCommand;
exports.DeletePolicyCommand = DeletePolicyCommand;
exports.DeletePolicyVersionCommand = DeletePolicyVersionCommand;
exports.DeleteRoleCommand = DeleteRoleCommand;
exports.DeleteRolePermissionsBoundaryCommand = DeleteRolePermissionsBoundaryCommand;
exports.DeleteRolePolicyCommand = DeleteRolePolicyCommand;
exports.DeleteSAMLProviderCommand = DeleteSAMLProviderCommand;
exports.DeleteSSHPublicKeyCommand = DeleteSSHPublicKeyCommand;
exports.DeleteServerCertificateCommand = DeleteServerCertificateCommand;
exports.DeleteServiceLinkedRoleCommand = DeleteServiceLinkedRoleCommand;
exports.DeleteServiceSpecificCredentialCommand = DeleteServiceSpecificCredentialCommand;
exports.DeleteSigningCertificateCommand = DeleteSigningCertificateCommand;
exports.DeleteUserCommand = DeleteUserCommand;
exports.DeleteUserPermissionsBoundaryCommand = DeleteUserPermissionsBoundaryCommand;
exports.DeleteUserPolicyCommand = DeleteUserPolicyCommand;
exports.DeleteVirtualMFADeviceCommand = DeleteVirtualMFADeviceCommand;
exports.DeletionTaskStatusType = DeletionTaskStatusType;
exports.DetachGroupPolicyCommand = DetachGroupPolicyCommand;
exports.DetachRolePolicyCommand = DetachRolePolicyCommand;
exports.DetachUserPolicyCommand = DetachUserPolicyCommand;
exports.DisableOrganizationsRootCredentialsManagementCommand = DisableOrganizationsRootCredentialsManagementCommand;
exports.DisableOrganizationsRootSessionsCommand = DisableOrganizationsRootSessionsCommand;
exports.DuplicateCertificateException = DuplicateCertificateException;
exports.DuplicateSSHPublicKeyException = DuplicateSSHPublicKeyException;
exports.EnableMFADeviceCommand = EnableMFADeviceCommand;
exports.EnableOrganizationsRootCredentialsManagementCommand = EnableOrganizationsRootCredentialsManagementCommand;
exports.EnableOrganizationsRootSessionsCommand = EnableOrganizationsRootSessionsCommand;
exports.EncodingType = EncodingType;
exports.EntityAlreadyExistsException = EntityAlreadyExistsException;
exports.EntityTemporarilyUnmodifiableException = EntityTemporarilyUnmodifiableException;
exports.EntityType = EntityType;
exports.FeatureType = FeatureType;
exports.GenerateCredentialReportCommand = GenerateCredentialReportCommand;
exports.GenerateOrganizationsAccessReportCommand = GenerateOrganizationsAccessReportCommand;
exports.GenerateServiceLastAccessedDetailsCommand = GenerateServiceLastAccessedDetailsCommand;
exports.GetAccessKeyLastUsedCommand = GetAccessKeyLastUsedCommand;
exports.GetAccountAuthorizationDetailsCommand = GetAccountAuthorizationDetailsCommand;
exports.GetAccountPasswordPolicyCommand = GetAccountPasswordPolicyCommand;
exports.GetAccountSummaryCommand = GetAccountSummaryCommand;
exports.GetContextKeysForCustomPolicyCommand = GetContextKeysForCustomPolicyCommand;
exports.GetContextKeysForPrincipalPolicyCommand = GetContextKeysForPrincipalPolicyCommand;
exports.GetCredentialReportCommand = GetCredentialReportCommand;
exports.GetGroupCommand = GetGroupCommand;
exports.GetGroupPolicyCommand = GetGroupPolicyCommand;
exports.GetInstanceProfileCommand = GetInstanceProfileCommand;
exports.GetLoginProfileCommand = GetLoginProfileCommand;
exports.GetMFADeviceCommand = GetMFADeviceCommand;
exports.GetOpenIDConnectProviderCommand = GetOpenIDConnectProviderCommand;
exports.GetOrganizationsAccessReportCommand = GetOrganizationsAccessReportCommand;
exports.GetPolicyCommand = GetPolicyCommand;
exports.GetPolicyVersionCommand = GetPolicyVersionCommand;
exports.GetRoleCommand = GetRoleCommand;
exports.GetRolePolicyCommand = GetRolePolicyCommand;
exports.GetSAMLProviderCommand = GetSAMLProviderCommand;
exports.GetSSHPublicKeyCommand = GetSSHPublicKeyCommand;
exports.GetServerCertificateCommand = GetServerCertificateCommand;
exports.GetServiceLastAccessedDetailsCommand = GetServiceLastAccessedDetailsCommand;
exports.GetServiceLastAccessedDetailsWithEntitiesCommand = GetServiceLastAccessedDetailsWithEntitiesCommand;
exports.GetServiceLinkedRoleDeletionStatusCommand = GetServiceLinkedRoleDeletionStatusCommand;
exports.GetUserCommand = GetUserCommand;
exports.GetUserPolicyCommand = GetUserPolicyCommand;
exports.GlobalEndpointTokenVersion = GlobalEndpointTokenVersion;
exports.IAM = IAM;
exports.IAMClient = IAMClient;
exports.IAMServiceException = IAMServiceException;
exports.InvalidAuthenticationCodeException = InvalidAuthenticationCodeException;
exports.InvalidCertificateException = InvalidCertificateException;
exports.InvalidInputException = InvalidInputException;
exports.InvalidPublicKeyException = InvalidPublicKeyException;
exports.InvalidUserTypeException = InvalidUserTypeException;
exports.JobStatusType = JobStatusType;
exports.KeyPairMismatchException = KeyPairMismatchException;
exports.LimitExceededException = LimitExceededException;
exports.ListAccessKeysCommand = ListAccessKeysCommand;
exports.ListAccountAliasesCommand = ListAccountAliasesCommand;
exports.ListAttachedGroupPoliciesCommand = ListAttachedGroupPoliciesCommand;
exports.ListAttachedRolePoliciesCommand = ListAttachedRolePoliciesCommand;
exports.ListAttachedUserPoliciesCommand = ListAttachedUserPoliciesCommand;
exports.ListEntitiesForPolicyCommand = ListEntitiesForPolicyCommand;
exports.ListGroupPoliciesCommand = ListGroupPoliciesCommand;
exports.ListGroupsCommand = ListGroupsCommand;
exports.ListGroupsForUserCommand = ListGroupsForUserCommand;
exports.ListInstanceProfileTagsCommand = ListInstanceProfileTagsCommand;
exports.ListInstanceProfilesCommand = ListInstanceProfilesCommand;
exports.ListInstanceProfilesForRoleCommand = ListInstanceProfilesForRoleCommand;
exports.ListMFADeviceTagsCommand = ListMFADeviceTagsCommand;
exports.ListMFADevicesCommand = ListMFADevicesCommand;
exports.ListOpenIDConnectProviderTagsCommand = ListOpenIDConnectProviderTagsCommand;
exports.ListOpenIDConnectProvidersCommand = ListOpenIDConnectProvidersCommand;
exports.ListOrganizationsFeaturesCommand = ListOrganizationsFeaturesCommand;
exports.ListPoliciesCommand = ListPoliciesCommand;
exports.ListPoliciesGrantingServiceAccessCommand = ListPoliciesGrantingServiceAccessCommand;
exports.ListPolicyTagsCommand = ListPolicyTagsCommand;
exports.ListPolicyVersionsCommand = ListPolicyVersionsCommand;
exports.ListRolePoliciesCommand = ListRolePoliciesCommand;
exports.ListRoleTagsCommand = ListRoleTagsCommand;
exports.ListRolesCommand = ListRolesCommand;
exports.ListSAMLProviderTagsCommand = ListSAMLProviderTagsCommand;
exports.ListSAMLProvidersCommand = ListSAMLProvidersCommand;
exports.ListSSHPublicKeysCommand = ListSSHPublicKeysCommand;
exports.ListServerCertificateTagsCommand = ListServerCertificateTagsCommand;
exports.ListServerCertificatesCommand = ListServerCertificatesCommand;
exports.ListServiceSpecificCredentialsCommand = ListServiceSpecificCredentialsCommand;
exports.ListSigningCertificatesCommand = ListSigningCertificatesCommand;
exports.ListUserPoliciesCommand = ListUserPoliciesCommand;
exports.ListUserTagsCommand = ListUserTagsCommand;
exports.ListUsersCommand = ListUsersCommand;
exports.ListVirtualMFADevicesCommand = ListVirtualMFADevicesCommand;
exports.ListVirtualMFADevicesResponseFilterSensitiveLog = ListVirtualMFADevicesResponseFilterSensitiveLog;
exports.MalformedCertificateException = MalformedCertificateException;
exports.MalformedPolicyDocumentException = MalformedPolicyDocumentException;
exports.NoSuchEntityException = NoSuchEntityException;
exports.OpenIdIdpCommunicationErrorException = OpenIdIdpCommunicationErrorException;
exports.OrganizationNotFoundException = OrganizationNotFoundException;
exports.OrganizationNotInAllFeaturesModeException = OrganizationNotInAllFeaturesModeException;
exports.PasswordPolicyViolationException = PasswordPolicyViolationException;
exports.PermissionsBoundaryAttachmentType = PermissionsBoundaryAttachmentType;
exports.PolicyEvaluationDecisionType = PolicyEvaluationDecisionType;
exports.PolicyEvaluationException = PolicyEvaluationException;
exports.PolicyNotAttachableException = PolicyNotAttachableException;
exports.PolicyOwnerEntityType = PolicyOwnerEntityType;
exports.PolicyScopeType = PolicyScopeType;
exports.PolicySourceType = PolicySourceType;
exports.PolicyType = PolicyType;
exports.PolicyUsageType = PolicyUsageType;
exports.PutGroupPolicyCommand = PutGroupPolicyCommand;
exports.PutRolePermissionsBoundaryCommand = PutRolePermissionsBoundaryCommand;
exports.PutRolePolicyCommand = PutRolePolicyCommand;
exports.PutUserPermissionsBoundaryCommand = PutUserPermissionsBoundaryCommand;
exports.PutUserPolicyCommand = PutUserPolicyCommand;
exports.RemoveClientIDFromOpenIDConnectProviderCommand = RemoveClientIDFromOpenIDConnectProviderCommand;
exports.RemoveRoleFromInstanceProfileCommand = RemoveRoleFromInstanceProfileCommand;
exports.RemoveUserFromGroupCommand = RemoveUserFromGroupCommand;
exports.ReportFormatType = ReportFormatType;
exports.ReportGenerationLimitExceededException = ReportGenerationLimitExceededException;
exports.ReportStateType = ReportStateType;
exports.ResetServiceSpecificCredentialCommand = ResetServiceSpecificCredentialCommand;
exports.ResetServiceSpecificCredentialResponseFilterSensitiveLog = ResetServiceSpecificCredentialResponseFilterSensitiveLog;
exports.ResyncMFADeviceCommand = ResyncMFADeviceCommand;
exports.ServiceAccessNotEnabledException = ServiceAccessNotEnabledException;
exports.ServiceFailureException = ServiceFailureException;
exports.ServiceNotSupportedException = ServiceNotSupportedException;
exports.ServiceSpecificCredentialFilterSensitiveLog = ServiceSpecificCredentialFilterSensitiveLog;
exports.SetDefaultPolicyVersionCommand = SetDefaultPolicyVersionCommand;
exports.SetSecurityTokenServicePreferencesCommand = SetSecurityTokenServicePreferencesCommand;
exports.SimulateCustomPolicyCommand = SimulateCustomPolicyCommand;
exports.SimulatePrincipalPolicyCommand = SimulatePrincipalPolicyCommand;
exports.SortKeyType = SortKeyType;
exports.StatusType = StatusType;
exports.SummaryKeyType = SummaryKeyType;
exports.TagInstanceProfileCommand = TagInstanceProfileCommand;
exports.TagMFADeviceCommand = TagMFADeviceCommand;
exports.TagOpenIDConnectProviderCommand = TagOpenIDConnectProviderCommand;
exports.TagPolicyCommand = TagPolicyCommand;
exports.TagRoleCommand = TagRoleCommand;
exports.TagSAMLProviderCommand = TagSAMLProviderCommand;
exports.TagServerCertificateCommand = TagServerCertificateCommand;
exports.TagUserCommand = TagUserCommand;
exports.UnmodifiableEntityException = UnmodifiableEntityException;
exports.UnrecognizedPublicKeyEncodingException = UnrecognizedPublicKeyEncodingException;
exports.UntagInstanceProfileCommand = UntagInstanceProfileCommand;
exports.UntagMFADeviceCommand = UntagMFADeviceCommand;
exports.UntagOpenIDConnectProviderCommand = UntagOpenIDConnectProviderCommand;
exports.UntagPolicyCommand = UntagPolicyCommand;
exports.UntagRoleCommand = UntagRoleCommand;
exports.UntagSAMLProviderCommand = UntagSAMLProviderCommand;
exports.UntagServerCertificateCommand = UntagServerCertificateCommand;
exports.UntagUserCommand = UntagUserCommand;
exports.UpdateAccessKeyCommand = UpdateAccessKeyCommand;
exports.UpdateAccountPasswordPolicyCommand = UpdateAccountPasswordPolicyCommand;
exports.UpdateAssumeRolePolicyCommand = UpdateAssumeRolePolicyCommand;
exports.UpdateGroupCommand = UpdateGroupCommand;
exports.UpdateLoginProfileCommand = UpdateLoginProfileCommand;
exports.UpdateLoginProfileRequestFilterSensitiveLog = UpdateLoginProfileRequestFilterSensitiveLog;
exports.UpdateOpenIDConnectProviderThumbprintCommand = UpdateOpenIDConnectProviderThumbprintCommand;
exports.UpdateRoleCommand = UpdateRoleCommand;
exports.UpdateRoleDescriptionCommand = UpdateRoleDescriptionCommand;
exports.UpdateSAMLProviderCommand = UpdateSAMLProviderCommand;
exports.UpdateSAMLProviderRequestFilterSensitiveLog = UpdateSAMLProviderRequestFilterSensitiveLog;
exports.UpdateSSHPublicKeyCommand = UpdateSSHPublicKeyCommand;
exports.UpdateServerCertificateCommand = UpdateServerCertificateCommand;
exports.UpdateServiceSpecificCredentialCommand = UpdateServiceSpecificCredentialCommand;
exports.UpdateSigningCertificateCommand = UpdateSigningCertificateCommand;
exports.UpdateUserCommand = UpdateUserCommand;
exports.UploadSSHPublicKeyCommand = UploadSSHPublicKeyCommand;
exports.UploadServerCertificateCommand = UploadServerCertificateCommand;
exports.UploadServerCertificateRequestFilterSensitiveLog = UploadServerCertificateRequestFilterSensitiveLog;
exports.UploadSigningCertificateCommand = UploadSigningCertificateCommand;
exports.VirtualMFADeviceFilterSensitiveLog = VirtualMFADeviceFilterSensitiveLog;
exports.paginateGetAccountAuthorizationDetails = paginateGetAccountAuthorizationDetails;
exports.paginateGetGroup = paginateGetGroup;
exports.paginateListAccessKeys = paginateListAccessKeys;
exports.paginateListAccountAliases = paginateListAccountAliases;
exports.paginateListAttachedGroupPolicies = paginateListAttachedGroupPolicies;
exports.paginateListAttachedRolePolicies = paginateListAttachedRolePolicies;
exports.paginateListAttachedUserPolicies = paginateListAttachedUserPolicies;
exports.paginateListEntitiesForPolicy = paginateListEntitiesForPolicy;
exports.paginateListGroupPolicies = paginateListGroupPolicies;
exports.paginateListGroups = paginateListGroups;
exports.paginateListGroupsForUser = paginateListGroupsForUser;
exports.paginateListInstanceProfileTags = paginateListInstanceProfileTags;
exports.paginateListInstanceProfiles = paginateListInstanceProfiles;
exports.paginateListInstanceProfilesForRole = paginateListInstanceProfilesForRole;
exports.paginateListMFADeviceTags = paginateListMFADeviceTags;
exports.paginateListMFADevices = paginateListMFADevices;
exports.paginateListOpenIDConnectProviderTags = paginateListOpenIDConnectProviderTags;
exports.paginateListPolicies = paginateListPolicies;
exports.paginateListPolicyTags = paginateListPolicyTags;
exports.paginateListPolicyVersions = paginateListPolicyVersions;
exports.paginateListRolePolicies = paginateListRolePolicies;
exports.paginateListRoleTags = paginateListRoleTags;
exports.paginateListRoles = paginateListRoles;
exports.paginateListSAMLProviderTags = paginateListSAMLProviderTags;
exports.paginateListSSHPublicKeys = paginateListSSHPublicKeys;
exports.paginateListServerCertificateTags = paginateListServerCertificateTags;
exports.paginateListServerCertificates = paginateListServerCertificates;
exports.paginateListSigningCertificates = paginateListSigningCertificates;
exports.paginateListUserPolicies = paginateListUserPolicies;
exports.paginateListUserTags = paginateListUserTags;
exports.paginateListUsers = paginateListUsers;
exports.paginateListVirtualMFADevices = paginateListVirtualMFADevices;
exports.paginateSimulateCustomPolicy = paginateSimulateCustomPolicy;
exports.paginateSimulatePrincipalPolicy = paginateSimulatePrincipalPolicy;
exports.waitForInstanceProfileExists = waitForInstanceProfileExists;
exports.waitForPolicyExists = waitForPolicyExists;
exports.waitForRoleExists = waitForRoleExists;
exports.waitForUserExists = waitForUserExists;
exports.waitUntilInstanceProfileExists = waitUntilInstanceProfileExists;
exports.waitUntilPolicyExists = waitUntilPolicyExists;
exports.waitUntilRoleExists = waitUntilRoleExists;
exports.waitUntilUserExists = waitUntilUserExists;

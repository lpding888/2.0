'use strict';

var middlewareHostHeader = require('@aws-sdk/middleware-host-header');
var middlewareLogger = require('@aws-sdk/middleware-logger');
var middlewareRecursionDetection = require('@aws-sdk/middleware-recursion-detection');
var middlewareSdkApiGateway = require('@aws-sdk/middleware-sdk-api-gateway');
var middlewareUserAgent = require('@aws-sdk/middleware-user-agent');
var configResolver = require('@smithy/config-resolver');
var core = require('@smithy/core');
var middlewareContentLength = require('@smithy/middleware-content-length');
var middlewareEndpoint = require('@smithy/middleware-endpoint');
var middlewareRetry = require('@smithy/middleware-retry');
var smithyClient = require('@smithy/smithy-client');
var httpAuthSchemeProvider = require('./auth/httpAuthSchemeProvider');
var runtimeConfig = require('./runtimeConfig');
var regionConfigResolver = require('@aws-sdk/region-config-resolver');
var protocolHttp = require('@smithy/protocol-http');
var middlewareSerde = require('@smithy/middleware-serde');
var core$1 = require('@aws-sdk/core');

const resolveClientEndpointParameters = (options) => {
    return Object.assign(options, {
        useDualstackEndpoint: options.useDualstackEndpoint ?? false,
        useFipsEndpoint: options.useFipsEndpoint ?? false,
        defaultSigningName: "apigateway",
    });
};
const commonParams = {
    UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
    Endpoint: { type: "builtInParams", name: "endpoint" },
    Region: { type: "builtInParams", name: "region" },
    UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" },
};

const getHttpAuthExtensionConfiguration = (runtimeConfig) => {
    const _httpAuthSchemes = runtimeConfig.httpAuthSchemes;
    let _httpAuthSchemeProvider = runtimeConfig.httpAuthSchemeProvider;
    let _credentials = runtimeConfig.credentials;
    return {
        setHttpAuthScheme(httpAuthScheme) {
            const index = _httpAuthSchemes.findIndex((scheme) => scheme.schemeId === httpAuthScheme.schemeId);
            if (index === -1) {
                _httpAuthSchemes.push(httpAuthScheme);
            }
            else {
                _httpAuthSchemes.splice(index, 1, httpAuthScheme);
            }
        },
        httpAuthSchemes() {
            return _httpAuthSchemes;
        },
        setHttpAuthSchemeProvider(httpAuthSchemeProvider) {
            _httpAuthSchemeProvider = httpAuthSchemeProvider;
        },
        httpAuthSchemeProvider() {
            return _httpAuthSchemeProvider;
        },
        setCredentials(credentials) {
            _credentials = credentials;
        },
        credentials() {
            return _credentials;
        },
    };
};
const resolveHttpAuthRuntimeConfig = (config) => {
    return {
        httpAuthSchemes: config.httpAuthSchemes(),
        httpAuthSchemeProvider: config.httpAuthSchemeProvider(),
        credentials: config.credentials(),
    };
};

const resolveRuntimeExtensions = (runtimeConfig, extensions) => {
    const extensionConfiguration = Object.assign(regionConfigResolver.getAwsRegionExtensionConfiguration(runtimeConfig), smithyClient.getDefaultExtensionConfiguration(runtimeConfig), protocolHttp.getHttpHandlerExtensionConfiguration(runtimeConfig), getHttpAuthExtensionConfiguration(runtimeConfig));
    extensions.forEach((extension) => extension.configure(extensionConfiguration));
    return Object.assign(runtimeConfig, regionConfigResolver.resolveAwsRegionExtensionConfiguration(extensionConfiguration), smithyClient.resolveDefaultRuntimeConfig(extensionConfiguration), protocolHttp.resolveHttpHandlerRuntimeConfig(extensionConfiguration), resolveHttpAuthRuntimeConfig(extensionConfiguration));
};

class APIGatewayClient extends smithyClient.Client {
    config;
    constructor(...[configuration]) {
        const _config_0 = runtimeConfig.getRuntimeConfig(configuration || {});
        super(_config_0);
        this.initConfig = _config_0;
        const _config_1 = resolveClientEndpointParameters(_config_0);
        const _config_2 = middlewareUserAgent.resolveUserAgentConfig(_config_1);
        const _config_3 = middlewareRetry.resolveRetryConfig(_config_2);
        const _config_4 = configResolver.resolveRegionConfig(_config_3);
        const _config_5 = middlewareHostHeader.resolveHostHeaderConfig(_config_4);
        const _config_6 = middlewareEndpoint.resolveEndpointConfig(_config_5);
        const _config_7 = httpAuthSchemeProvider.resolveHttpAuthSchemeConfig(_config_6);
        const _config_8 = resolveRuntimeExtensions(_config_7, configuration?.extensions || []);
        this.config = _config_8;
        this.middlewareStack.use(middlewareUserAgent.getUserAgentPlugin(this.config));
        this.middlewareStack.use(middlewareRetry.getRetryPlugin(this.config));
        this.middlewareStack.use(middlewareContentLength.getContentLengthPlugin(this.config));
        this.middlewareStack.use(middlewareHostHeader.getHostHeaderPlugin(this.config));
        this.middlewareStack.use(middlewareLogger.getLoggerPlugin(this.config));
        this.middlewareStack.use(middlewareRecursionDetection.getRecursionDetectionPlugin(this.config));
        this.middlewareStack.use(middlewareSdkApiGateway.getAcceptHeaderPlugin(this.config));
        this.middlewareStack.use(core.getHttpAuthSchemeEndpointRuleSetPlugin(this.config, {
            httpAuthSchemeParametersProvider: httpAuthSchemeProvider.defaultAPIGatewayHttpAuthSchemeParametersProvider,
            identityProviderConfigProvider: async (config) => new core.DefaultIdentityProviderConfig({
                "aws.auth#sigv4": config.credentials,
            }),
        }));
        this.middlewareStack.use(core.getHttpSigningPlugin(this.config));
    }
    destroy() {
        super.destroy();
    }
}

class APIGatewayServiceException extends smithyClient.ServiceException {
    constructor(options) {
        super(options);
        Object.setPrototypeOf(this, APIGatewayServiceException.prototype);
    }
}

const AccessAssociationSourceType = {
    VPCE: "VPCE",
};
const ApiKeysFormat = {
    csv: "csv",
};
const ApiKeySourceType = {
    AUTHORIZER: "AUTHORIZER",
    HEADER: "HEADER",
};
const AuthorizerType = {
    COGNITO_USER_POOLS: "COGNITO_USER_POOLS",
    REQUEST: "REQUEST",
    TOKEN: "TOKEN",
};
class BadRequestException extends APIGatewayServiceException {
    name = "BadRequestException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "BadRequestException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, BadRequestException.prototype);
    }
}
class ConflictException extends APIGatewayServiceException {
    name = "ConflictException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "ConflictException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, ConflictException.prototype);
    }
}
class LimitExceededException extends APIGatewayServiceException {
    name = "LimitExceededException";
    $fault = "client";
    retryAfterSeconds;
    constructor(opts) {
        super({
            name: "LimitExceededException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, LimitExceededException.prototype);
        this.retryAfterSeconds = opts.retryAfterSeconds;
    }
}
class NotFoundException extends APIGatewayServiceException {
    name = "NotFoundException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "NotFoundException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, NotFoundException.prototype);
    }
}
class TooManyRequestsException extends APIGatewayServiceException {
    name = "TooManyRequestsException";
    $fault = "client";
    retryAfterSeconds;
    constructor(opts) {
        super({
            name: "TooManyRequestsException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, TooManyRequestsException.prototype);
        this.retryAfterSeconds = opts.retryAfterSeconds;
    }
}
class UnauthorizedException extends APIGatewayServiceException {
    name = "UnauthorizedException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "UnauthorizedException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, UnauthorizedException.prototype);
    }
}
const CacheClusterSize = {
    SIZE_0_POINT_5_GB: "0.5",
    SIZE_118_GB: "118",
    SIZE_13_POINT_5_GB: "13.5",
    SIZE_1_POINT_6_GB: "1.6",
    SIZE_237_GB: "237",
    SIZE_28_POINT_4_GB: "28.4",
    SIZE_58_POINT_2_GB: "58.2",
    SIZE_6_POINT_1_GB: "6.1",
};
class ServiceUnavailableException extends APIGatewayServiceException {
    name = "ServiceUnavailableException";
    $fault = "server";
    retryAfterSeconds;
    constructor(opts) {
        super({
            name: "ServiceUnavailableException",
            $fault: "server",
            ...opts,
        });
        Object.setPrototypeOf(this, ServiceUnavailableException.prototype);
        this.retryAfterSeconds = opts.retryAfterSeconds;
    }
}
const DocumentationPartType = {
    API: "API",
    AUTHORIZER: "AUTHORIZER",
    METHOD: "METHOD",
    MODEL: "MODEL",
    PATH_PARAMETER: "PATH_PARAMETER",
    QUERY_PARAMETER: "QUERY_PARAMETER",
    REQUEST_BODY: "REQUEST_BODY",
    REQUEST_HEADER: "REQUEST_HEADER",
    RESOURCE: "RESOURCE",
    RESPONSE: "RESPONSE",
    RESPONSE_BODY: "RESPONSE_BODY",
    RESPONSE_HEADER: "RESPONSE_HEADER",
};
const IpAddressType = {
    dualstack: "dualstack",
    ipv4: "ipv4",
};
const EndpointType = {
    EDGE: "EDGE",
    PRIVATE: "PRIVATE",
    REGIONAL: "REGIONAL",
};
const RoutingMode = {
    BASE_PATH_MAPPING_ONLY: "BASE_PATH_MAPPING_ONLY",
    ROUTING_RULE_ONLY: "ROUTING_RULE_ONLY",
    ROUTING_RULE_THEN_BASE_PATH_MAPPING: "ROUTING_RULE_THEN_BASE_PATH_MAPPING",
};
const SecurityPolicy = {
    TLS_1_0: "TLS_1_0",
    TLS_1_2: "TLS_1_2",
};
const DomainNameStatus = {
    AVAILABLE: "AVAILABLE",
    PENDING: "PENDING",
    PENDING_CERTIFICATE_REIMPORT: "PENDING_CERTIFICATE_REIMPORT",
    PENDING_OWNERSHIP_VERIFICATION: "PENDING_OWNERSHIP_VERIFICATION",
    UPDATING: "UPDATING",
};
const ConnectionType = {
    INTERNET: "INTERNET",
    VPC_LINK: "VPC_LINK",
};
const ContentHandlingStrategy = {
    CONVERT_TO_BINARY: "CONVERT_TO_BINARY",
    CONVERT_TO_TEXT: "CONVERT_TO_TEXT",
};
const IntegrationType = {
    AWS: "AWS",
    AWS_PROXY: "AWS_PROXY",
    HTTP: "HTTP",
    HTTP_PROXY: "HTTP_PROXY",
    MOCK: "MOCK",
};
const CacheClusterStatus = {
    AVAILABLE: "AVAILABLE",
    CREATE_IN_PROGRESS: "CREATE_IN_PROGRESS",
    DELETE_IN_PROGRESS: "DELETE_IN_PROGRESS",
    FLUSH_IN_PROGRESS: "FLUSH_IN_PROGRESS",
    NOT_AVAILABLE: "NOT_AVAILABLE",
};
const UnauthorizedCacheControlHeaderStrategy = {
    FAIL_WITH_403: "FAIL_WITH_403",
    SUCCEED_WITHOUT_RESPONSE_HEADER: "SUCCEED_WITHOUT_RESPONSE_HEADER",
    SUCCEED_WITH_RESPONSE_HEADER: "SUCCEED_WITH_RESPONSE_HEADER",
};
const QuotaPeriodType = {
    DAY: "DAY",
    MONTH: "MONTH",
    WEEK: "WEEK",
};
const VpcLinkStatus = {
    AVAILABLE: "AVAILABLE",
    DELETING: "DELETING",
    FAILED: "FAILED",
    PENDING: "PENDING",
};
const GatewayResponseType = {
    ACCESS_DENIED: "ACCESS_DENIED",
    API_CONFIGURATION_ERROR: "API_CONFIGURATION_ERROR",
    AUTHORIZER_CONFIGURATION_ERROR: "AUTHORIZER_CONFIGURATION_ERROR",
    AUTHORIZER_FAILURE: "AUTHORIZER_FAILURE",
    BAD_REQUEST_BODY: "BAD_REQUEST_BODY",
    BAD_REQUEST_PARAMETERS: "BAD_REQUEST_PARAMETERS",
    DEFAULT_4XX: "DEFAULT_4XX",
    DEFAULT_5XX: "DEFAULT_5XX",
    EXPIRED_TOKEN: "EXPIRED_TOKEN",
    INTEGRATION_FAILURE: "INTEGRATION_FAILURE",
    INTEGRATION_TIMEOUT: "INTEGRATION_TIMEOUT",
    INVALID_API_KEY: "INVALID_API_KEY",
    INVALID_SIGNATURE: "INVALID_SIGNATURE",
    MISSING_AUTHENTICATION_TOKEN: "MISSING_AUTHENTICATION_TOKEN",
    QUOTA_EXCEEDED: "QUOTA_EXCEEDED",
    REQUEST_TOO_LARGE: "REQUEST_TOO_LARGE",
    RESOURCE_NOT_FOUND: "RESOURCE_NOT_FOUND",
    THROTTLED: "THROTTLED",
    UNAUTHORIZED: "UNAUTHORIZED",
    UNSUPPORTED_MEDIA_TYPE: "UNSUPPORTED_MEDIA_TYPE",
    WAF_FILTERED: "WAF_FILTERED",
};
const LocationStatusType = {
    DOCUMENTED: "DOCUMENTED",
    UNDOCUMENTED: "UNDOCUMENTED",
};
const ResourceOwner = {
    OTHER_ACCOUNTS: "OTHER_ACCOUNTS",
    SELF: "SELF",
};
const PutMode = {
    Merge: "merge",
    Overwrite: "overwrite",
};
const Op = {
    add: "add",
    copy: "copy",
    move: "move",
    remove: "remove",
    replace: "replace",
    test: "test",
};

const se_CreateApiKeyCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/apikeys");
    let body;
    body = JSON.stringify(smithyClient.take(input, {
        customerId: [],
        description: [],
        enabled: [],
        generateDistinctId: [],
        name: [],
        stageKeys: (_) => smithyClient._json(_),
        tags: (_) => smithyClient._json(_),
        value: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
const se_CreateAuthorizerCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/restapis/{restApiId}/authorizers");
    b.p("restApiId", () => input.restApiId, "{restApiId}", false);
    let body;
    body = JSON.stringify(smithyClient.take(input, {
        authType: [],
        authorizerCredentials: [],
        authorizerResultTtlInSeconds: [],
        authorizerUri: [],
        identitySource: [],
        identityValidationExpression: [],
        name: [],
        providerARNs: (_) => smithyClient._json(_),
        type: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
const se_CreateBasePathMappingCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/domainnames/{domainName}/basepathmappings");
    b.p("domainName", () => input.domainName, "{domainName}", false);
    const query = smithyClient.map({
        [_dNI]: [, input[_dNI]],
    });
    let body;
    body = JSON.stringify(smithyClient.take(input, {
        basePath: [],
        restApiId: [],
        stage: [],
    }));
    b.m("POST").h(headers).q(query).b(body);
    return b.build();
};
const se_CreateDeploymentCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/restapis/{restApiId}/deployments");
    b.p("restApiId", () => input.restApiId, "{restApiId}", false);
    let body;
    body = JSON.stringify(smithyClient.take(input, {
        cacheClusterEnabled: [],
        cacheClusterSize: [],
        canarySettings: (_) => se_DeploymentCanarySettings(_),
        description: [],
        stageDescription: [],
        stageName: [],
        tracingEnabled: [],
        variables: (_) => smithyClient._json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
const se_CreateDocumentationPartCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/restapis/{restApiId}/documentation/parts");
    b.p("restApiId", () => input.restApiId, "{restApiId}", false);
    let body;
    body = JSON.stringify(smithyClient.take(input, {
        location: (_) => smithyClient._json(_),
        properties: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
const se_CreateDocumentationVersionCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/restapis/{restApiId}/documentation/versions");
    b.p("restApiId", () => input.restApiId, "{restApiId}", false);
    let body;
    body = JSON.stringify(smithyClient.take(input, {
        description: [],
        documentationVersion: [],
        stageName: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
const se_CreateDomainNameCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/domainnames");
    let body;
    body = JSON.stringify(smithyClient.take(input, {
        certificateArn: [],
        certificateBody: [],
        certificateChain: [],
        certificateName: [],
        certificatePrivateKey: [],
        domainName: [],
        endpointConfiguration: (_) => smithyClient._json(_),
        mutualTlsAuthentication: (_) => smithyClient._json(_),
        ownershipVerificationCertificateArn: [],
        policy: [],
        regionalCertificateArn: [],
        regionalCertificateName: [],
        routingMode: [],
        securityPolicy: [],
        tags: (_) => smithyClient._json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
const se_CreateDomainNameAccessAssociationCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/domainnameaccessassociations");
    let body;
    body = JSON.stringify(smithyClient.take(input, {
        accessAssociationSource: [],
        accessAssociationSourceType: [],
        domainNameArn: [],
        tags: (_) => smithyClient._json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
const se_CreateModelCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/restapis/{restApiId}/models");
    b.p("restApiId", () => input.restApiId, "{restApiId}", false);
    let body;
    body = JSON.stringify(smithyClient.take(input, {
        contentType: [],
        description: [],
        name: [],
        schema: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
const se_CreateRequestValidatorCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/restapis/{restApiId}/requestvalidators");
    b.p("restApiId", () => input.restApiId, "{restApiId}", false);
    let body;
    body = JSON.stringify(smithyClient.take(input, {
        name: [],
        validateRequestBody: [],
        validateRequestParameters: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
const se_CreateResourceCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/restapis/{restApiId}/resources/{parentId}");
    b.p("restApiId", () => input.restApiId, "{restApiId}", false);
    b.p("parentId", () => input.parentId, "{parentId}", false);
    let body;
    body = JSON.stringify(smithyClient.take(input, {
        pathPart: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
const se_CreateRestApiCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/restapis");
    let body;
    body = JSON.stringify(smithyClient.take(input, {
        apiKeySource: [],
        binaryMediaTypes: (_) => smithyClient._json(_),
        cloneFrom: [],
        description: [],
        disableExecuteApiEndpoint: [],
        endpointConfiguration: (_) => smithyClient._json(_),
        minimumCompressionSize: [],
        name: [],
        policy: [],
        tags: (_) => smithyClient._json(_),
        version: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
const se_CreateStageCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/restapis/{restApiId}/stages");
    b.p("restApiId", () => input.restApiId, "{restApiId}", false);
    let body;
    body = JSON.stringify(smithyClient.take(input, {
        cacheClusterEnabled: [],
        cacheClusterSize: [],
        canarySettings: (_) => se_CanarySettings(_),
        deploymentId: [],
        description: [],
        documentationVersion: [],
        stageName: [],
        tags: (_) => smithyClient._json(_),
        tracingEnabled: [],
        variables: (_) => smithyClient._json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
const se_CreateUsagePlanCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/usageplans");
    let body;
    body = JSON.stringify(smithyClient.take(input, {
        apiStages: (_) => se_ListOfApiStage(_),
        description: [],
        name: [],
        quota: (_) => smithyClient._json(_),
        tags: (_) => smithyClient._json(_),
        throttle: (_) => se_ThrottleSettings(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
const se_CreateUsagePlanKeyCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/usageplans/{usagePlanId}/keys");
    b.p("usagePlanId", () => input.usagePlanId, "{usagePlanId}", false);
    let body;
    body = JSON.stringify(smithyClient.take(input, {
        keyId: [],
        keyType: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
const se_CreateVpcLinkCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/vpclinks");
    let body;
    body = JSON.stringify(smithyClient.take(input, {
        description: [],
        name: [],
        tags: (_) => smithyClient._json(_),
        targetArns: (_) => smithyClient._json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
const se_DeleteApiKeyCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {};
    b.bp("/apikeys/{apiKey}");
    b.p("apiKey", () => input.apiKey, "{apiKey}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
const se_DeleteAuthorizerCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {};
    b.bp("/restapis/{restApiId}/authorizers/{authorizerId}");
    b.p("restApiId", () => input.restApiId, "{restApiId}", false);
    b.p("authorizerId", () => input.authorizerId, "{authorizerId}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
const se_DeleteBasePathMappingCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {};
    b.bp("/domainnames/{domainName}/basepathmappings/{basePath}");
    b.p("domainName", () => input.domainName, "{domainName}", false);
    b.p("basePath", () => input.basePath, "{basePath}", false);
    const query = smithyClient.map({
        [_dNI]: [, input[_dNI]],
    });
    let body;
    b.m("DELETE").h(headers).q(query).b(body);
    return b.build();
};
const se_DeleteClientCertificateCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {};
    b.bp("/clientcertificates/{clientCertificateId}");
    b.p("clientCertificateId", () => input.clientCertificateId, "{clientCertificateId}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
const se_DeleteDeploymentCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {};
    b.bp("/restapis/{restApiId}/deployments/{deploymentId}");
    b.p("restApiId", () => input.restApiId, "{restApiId}", false);
    b.p("deploymentId", () => input.deploymentId, "{deploymentId}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
const se_DeleteDocumentationPartCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {};
    b.bp("/restapis/{restApiId}/documentation/parts/{documentationPartId}");
    b.p("restApiId", () => input.restApiId, "{restApiId}", false);
    b.p("documentationPartId", () => input.documentationPartId, "{documentationPartId}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
const se_DeleteDocumentationVersionCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {};
    b.bp("/restapis/{restApiId}/documentation/versions/{documentationVersion}");
    b.p("restApiId", () => input.restApiId, "{restApiId}", false);
    b.p("documentationVersion", () => input.documentationVersion, "{documentationVersion}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
const se_DeleteDomainNameCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {};
    b.bp("/domainnames/{domainName}");
    b.p("domainName", () => input.domainName, "{domainName}", false);
    const query = smithyClient.map({
        [_dNI]: [, input[_dNI]],
    });
    let body;
    b.m("DELETE").h(headers).q(query).b(body);
    return b.build();
};
const se_DeleteDomainNameAccessAssociationCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {};
    b.bp("/domainnameaccessassociations/{domainNameAccessAssociationArn}");
    b.p("domainNameAccessAssociationArn", () => input.domainNameAccessAssociationArn, "{domainNameAccessAssociationArn}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
const se_DeleteGatewayResponseCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {};
    b.bp("/restapis/{restApiId}/gatewayresponses/{responseType}");
    b.p("restApiId", () => input.restApiId, "{restApiId}", false);
    b.p("responseType", () => input.responseType, "{responseType}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
const se_DeleteIntegrationCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {};
    b.bp("/restapis/{restApiId}/resources/{resourceId}/methods/{httpMethod}/integration");
    b.p("restApiId", () => input.restApiId, "{restApiId}", false);
    b.p("resourceId", () => input.resourceId, "{resourceId}", false);
    b.p("httpMethod", () => input.httpMethod, "{httpMethod}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
const se_DeleteIntegrationResponseCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {};
    b.bp("/restapis/{restApiId}/resources/{resourceId}/methods/{httpMethod}/integration/responses/{statusCode}");
    b.p("restApiId", () => input.restApiId, "{restApiId}", false);
    b.p("resourceId", () => input.resourceId, "{resourceId}", false);
    b.p("httpMethod", () => input.httpMethod, "{httpMethod}", false);
    b.p("statusCode", () => input.statusCode, "{statusCode}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
const se_DeleteMethodCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {};
    b.bp("/restapis/{restApiId}/resources/{resourceId}/methods/{httpMethod}");
    b.p("restApiId", () => input.restApiId, "{restApiId}", false);
    b.p("resourceId", () => input.resourceId, "{resourceId}", false);
    b.p("httpMethod", () => input.httpMethod, "{httpMethod}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
const se_DeleteMethodResponseCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {};
    b.bp("/restapis/{restApiId}/resources/{resourceId}/methods/{httpMethod}/responses/{statusCode}");
    b.p("restApiId", () => input.restApiId, "{restApiId}", false);
    b.p("resourceId", () => input.resourceId, "{resourceId}", false);
    b.p("httpMethod", () => input.httpMethod, "{httpMethod}", false);
    b.p("statusCode", () => input.statusCode, "{statusCode}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
const se_DeleteModelCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {};
    b.bp("/restapis/{restApiId}/models/{modelName}");
    b.p("restApiId", () => input.restApiId, "{restApiId}", false);
    b.p("modelName", () => input.modelName, "{modelName}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
const se_DeleteRequestValidatorCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {};
    b.bp("/restapis/{restApiId}/requestvalidators/{requestValidatorId}");
    b.p("restApiId", () => input.restApiId, "{restApiId}", false);
    b.p("requestValidatorId", () => input.requestValidatorId, "{requestValidatorId}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
const se_DeleteResourceCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {};
    b.bp("/restapis/{restApiId}/resources/{resourceId}");
    b.p("restApiId", () => input.restApiId, "{restApiId}", false);
    b.p("resourceId", () => input.resourceId, "{resourceId}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
const se_DeleteRestApiCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {};
    b.bp("/restapis/{restApiId}");
    b.p("restApiId", () => input.restApiId, "{restApiId}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
const se_DeleteStageCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {};
    b.bp("/restapis/{restApiId}/stages/{stageName}");
    b.p("restApiId", () => input.restApiId, "{restApiId}", false);
    b.p("stageName", () => input.stageName, "{stageName}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
const se_DeleteUsagePlanCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {};
    b.bp("/usageplans/{usagePlanId}");
    b.p("usagePlanId", () => input.usagePlanId, "{usagePlanId}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
const se_DeleteUsagePlanKeyCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {};
    b.bp("/usageplans/{usagePlanId}/keys/{keyId}");
    b.p("usagePlanId", () => input.usagePlanId, "{usagePlanId}", false);
    b.p("keyId", () => input.keyId, "{keyId}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
const se_DeleteVpcLinkCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {};
    b.bp("/vpclinks/{vpcLinkId}");
    b.p("vpcLinkId", () => input.vpcLinkId, "{vpcLinkId}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
const se_FlushStageAuthorizersCacheCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {};
    b.bp("/restapis/{restApiId}/stages/{stageName}/cache/authorizers");
    b.p("restApiId", () => input.restApiId, "{restApiId}", false);
    b.p("stageName", () => input.stageName, "{stageName}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
const se_FlushStageCacheCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {};
    b.bp("/restapis/{restApiId}/stages/{stageName}/cache/data");
    b.p("restApiId", () => input.restApiId, "{restApiId}", false);
    b.p("stageName", () => input.stageName, "{stageName}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
const se_GenerateClientCertificateCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/clientcertificates");
    let body;
    body = JSON.stringify(smithyClient.take(input, {
        description: [],
        tags: (_) => smithyClient._json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
const se_GetAccountCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {};
    b.bp("/account");
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
const se_GetApiKeyCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {};
    b.bp("/apikeys/{apiKey}");
    b.p("apiKey", () => input.apiKey, "{apiKey}", false);
    const query = smithyClient.map({
        [_iV]: [() => input.includeValue !== void 0, () => input[_iV].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
const se_GetApiKeysCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {};
    b.bp("/apikeys");
    const query = smithyClient.map({
        [_p]: [, input[_p]],
        [_l]: [() => input.limit !== void 0, () => input[_l].toString()],
        [_n]: [, input[_nQ]],
        [_cI]: [, input[_cI]],
        [_iVn]: [() => input.includeValues !== void 0, () => input[_iVn].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
const se_GetAuthorizerCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {};
    b.bp("/restapis/{restApiId}/authorizers/{authorizerId}");
    b.p("restApiId", () => input.restApiId, "{restApiId}", false);
    b.p("authorizerId", () => input.authorizerId, "{authorizerId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
const se_GetAuthorizersCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {};
    b.bp("/restapis/{restApiId}/authorizers");
    b.p("restApiId", () => input.restApiId, "{restApiId}", false);
    const query = smithyClient.map({
        [_p]: [, input[_p]],
        [_l]: [() => input.limit !== void 0, () => input[_l].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
const se_GetBasePathMappingCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {};
    b.bp("/domainnames/{domainName}/basepathmappings/{basePath}");
    b.p("domainName", () => input.domainName, "{domainName}", false);
    b.p("basePath", () => input.basePath, "{basePath}", false);
    const query = smithyClient.map({
        [_dNI]: [, input[_dNI]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
const se_GetBasePathMappingsCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {};
    b.bp("/domainnames/{domainName}/basepathmappings");
    b.p("domainName", () => input.domainName, "{domainName}", false);
    const query = smithyClient.map({
        [_dNI]: [, input[_dNI]],
        [_p]: [, input[_p]],
        [_l]: [() => input.limit !== void 0, () => input[_l].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
const se_GetClientCertificateCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {};
    b.bp("/clientcertificates/{clientCertificateId}");
    b.p("clientCertificateId", () => input.clientCertificateId, "{clientCertificateId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
const se_GetClientCertificatesCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {};
    b.bp("/clientcertificates");
    const query = smithyClient.map({
        [_p]: [, input[_p]],
        [_l]: [() => input.limit !== void 0, () => input[_l].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
const se_GetDeploymentCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {};
    b.bp("/restapis/{restApiId}/deployments/{deploymentId}");
    b.p("restApiId", () => input.restApiId, "{restApiId}", false);
    b.p("deploymentId", () => input.deploymentId, "{deploymentId}", false);
    const query = smithyClient.map({
        [_e]: [() => input.embed !== void 0, () => input[_e] || []],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
const se_GetDeploymentsCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {};
    b.bp("/restapis/{restApiId}/deployments");
    b.p("restApiId", () => input.restApiId, "{restApiId}", false);
    const query = smithyClient.map({
        [_p]: [, input[_p]],
        [_l]: [() => input.limit !== void 0, () => input[_l].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
const se_GetDocumentationPartCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {};
    b.bp("/restapis/{restApiId}/documentation/parts/{documentationPartId}");
    b.p("restApiId", () => input.restApiId, "{restApiId}", false);
    b.p("documentationPartId", () => input.documentationPartId, "{documentationPartId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
const se_GetDocumentationPartsCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {};
    b.bp("/restapis/{restApiId}/documentation/parts");
    b.p("restApiId", () => input.restApiId, "{restApiId}", false);
    const query = smithyClient.map({
        [_t]: [, input[_t]],
        [_n]: [, input[_nQ]],
        [_pa]: [, input[_pa]],
        [_p]: [, input[_p]],
        [_l]: [() => input.limit !== void 0, () => input[_l].toString()],
        [_lS]: [, input[_lS]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
const se_GetDocumentationVersionCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {};
    b.bp("/restapis/{restApiId}/documentation/versions/{documentationVersion}");
    b.p("restApiId", () => input.restApiId, "{restApiId}", false);
    b.p("documentationVersion", () => input.documentationVersion, "{documentationVersion}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
const se_GetDocumentationVersionsCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {};
    b.bp("/restapis/{restApiId}/documentation/versions");
    b.p("restApiId", () => input.restApiId, "{restApiId}", false);
    const query = smithyClient.map({
        [_p]: [, input[_p]],
        [_l]: [() => input.limit !== void 0, () => input[_l].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
const se_GetDomainNameCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {};
    b.bp("/domainnames/{domainName}");
    b.p("domainName", () => input.domainName, "{domainName}", false);
    const query = smithyClient.map({
        [_dNI]: [, input[_dNI]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
const se_GetDomainNameAccessAssociationsCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {};
    b.bp("/domainnameaccessassociations");
    const query = smithyClient.map({
        [_p]: [, input[_p]],
        [_l]: [() => input.limit !== void 0, () => input[_l].toString()],
        [_rO]: [, input[_rO]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
const se_GetDomainNamesCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {};
    b.bp("/domainnames");
    const query = smithyClient.map({
        [_p]: [, input[_p]],
        [_l]: [() => input.limit !== void 0, () => input[_l].toString()],
        [_rO]: [, input[_rO]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
const se_GetExportCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = smithyClient.map({}, smithyClient.isSerializableHeaderValue, {
        [_ac]: input[_a],
    });
    b.bp("/restapis/{restApiId}/stages/{stageName}/exports/{exportType}");
    b.p("restApiId", () => input.restApiId, "{restApiId}", false);
    b.p("stageName", () => input.stageName, "{stageName}", false);
    b.p("exportType", () => input.exportType, "{exportType}", false);
    const query = smithyClient.map({
        ...smithyClient.convertMap(input.parameters),
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
const se_GetGatewayResponseCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {};
    b.bp("/restapis/{restApiId}/gatewayresponses/{responseType}");
    b.p("restApiId", () => input.restApiId, "{restApiId}", false);
    b.p("responseType", () => input.responseType, "{responseType}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
const se_GetGatewayResponsesCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {};
    b.bp("/restapis/{restApiId}/gatewayresponses");
    b.p("restApiId", () => input.restApiId, "{restApiId}", false);
    const query = smithyClient.map({
        [_p]: [, input[_p]],
        [_l]: [() => input.limit !== void 0, () => input[_l].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
const se_GetIntegrationCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {};
    b.bp("/restapis/{restApiId}/resources/{resourceId}/methods/{httpMethod}/integration");
    b.p("restApiId", () => input.restApiId, "{restApiId}", false);
    b.p("resourceId", () => input.resourceId, "{resourceId}", false);
    b.p("httpMethod", () => input.httpMethod, "{httpMethod}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
const se_GetIntegrationResponseCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {};
    b.bp("/restapis/{restApiId}/resources/{resourceId}/methods/{httpMethod}/integration/responses/{statusCode}");
    b.p("restApiId", () => input.restApiId, "{restApiId}", false);
    b.p("resourceId", () => input.resourceId, "{resourceId}", false);
    b.p("httpMethod", () => input.httpMethod, "{httpMethod}", false);
    b.p("statusCode", () => input.statusCode, "{statusCode}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
const se_GetMethodCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {};
    b.bp("/restapis/{restApiId}/resources/{resourceId}/methods/{httpMethod}");
    b.p("restApiId", () => input.restApiId, "{restApiId}", false);
    b.p("resourceId", () => input.resourceId, "{resourceId}", false);
    b.p("httpMethod", () => input.httpMethod, "{httpMethod}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
const se_GetMethodResponseCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {};
    b.bp("/restapis/{restApiId}/resources/{resourceId}/methods/{httpMethod}/responses/{statusCode}");
    b.p("restApiId", () => input.restApiId, "{restApiId}", false);
    b.p("resourceId", () => input.resourceId, "{resourceId}", false);
    b.p("httpMethod", () => input.httpMethod, "{httpMethod}", false);
    b.p("statusCode", () => input.statusCode, "{statusCode}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
const se_GetModelCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {};
    b.bp("/restapis/{restApiId}/models/{modelName}");
    b.p("restApiId", () => input.restApiId, "{restApiId}", false);
    b.p("modelName", () => input.modelName, "{modelName}", false);
    const query = smithyClient.map({
        [_f]: [() => input.flatten !== void 0, () => input[_f].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
const se_GetModelsCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {};
    b.bp("/restapis/{restApiId}/models");
    b.p("restApiId", () => input.restApiId, "{restApiId}", false);
    const query = smithyClient.map({
        [_p]: [, input[_p]],
        [_l]: [() => input.limit !== void 0, () => input[_l].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
const se_GetModelTemplateCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {};
    b.bp("/restapis/{restApiId}/models/{modelName}/default_template");
    b.p("restApiId", () => input.restApiId, "{restApiId}", false);
    b.p("modelName", () => input.modelName, "{modelName}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
const se_GetRequestValidatorCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {};
    b.bp("/restapis/{restApiId}/requestvalidators/{requestValidatorId}");
    b.p("restApiId", () => input.restApiId, "{restApiId}", false);
    b.p("requestValidatorId", () => input.requestValidatorId, "{requestValidatorId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
const se_GetRequestValidatorsCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {};
    b.bp("/restapis/{restApiId}/requestvalidators");
    b.p("restApiId", () => input.restApiId, "{restApiId}", false);
    const query = smithyClient.map({
        [_p]: [, input[_p]],
        [_l]: [() => input.limit !== void 0, () => input[_l].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
const se_GetResourceCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {};
    b.bp("/restapis/{restApiId}/resources/{resourceId}");
    b.p("restApiId", () => input.restApiId, "{restApiId}", false);
    b.p("resourceId", () => input.resourceId, "{resourceId}", false);
    const query = smithyClient.map({
        [_e]: [() => input.embed !== void 0, () => input[_e] || []],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
const se_GetResourcesCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {};
    b.bp("/restapis/{restApiId}/resources");
    b.p("restApiId", () => input.restApiId, "{restApiId}", false);
    const query = smithyClient.map({
        [_p]: [, input[_p]],
        [_l]: [() => input.limit !== void 0, () => input[_l].toString()],
        [_e]: [() => input.embed !== void 0, () => input[_e] || []],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
const se_GetRestApiCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {};
    b.bp("/restapis/{restApiId}");
    b.p("restApiId", () => input.restApiId, "{restApiId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
const se_GetRestApisCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {};
    b.bp("/restapis");
    const query = smithyClient.map({
        [_p]: [, input[_p]],
        [_l]: [() => input.limit !== void 0, () => input[_l].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
const se_GetSdkCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {};
    b.bp("/restapis/{restApiId}/stages/{stageName}/sdks/{sdkType}");
    b.p("restApiId", () => input.restApiId, "{restApiId}", false);
    b.p("stageName", () => input.stageName, "{stageName}", false);
    b.p("sdkType", () => input.sdkType, "{sdkType}", false);
    const query = smithyClient.map({
        ...smithyClient.convertMap(input.parameters),
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
const se_GetSdkTypeCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {};
    b.bp("/sdktypes/{id}");
    b.p("id", () => input.id, "{id}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
const se_GetSdkTypesCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {};
    b.bp("/sdktypes");
    const query = smithyClient.map({
        [_p]: [, input[_p]],
        [_l]: [() => input.limit !== void 0, () => input[_l].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
const se_GetStageCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {};
    b.bp("/restapis/{restApiId}/stages/{stageName}");
    b.p("restApiId", () => input.restApiId, "{restApiId}", false);
    b.p("stageName", () => input.stageName, "{stageName}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
const se_GetStagesCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {};
    b.bp("/restapis/{restApiId}/stages");
    b.p("restApiId", () => input.restApiId, "{restApiId}", false);
    const query = smithyClient.map({
        [_dI]: [, input[_dI]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
const se_GetTagsCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {};
    b.bp("/tags/{resourceArn}");
    b.p("resourceArn", () => input.resourceArn, "{resourceArn}", false);
    const query = smithyClient.map({
        [_p]: [, input[_p]],
        [_l]: [() => input.limit !== void 0, () => input[_l].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
const se_GetUsageCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {};
    b.bp("/usageplans/{usagePlanId}/usage");
    b.p("usagePlanId", () => input.usagePlanId, "{usagePlanId}", false);
    const query = smithyClient.map({
        [_kI]: [, input[_kI]],
        [_sD]: [, smithyClient.expectNonNull(input[_sD], `startDate`)],
        [_eD]: [, smithyClient.expectNonNull(input[_eD], `endDate`)],
        [_p]: [, input[_p]],
        [_l]: [() => input.limit !== void 0, () => input[_l].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
const se_GetUsagePlanCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {};
    b.bp("/usageplans/{usagePlanId}");
    b.p("usagePlanId", () => input.usagePlanId, "{usagePlanId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
const se_GetUsagePlanKeyCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {};
    b.bp("/usageplans/{usagePlanId}/keys/{keyId}");
    b.p("usagePlanId", () => input.usagePlanId, "{usagePlanId}", false);
    b.p("keyId", () => input.keyId, "{keyId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
const se_GetUsagePlanKeysCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {};
    b.bp("/usageplans/{usagePlanId}/keys");
    b.p("usagePlanId", () => input.usagePlanId, "{usagePlanId}", false);
    const query = smithyClient.map({
        [_p]: [, input[_p]],
        [_l]: [() => input.limit !== void 0, () => input[_l].toString()],
        [_n]: [, input[_nQ]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
const se_GetUsagePlansCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {};
    b.bp("/usageplans");
    const query = smithyClient.map({
        [_p]: [, input[_p]],
        [_kI]: [, input[_kI]],
        [_l]: [() => input.limit !== void 0, () => input[_l].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
const se_GetVpcLinkCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {};
    b.bp("/vpclinks/{vpcLinkId}");
    b.p("vpcLinkId", () => input.vpcLinkId, "{vpcLinkId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
const se_GetVpcLinksCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {};
    b.bp("/vpclinks");
    const query = smithyClient.map({
        [_p]: [, input[_p]],
        [_l]: [() => input.limit !== void 0, () => input[_l].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
const se_ImportApiKeysCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {
        "content-type": "application/octet-stream",
    };
    b.bp("/apikeys");
    const query = smithyClient.map({
        [_m]: [, "import"],
        [_fo]: [, smithyClient.expectNonNull(input[_fo], `format`)],
        [_fa]: [() => input.failOnWarnings !== void 0, () => input[_fOW].toString()],
    });
    let body;
    if (input.body !== undefined) {
        body = input.body;
    }
    b.m("POST").h(headers).q(query).b(body);
    return b.build();
};
const se_ImportDocumentationPartsCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {
        "content-type": "application/octet-stream",
    };
    b.bp("/restapis/{restApiId}/documentation/parts");
    b.p("restApiId", () => input.restApiId, "{restApiId}", false);
    const query = smithyClient.map({
        [_m]: [, input[_m]],
        [_fa]: [() => input.failOnWarnings !== void 0, () => input[_fOW].toString()],
    });
    let body;
    if (input.body !== undefined) {
        body = input.body;
    }
    b.m("PUT").h(headers).q(query).b(body);
    return b.build();
};
const se_ImportRestApiCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {
        "content-type": "application/octet-stream",
    };
    b.bp("/restapis");
    const query = smithyClient.map({
        [_m]: [, "import"],
        ...smithyClient.convertMap(input.parameters),
        [_fa]: [() => input.failOnWarnings !== void 0, () => input[_fOW].toString()],
    });
    let body;
    if (input.body !== undefined) {
        body = input.body;
    }
    b.m("POST").h(headers).q(query).b(body);
    return b.build();
};
const se_PutGatewayResponseCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/restapis/{restApiId}/gatewayresponses/{responseType}");
    b.p("restApiId", () => input.restApiId, "{restApiId}", false);
    b.p("responseType", () => input.responseType, "{responseType}", false);
    let body;
    body = JSON.stringify(smithyClient.take(input, {
        responseParameters: (_) => smithyClient._json(_),
        responseTemplates: (_) => smithyClient._json(_),
        statusCode: [],
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
const se_PutIntegrationCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/restapis/{restApiId}/resources/{resourceId}/methods/{httpMethod}/integration");
    b.p("restApiId", () => input.restApiId, "{restApiId}", false);
    b.p("resourceId", () => input.resourceId, "{resourceId}", false);
    b.p("httpMethod", () => input.httpMethod, "{httpMethod}", false);
    let body;
    body = JSON.stringify(smithyClient.take(input, {
        cacheKeyParameters: (_) => smithyClient._json(_),
        cacheNamespace: [],
        connectionId: [],
        connectionType: [],
        contentHandling: [],
        credentials: [],
        httpMethod: [, , `integrationHttpMethod`],
        passthroughBehavior: [],
        requestParameters: (_) => smithyClient._json(_),
        requestTemplates: (_) => smithyClient._json(_),
        timeoutInMillis: [],
        tlsConfig: (_) => smithyClient._json(_),
        type: [],
        uri: [],
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
const se_PutIntegrationResponseCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/restapis/{restApiId}/resources/{resourceId}/methods/{httpMethod}/integration/responses/{statusCode}");
    b.p("restApiId", () => input.restApiId, "{restApiId}", false);
    b.p("resourceId", () => input.resourceId, "{resourceId}", false);
    b.p("httpMethod", () => input.httpMethod, "{httpMethod}", false);
    b.p("statusCode", () => input.statusCode, "{statusCode}", false);
    let body;
    body = JSON.stringify(smithyClient.take(input, {
        contentHandling: [],
        responseParameters: (_) => smithyClient._json(_),
        responseTemplates: (_) => smithyClient._json(_),
        selectionPattern: [],
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
const se_PutMethodCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/restapis/{restApiId}/resources/{resourceId}/methods/{httpMethod}");
    b.p("restApiId", () => input.restApiId, "{restApiId}", false);
    b.p("resourceId", () => input.resourceId, "{resourceId}", false);
    b.p("httpMethod", () => input.httpMethod, "{httpMethod}", false);
    let body;
    body = JSON.stringify(smithyClient.take(input, {
        apiKeyRequired: [],
        authorizationScopes: (_) => smithyClient._json(_),
        authorizationType: [],
        authorizerId: [],
        operationName: [],
        requestModels: (_) => smithyClient._json(_),
        requestParameters: (_) => smithyClient._json(_),
        requestValidatorId: [],
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
const se_PutMethodResponseCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/restapis/{restApiId}/resources/{resourceId}/methods/{httpMethod}/responses/{statusCode}");
    b.p("restApiId", () => input.restApiId, "{restApiId}", false);
    b.p("resourceId", () => input.resourceId, "{resourceId}", false);
    b.p("httpMethod", () => input.httpMethod, "{httpMethod}", false);
    b.p("statusCode", () => input.statusCode, "{statusCode}", false);
    let body;
    body = JSON.stringify(smithyClient.take(input, {
        responseModels: (_) => smithyClient._json(_),
        responseParameters: (_) => smithyClient._json(_),
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
const se_PutRestApiCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {
        "content-type": "application/octet-stream",
    };
    b.bp("/restapis/{restApiId}");
    b.p("restApiId", () => input.restApiId, "{restApiId}", false);
    const query = smithyClient.map({
        ...smithyClient.convertMap(input.parameters),
        [_m]: [, input[_m]],
        [_fa]: [() => input.failOnWarnings !== void 0, () => input[_fOW].toString()],
    });
    let body;
    if (input.body !== undefined) {
        body = input.body;
    }
    b.m("PUT").h(headers).q(query).b(body);
    return b.build();
};
const se_RejectDomainNameAccessAssociationCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {};
    b.bp("/rejectdomainnameaccessassociations");
    const query = smithyClient.map({
        [_dNAAA]: [, smithyClient.expectNonNull(input[_dNAAA], `domainNameAccessAssociationArn`)],
        [_dNA]: [, smithyClient.expectNonNull(input[_dNA], `domainNameArn`)],
    });
    let body;
    b.m("POST").h(headers).q(query).b(body);
    return b.build();
};
const se_TagResourceCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/tags/{resourceArn}");
    b.p("resourceArn", () => input.resourceArn, "{resourceArn}", false);
    let body;
    body = JSON.stringify(smithyClient.take(input, {
        tags: (_) => smithyClient._json(_),
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
const se_TestInvokeAuthorizerCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/restapis/{restApiId}/authorizers/{authorizerId}");
    b.p("restApiId", () => input.restApiId, "{restApiId}", false);
    b.p("authorizerId", () => input.authorizerId, "{authorizerId}", false);
    let body;
    body = JSON.stringify(smithyClient.take(input, {
        additionalContext: (_) => smithyClient._json(_),
        body: [],
        headers: (_) => smithyClient._json(_),
        multiValueHeaders: (_) => smithyClient._json(_),
        pathWithQueryString: [],
        stageVariables: (_) => smithyClient._json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
const se_TestInvokeMethodCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/restapis/{restApiId}/resources/{resourceId}/methods/{httpMethod}");
    b.p("restApiId", () => input.restApiId, "{restApiId}", false);
    b.p("resourceId", () => input.resourceId, "{resourceId}", false);
    b.p("httpMethod", () => input.httpMethod, "{httpMethod}", false);
    let body;
    body = JSON.stringify(smithyClient.take(input, {
        body: [],
        clientCertificateId: [],
        headers: (_) => smithyClient._json(_),
        multiValueHeaders: (_) => smithyClient._json(_),
        pathWithQueryString: [],
        stageVariables: (_) => smithyClient._json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
const se_UntagResourceCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {};
    b.bp("/tags/{resourceArn}");
    b.p("resourceArn", () => input.resourceArn, "{resourceArn}", false);
    const query = smithyClient.map({
        [_tK]: [smithyClient.expectNonNull(input.tagKeys, `tagKeys`) != null, () => input[_tK] || []],
    });
    let body;
    b.m("DELETE").h(headers).q(query).b(body);
    return b.build();
};
const se_UpdateAccountCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/account");
    let body;
    body = JSON.stringify(smithyClient.take(input, {
        patchOperations: (_) => smithyClient._json(_),
    }));
    b.m("PATCH").h(headers).b(body);
    return b.build();
};
const se_UpdateApiKeyCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/apikeys/{apiKey}");
    b.p("apiKey", () => input.apiKey, "{apiKey}", false);
    let body;
    body = JSON.stringify(smithyClient.take(input, {
        patchOperations: (_) => smithyClient._json(_),
    }));
    b.m("PATCH").h(headers).b(body);
    return b.build();
};
const se_UpdateAuthorizerCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/restapis/{restApiId}/authorizers/{authorizerId}");
    b.p("restApiId", () => input.restApiId, "{restApiId}", false);
    b.p("authorizerId", () => input.authorizerId, "{authorizerId}", false);
    let body;
    body = JSON.stringify(smithyClient.take(input, {
        patchOperations: (_) => smithyClient._json(_),
    }));
    b.m("PATCH").h(headers).b(body);
    return b.build();
};
const se_UpdateBasePathMappingCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/domainnames/{domainName}/basepathmappings/{basePath}");
    b.p("domainName", () => input.domainName, "{domainName}", false);
    b.p("basePath", () => input.basePath, "{basePath}", false);
    const query = smithyClient.map({
        [_dNI]: [, input[_dNI]],
    });
    let body;
    body = JSON.stringify(smithyClient.take(input, {
        patchOperations: (_) => smithyClient._json(_),
    }));
    b.m("PATCH").h(headers).q(query).b(body);
    return b.build();
};
const se_UpdateClientCertificateCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/clientcertificates/{clientCertificateId}");
    b.p("clientCertificateId", () => input.clientCertificateId, "{clientCertificateId}", false);
    let body;
    body = JSON.stringify(smithyClient.take(input, {
        patchOperations: (_) => smithyClient._json(_),
    }));
    b.m("PATCH").h(headers).b(body);
    return b.build();
};
const se_UpdateDeploymentCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/restapis/{restApiId}/deployments/{deploymentId}");
    b.p("restApiId", () => input.restApiId, "{restApiId}", false);
    b.p("deploymentId", () => input.deploymentId, "{deploymentId}", false);
    let body;
    body = JSON.stringify(smithyClient.take(input, {
        patchOperations: (_) => smithyClient._json(_),
    }));
    b.m("PATCH").h(headers).b(body);
    return b.build();
};
const se_UpdateDocumentationPartCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/restapis/{restApiId}/documentation/parts/{documentationPartId}");
    b.p("restApiId", () => input.restApiId, "{restApiId}", false);
    b.p("documentationPartId", () => input.documentationPartId, "{documentationPartId}", false);
    let body;
    body = JSON.stringify(smithyClient.take(input, {
        patchOperations: (_) => smithyClient._json(_),
    }));
    b.m("PATCH").h(headers).b(body);
    return b.build();
};
const se_UpdateDocumentationVersionCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/restapis/{restApiId}/documentation/versions/{documentationVersion}");
    b.p("restApiId", () => input.restApiId, "{restApiId}", false);
    b.p("documentationVersion", () => input.documentationVersion, "{documentationVersion}", false);
    let body;
    body = JSON.stringify(smithyClient.take(input, {
        patchOperations: (_) => smithyClient._json(_),
    }));
    b.m("PATCH").h(headers).b(body);
    return b.build();
};
const se_UpdateDomainNameCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/domainnames/{domainName}");
    b.p("domainName", () => input.domainName, "{domainName}", false);
    const query = smithyClient.map({
        [_dNI]: [, input[_dNI]],
    });
    let body;
    body = JSON.stringify(smithyClient.take(input, {
        patchOperations: (_) => smithyClient._json(_),
    }));
    b.m("PATCH").h(headers).q(query).b(body);
    return b.build();
};
const se_UpdateGatewayResponseCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/restapis/{restApiId}/gatewayresponses/{responseType}");
    b.p("restApiId", () => input.restApiId, "{restApiId}", false);
    b.p("responseType", () => input.responseType, "{responseType}", false);
    let body;
    body = JSON.stringify(smithyClient.take(input, {
        patchOperations: (_) => smithyClient._json(_),
    }));
    b.m("PATCH").h(headers).b(body);
    return b.build();
};
const se_UpdateIntegrationCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/restapis/{restApiId}/resources/{resourceId}/methods/{httpMethod}/integration");
    b.p("restApiId", () => input.restApiId, "{restApiId}", false);
    b.p("resourceId", () => input.resourceId, "{resourceId}", false);
    b.p("httpMethod", () => input.httpMethod, "{httpMethod}", false);
    let body;
    body = JSON.stringify(smithyClient.take(input, {
        patchOperations: (_) => smithyClient._json(_),
    }));
    b.m("PATCH").h(headers).b(body);
    return b.build();
};
const se_UpdateIntegrationResponseCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/restapis/{restApiId}/resources/{resourceId}/methods/{httpMethod}/integration/responses/{statusCode}");
    b.p("restApiId", () => input.restApiId, "{restApiId}", false);
    b.p("resourceId", () => input.resourceId, "{resourceId}", false);
    b.p("httpMethod", () => input.httpMethod, "{httpMethod}", false);
    b.p("statusCode", () => input.statusCode, "{statusCode}", false);
    let body;
    body = JSON.stringify(smithyClient.take(input, {
        patchOperations: (_) => smithyClient._json(_),
    }));
    b.m("PATCH").h(headers).b(body);
    return b.build();
};
const se_UpdateMethodCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/restapis/{restApiId}/resources/{resourceId}/methods/{httpMethod}");
    b.p("restApiId", () => input.restApiId, "{restApiId}", false);
    b.p("resourceId", () => input.resourceId, "{resourceId}", false);
    b.p("httpMethod", () => input.httpMethod, "{httpMethod}", false);
    let body;
    body = JSON.stringify(smithyClient.take(input, {
        patchOperations: (_) => smithyClient._json(_),
    }));
    b.m("PATCH").h(headers).b(body);
    return b.build();
};
const se_UpdateMethodResponseCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/restapis/{restApiId}/resources/{resourceId}/methods/{httpMethod}/responses/{statusCode}");
    b.p("restApiId", () => input.restApiId, "{restApiId}", false);
    b.p("resourceId", () => input.resourceId, "{resourceId}", false);
    b.p("httpMethod", () => input.httpMethod, "{httpMethod}", false);
    b.p("statusCode", () => input.statusCode, "{statusCode}", false);
    let body;
    body = JSON.stringify(smithyClient.take(input, {
        patchOperations: (_) => smithyClient._json(_),
    }));
    b.m("PATCH").h(headers).b(body);
    return b.build();
};
const se_UpdateModelCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/restapis/{restApiId}/models/{modelName}");
    b.p("restApiId", () => input.restApiId, "{restApiId}", false);
    b.p("modelName", () => input.modelName, "{modelName}", false);
    let body;
    body = JSON.stringify(smithyClient.take(input, {
        patchOperations: (_) => smithyClient._json(_),
    }));
    b.m("PATCH").h(headers).b(body);
    return b.build();
};
const se_UpdateRequestValidatorCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/restapis/{restApiId}/requestvalidators/{requestValidatorId}");
    b.p("restApiId", () => input.restApiId, "{restApiId}", false);
    b.p("requestValidatorId", () => input.requestValidatorId, "{requestValidatorId}", false);
    let body;
    body = JSON.stringify(smithyClient.take(input, {
        patchOperations: (_) => smithyClient._json(_),
    }));
    b.m("PATCH").h(headers).b(body);
    return b.build();
};
const se_UpdateResourceCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/restapis/{restApiId}/resources/{resourceId}");
    b.p("restApiId", () => input.restApiId, "{restApiId}", false);
    b.p("resourceId", () => input.resourceId, "{resourceId}", false);
    let body;
    body = JSON.stringify(smithyClient.take(input, {
        patchOperations: (_) => smithyClient._json(_),
    }));
    b.m("PATCH").h(headers).b(body);
    return b.build();
};
const se_UpdateRestApiCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/restapis/{restApiId}");
    b.p("restApiId", () => input.restApiId, "{restApiId}", false);
    let body;
    body = JSON.stringify(smithyClient.take(input, {
        patchOperations: (_) => smithyClient._json(_),
    }));
    b.m("PATCH").h(headers).b(body);
    return b.build();
};
const se_UpdateStageCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/restapis/{restApiId}/stages/{stageName}");
    b.p("restApiId", () => input.restApiId, "{restApiId}", false);
    b.p("stageName", () => input.stageName, "{stageName}", false);
    let body;
    body = JSON.stringify(smithyClient.take(input, {
        patchOperations: (_) => smithyClient._json(_),
    }));
    b.m("PATCH").h(headers).b(body);
    return b.build();
};
const se_UpdateUsageCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/usageplans/{usagePlanId}/keys/{keyId}/usage");
    b.p("usagePlanId", () => input.usagePlanId, "{usagePlanId}", false);
    b.p("keyId", () => input.keyId, "{keyId}", false);
    let body;
    body = JSON.stringify(smithyClient.take(input, {
        patchOperations: (_) => smithyClient._json(_),
    }));
    b.m("PATCH").h(headers).b(body);
    return b.build();
};
const se_UpdateUsagePlanCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/usageplans/{usagePlanId}");
    b.p("usagePlanId", () => input.usagePlanId, "{usagePlanId}", false);
    let body;
    body = JSON.stringify(smithyClient.take(input, {
        patchOperations: (_) => smithyClient._json(_),
    }));
    b.m("PATCH").h(headers).b(body);
    return b.build();
};
const se_UpdateVpcLinkCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/vpclinks/{vpcLinkId}");
    b.p("vpcLinkId", () => input.vpcLinkId, "{vpcLinkId}", false);
    let body;
    body = JSON.stringify(smithyClient.take(input, {
        patchOperations: (_) => smithyClient._json(_),
    }));
    b.m("PATCH").h(headers).b(body);
    return b.build();
};
const de_CreateApiKeyCommand = async (output, context) => {
    if (output.statusCode !== 201 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseJsonBody(output.body, context)), "body");
    const doc = smithyClient.take(data, {
        createdDate: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        customerId: smithyClient.expectString,
        description: smithyClient.expectString,
        enabled: smithyClient.expectBoolean,
        id: smithyClient.expectString,
        lastUpdatedDate: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        name: smithyClient.expectString,
        stageKeys: smithyClient._json,
        tags: smithyClient._json,
        value: smithyClient.expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_CreateAuthorizerCommand = async (output, context) => {
    if (output.statusCode !== 201 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseJsonBody(output.body, context)), "body");
    const doc = smithyClient.take(data, {
        authType: smithyClient.expectString,
        authorizerCredentials: smithyClient.expectString,
        authorizerResultTtlInSeconds: smithyClient.expectInt32,
        authorizerUri: smithyClient.expectString,
        id: smithyClient.expectString,
        identitySource: smithyClient.expectString,
        identityValidationExpression: smithyClient.expectString,
        name: smithyClient.expectString,
        providerARNs: smithyClient._json,
        type: smithyClient.expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_CreateBasePathMappingCommand = async (output, context) => {
    if (output.statusCode !== 201 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseJsonBody(output.body, context)), "body");
    const doc = smithyClient.take(data, {
        basePath: smithyClient.expectString,
        restApiId: smithyClient.expectString,
        stage: smithyClient.expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_CreateDeploymentCommand = async (output, context) => {
    if (output.statusCode !== 201 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseJsonBody(output.body, context)), "body");
    const doc = smithyClient.take(data, {
        apiSummary: smithyClient._json,
        createdDate: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        description: smithyClient.expectString,
        id: smithyClient.expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_CreateDocumentationPartCommand = async (output, context) => {
    if (output.statusCode !== 201 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseJsonBody(output.body, context)), "body");
    const doc = smithyClient.take(data, {
        id: smithyClient.expectString,
        location: smithyClient._json,
        properties: smithyClient.expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_CreateDocumentationVersionCommand = async (output, context) => {
    if (output.statusCode !== 201 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseJsonBody(output.body, context)), "body");
    const doc = smithyClient.take(data, {
        createdDate: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        description: smithyClient.expectString,
        version: smithyClient.expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_CreateDomainNameCommand = async (output, context) => {
    if (output.statusCode !== 201 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseJsonBody(output.body, context)), "body");
    const doc = smithyClient.take(data, {
        certificateArn: smithyClient.expectString,
        certificateName: smithyClient.expectString,
        certificateUploadDate: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        distributionDomainName: smithyClient.expectString,
        distributionHostedZoneId: smithyClient.expectString,
        domainName: smithyClient.expectString,
        domainNameArn: smithyClient.expectString,
        domainNameId: smithyClient.expectString,
        domainNameStatus: smithyClient.expectString,
        domainNameStatusMessage: smithyClient.expectString,
        endpointConfiguration: smithyClient._json,
        managementPolicy: smithyClient.expectString,
        mutualTlsAuthentication: smithyClient._json,
        ownershipVerificationCertificateArn: smithyClient.expectString,
        policy: smithyClient.expectString,
        regionalCertificateArn: smithyClient.expectString,
        regionalCertificateName: smithyClient.expectString,
        regionalDomainName: smithyClient.expectString,
        regionalHostedZoneId: smithyClient.expectString,
        routingMode: smithyClient.expectString,
        securityPolicy: smithyClient.expectString,
        tags: smithyClient._json,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_CreateDomainNameAccessAssociationCommand = async (output, context) => {
    if (output.statusCode !== 201 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseJsonBody(output.body, context)), "body");
    const doc = smithyClient.take(data, {
        accessAssociationSource: smithyClient.expectString,
        accessAssociationSourceType: smithyClient.expectString,
        domainNameAccessAssociationArn: smithyClient.expectString,
        domainNameArn: smithyClient.expectString,
        tags: smithyClient._json,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_CreateModelCommand = async (output, context) => {
    if (output.statusCode !== 201 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseJsonBody(output.body, context)), "body");
    const doc = smithyClient.take(data, {
        contentType: smithyClient.expectString,
        description: smithyClient.expectString,
        id: smithyClient.expectString,
        name: smithyClient.expectString,
        schema: smithyClient.expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_CreateRequestValidatorCommand = async (output, context) => {
    if (output.statusCode !== 201 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseJsonBody(output.body, context)), "body");
    const doc = smithyClient.take(data, {
        id: smithyClient.expectString,
        name: smithyClient.expectString,
        validateRequestBody: smithyClient.expectBoolean,
        validateRequestParameters: smithyClient.expectBoolean,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_CreateResourceCommand = async (output, context) => {
    if (output.statusCode !== 201 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseJsonBody(output.body, context)), "body");
    const doc = smithyClient.take(data, {
        id: smithyClient.expectString,
        parentId: smithyClient.expectString,
        path: smithyClient.expectString,
        pathPart: smithyClient.expectString,
        resourceMethods: smithyClient._json,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_CreateRestApiCommand = async (output, context) => {
    if (output.statusCode !== 201 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseJsonBody(output.body, context)), "body");
    const doc = smithyClient.take(data, {
        apiKeySource: smithyClient.expectString,
        binaryMediaTypes: smithyClient._json,
        createdDate: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        description: smithyClient.expectString,
        disableExecuteApiEndpoint: smithyClient.expectBoolean,
        endpointConfiguration: smithyClient._json,
        id: smithyClient.expectString,
        minimumCompressionSize: smithyClient.expectInt32,
        name: smithyClient.expectString,
        policy: smithyClient.expectString,
        rootResourceId: smithyClient.expectString,
        tags: smithyClient._json,
        version: smithyClient.expectString,
        warnings: smithyClient._json,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_CreateStageCommand = async (output, context) => {
    if (output.statusCode !== 201 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseJsonBody(output.body, context)), "body");
    const doc = smithyClient.take(data, {
        accessLogSettings: smithyClient._json,
        cacheClusterEnabled: smithyClient.expectBoolean,
        cacheClusterSize: smithyClient.expectString,
        cacheClusterStatus: smithyClient.expectString,
        canarySettings: (_) => de_CanarySettings(_),
        clientCertificateId: smithyClient.expectString,
        createdDate: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        deploymentId: smithyClient.expectString,
        description: smithyClient.expectString,
        documentationVersion: smithyClient.expectString,
        lastUpdatedDate: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        methodSettings: (_) => de_MapOfMethodSettings(_),
        stageName: smithyClient.expectString,
        tags: smithyClient._json,
        tracingEnabled: smithyClient.expectBoolean,
        variables: smithyClient._json,
        webAclArn: smithyClient.expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_CreateUsagePlanCommand = async (output, context) => {
    if (output.statusCode !== 201 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseJsonBody(output.body, context)), "body");
    const doc = smithyClient.take(data, {
        apiStages: (_) => de_ListOfApiStage(_),
        description: smithyClient.expectString,
        id: smithyClient.expectString,
        name: smithyClient.expectString,
        productCode: smithyClient.expectString,
        quota: smithyClient._json,
        tags: smithyClient._json,
        throttle: (_) => de_ThrottleSettings(_),
    });
    Object.assign(contents, doc);
    return contents;
};
const de_CreateUsagePlanKeyCommand = async (output, context) => {
    if (output.statusCode !== 201 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseJsonBody(output.body, context)), "body");
    const doc = smithyClient.take(data, {
        id: smithyClient.expectString,
        name: smithyClient.expectString,
        type: smithyClient.expectString,
        value: smithyClient.expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_CreateVpcLinkCommand = async (output, context) => {
    if (output.statusCode !== 202 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseJsonBody(output.body, context)), "body");
    const doc = smithyClient.take(data, {
        description: smithyClient.expectString,
        id: smithyClient.expectString,
        name: smithyClient.expectString,
        status: smithyClient.expectString,
        statusMessage: smithyClient.expectString,
        tags: smithyClient._json,
        targetArns: smithyClient._json,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_DeleteApiKeyCommand = async (output, context) => {
    if (output.statusCode !== 202 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    await smithyClient.collectBody(output.body, context);
    return contents;
};
const de_DeleteAuthorizerCommand = async (output, context) => {
    if (output.statusCode !== 202 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    await smithyClient.collectBody(output.body, context);
    return contents;
};
const de_DeleteBasePathMappingCommand = async (output, context) => {
    if (output.statusCode !== 202 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    await smithyClient.collectBody(output.body, context);
    return contents;
};
const de_DeleteClientCertificateCommand = async (output, context) => {
    if (output.statusCode !== 202 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    await smithyClient.collectBody(output.body, context);
    return contents;
};
const de_DeleteDeploymentCommand = async (output, context) => {
    if (output.statusCode !== 202 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    await smithyClient.collectBody(output.body, context);
    return contents;
};
const de_DeleteDocumentationPartCommand = async (output, context) => {
    if (output.statusCode !== 202 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    await smithyClient.collectBody(output.body, context);
    return contents;
};
const de_DeleteDocumentationVersionCommand = async (output, context) => {
    if (output.statusCode !== 202 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    await smithyClient.collectBody(output.body, context);
    return contents;
};
const de_DeleteDomainNameCommand = async (output, context) => {
    if (output.statusCode !== 202 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    await smithyClient.collectBody(output.body, context);
    return contents;
};
const de_DeleteDomainNameAccessAssociationCommand = async (output, context) => {
    if (output.statusCode !== 202 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    await smithyClient.collectBody(output.body, context);
    return contents;
};
const de_DeleteGatewayResponseCommand = async (output, context) => {
    if (output.statusCode !== 202 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    await smithyClient.collectBody(output.body, context);
    return contents;
};
const de_DeleteIntegrationCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    await smithyClient.collectBody(output.body, context);
    return contents;
};
const de_DeleteIntegrationResponseCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    await smithyClient.collectBody(output.body, context);
    return contents;
};
const de_DeleteMethodCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    await smithyClient.collectBody(output.body, context);
    return contents;
};
const de_DeleteMethodResponseCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    await smithyClient.collectBody(output.body, context);
    return contents;
};
const de_DeleteModelCommand = async (output, context) => {
    if (output.statusCode !== 202 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    await smithyClient.collectBody(output.body, context);
    return contents;
};
const de_DeleteRequestValidatorCommand = async (output, context) => {
    if (output.statusCode !== 202 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    await smithyClient.collectBody(output.body, context);
    return contents;
};
const de_DeleteResourceCommand = async (output, context) => {
    if (output.statusCode !== 202 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    await smithyClient.collectBody(output.body, context);
    return contents;
};
const de_DeleteRestApiCommand = async (output, context) => {
    if (output.statusCode !== 202 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    await smithyClient.collectBody(output.body, context);
    return contents;
};
const de_DeleteStageCommand = async (output, context) => {
    if (output.statusCode !== 202 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    await smithyClient.collectBody(output.body, context);
    return contents;
};
const de_DeleteUsagePlanCommand = async (output, context) => {
    if (output.statusCode !== 202 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    await smithyClient.collectBody(output.body, context);
    return contents;
};
const de_DeleteUsagePlanKeyCommand = async (output, context) => {
    if (output.statusCode !== 202 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    await smithyClient.collectBody(output.body, context);
    return contents;
};
const de_DeleteVpcLinkCommand = async (output, context) => {
    if (output.statusCode !== 202 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    await smithyClient.collectBody(output.body, context);
    return contents;
};
const de_FlushStageAuthorizersCacheCommand = async (output, context) => {
    if (output.statusCode !== 202 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    await smithyClient.collectBody(output.body, context);
    return contents;
};
const de_FlushStageCacheCommand = async (output, context) => {
    if (output.statusCode !== 202 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    await smithyClient.collectBody(output.body, context);
    return contents;
};
const de_GenerateClientCertificateCommand = async (output, context) => {
    if (output.statusCode !== 201 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseJsonBody(output.body, context)), "body");
    const doc = smithyClient.take(data, {
        clientCertificateId: smithyClient.expectString,
        createdDate: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        description: smithyClient.expectString,
        expirationDate: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        pemEncodedCertificate: smithyClient.expectString,
        tags: smithyClient._json,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_GetAccountCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseJsonBody(output.body, context)), "body");
    const doc = smithyClient.take(data, {
        apiKeyVersion: smithyClient.expectString,
        cloudwatchRoleArn: smithyClient.expectString,
        features: smithyClient._json,
        throttleSettings: (_) => de_ThrottleSettings(_),
    });
    Object.assign(contents, doc);
    return contents;
};
const de_GetApiKeyCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseJsonBody(output.body, context)), "body");
    const doc = smithyClient.take(data, {
        createdDate: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        customerId: smithyClient.expectString,
        description: smithyClient.expectString,
        enabled: smithyClient.expectBoolean,
        id: smithyClient.expectString,
        lastUpdatedDate: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        name: smithyClient.expectString,
        stageKeys: smithyClient._json,
        tags: smithyClient._json,
        value: smithyClient.expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_GetApiKeysCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseJsonBody(output.body, context)), "body");
    const doc = smithyClient.take(data, {
        items: [, (_) => de_ListOfApiKey(_), `item`],
        position: smithyClient.expectString,
        warnings: smithyClient._json,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_GetAuthorizerCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseJsonBody(output.body, context)), "body");
    const doc = smithyClient.take(data, {
        authType: smithyClient.expectString,
        authorizerCredentials: smithyClient.expectString,
        authorizerResultTtlInSeconds: smithyClient.expectInt32,
        authorizerUri: smithyClient.expectString,
        id: smithyClient.expectString,
        identitySource: smithyClient.expectString,
        identityValidationExpression: smithyClient.expectString,
        name: smithyClient.expectString,
        providerARNs: smithyClient._json,
        type: smithyClient.expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_GetAuthorizersCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseJsonBody(output.body, context)), "body");
    const doc = smithyClient.take(data, {
        items: [, smithyClient._json, `item`],
        position: smithyClient.expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_GetBasePathMappingCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseJsonBody(output.body, context)), "body");
    const doc = smithyClient.take(data, {
        basePath: smithyClient.expectString,
        restApiId: smithyClient.expectString,
        stage: smithyClient.expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_GetBasePathMappingsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseJsonBody(output.body, context)), "body");
    const doc = smithyClient.take(data, {
        items: [, smithyClient._json, `item`],
        position: smithyClient.expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_GetClientCertificateCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseJsonBody(output.body, context)), "body");
    const doc = smithyClient.take(data, {
        clientCertificateId: smithyClient.expectString,
        createdDate: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        description: smithyClient.expectString,
        expirationDate: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        pemEncodedCertificate: smithyClient.expectString,
        tags: smithyClient._json,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_GetClientCertificatesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseJsonBody(output.body, context)), "body");
    const doc = smithyClient.take(data, {
        items: [, (_) => de_ListOfClientCertificate(_), `item`],
        position: smithyClient.expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_GetDeploymentCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseJsonBody(output.body, context)), "body");
    const doc = smithyClient.take(data, {
        apiSummary: smithyClient._json,
        createdDate: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        description: smithyClient.expectString,
        id: smithyClient.expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_GetDeploymentsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseJsonBody(output.body, context)), "body");
    const doc = smithyClient.take(data, {
        items: [, (_) => de_ListOfDeployment(_), `item`],
        position: smithyClient.expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_GetDocumentationPartCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseJsonBody(output.body, context)), "body");
    const doc = smithyClient.take(data, {
        id: smithyClient.expectString,
        location: smithyClient._json,
        properties: smithyClient.expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_GetDocumentationPartsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseJsonBody(output.body, context)), "body");
    const doc = smithyClient.take(data, {
        items: [, smithyClient._json, `item`],
        position: smithyClient.expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_GetDocumentationVersionCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseJsonBody(output.body, context)), "body");
    const doc = smithyClient.take(data, {
        createdDate: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        description: smithyClient.expectString,
        version: smithyClient.expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_GetDocumentationVersionsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseJsonBody(output.body, context)), "body");
    const doc = smithyClient.take(data, {
        items: [, (_) => de_ListOfDocumentationVersion(_), `item`],
        position: smithyClient.expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_GetDomainNameCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseJsonBody(output.body, context)), "body");
    const doc = smithyClient.take(data, {
        certificateArn: smithyClient.expectString,
        certificateName: smithyClient.expectString,
        certificateUploadDate: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        distributionDomainName: smithyClient.expectString,
        distributionHostedZoneId: smithyClient.expectString,
        domainName: smithyClient.expectString,
        domainNameArn: smithyClient.expectString,
        domainNameId: smithyClient.expectString,
        domainNameStatus: smithyClient.expectString,
        domainNameStatusMessage: smithyClient.expectString,
        endpointConfiguration: smithyClient._json,
        managementPolicy: smithyClient.expectString,
        mutualTlsAuthentication: smithyClient._json,
        ownershipVerificationCertificateArn: smithyClient.expectString,
        policy: smithyClient.expectString,
        regionalCertificateArn: smithyClient.expectString,
        regionalCertificateName: smithyClient.expectString,
        regionalDomainName: smithyClient.expectString,
        regionalHostedZoneId: smithyClient.expectString,
        routingMode: smithyClient.expectString,
        securityPolicy: smithyClient.expectString,
        tags: smithyClient._json,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_GetDomainNameAccessAssociationsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseJsonBody(output.body, context)), "body");
    const doc = smithyClient.take(data, {
        items: [, smithyClient._json, `item`],
        position: smithyClient.expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_GetDomainNamesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseJsonBody(output.body, context)), "body");
    const doc = smithyClient.take(data, {
        items: [, (_) => de_ListOfDomainName(_), `item`],
        position: smithyClient.expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_GetExportCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
        [_cT]: [, output.headers[_ct]],
        [_cD]: [, output.headers[_cd]],
    });
    const data = await smithyClient.collectBody(output.body, context);
    contents.body = data;
    return contents;
};
const de_GetGatewayResponseCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseJsonBody(output.body, context)), "body");
    const doc = smithyClient.take(data, {
        defaultResponse: smithyClient.expectBoolean,
        responseParameters: smithyClient._json,
        responseTemplates: smithyClient._json,
        responseType: smithyClient.expectString,
        statusCode: smithyClient.expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_GetGatewayResponsesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseJsonBody(output.body, context)), "body");
    const doc = smithyClient.take(data, {
        items: [, smithyClient._json, `item`],
        position: smithyClient.expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_GetIntegrationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseJsonBody(output.body, context)), "body");
    const doc = smithyClient.take(data, {
        cacheKeyParameters: smithyClient._json,
        cacheNamespace: smithyClient.expectString,
        connectionId: smithyClient.expectString,
        connectionType: smithyClient.expectString,
        contentHandling: smithyClient.expectString,
        credentials: smithyClient.expectString,
        httpMethod: smithyClient.expectString,
        integrationResponses: smithyClient._json,
        passthroughBehavior: smithyClient.expectString,
        requestParameters: smithyClient._json,
        requestTemplates: smithyClient._json,
        timeoutInMillis: smithyClient.expectInt32,
        tlsConfig: smithyClient._json,
        type: smithyClient.expectString,
        uri: smithyClient.expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_GetIntegrationResponseCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseJsonBody(output.body, context)), "body");
    const doc = smithyClient.take(data, {
        contentHandling: smithyClient.expectString,
        responseParameters: smithyClient._json,
        responseTemplates: smithyClient._json,
        selectionPattern: smithyClient.expectString,
        statusCode: smithyClient.expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_GetMethodCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseJsonBody(output.body, context)), "body");
    const doc = smithyClient.take(data, {
        apiKeyRequired: smithyClient.expectBoolean,
        authorizationScopes: smithyClient._json,
        authorizationType: smithyClient.expectString,
        authorizerId: smithyClient.expectString,
        httpMethod: smithyClient.expectString,
        methodIntegration: smithyClient._json,
        methodResponses: smithyClient._json,
        operationName: smithyClient.expectString,
        requestModels: smithyClient._json,
        requestParameters: smithyClient._json,
        requestValidatorId: smithyClient.expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_GetMethodResponseCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseJsonBody(output.body, context)), "body");
    const doc = smithyClient.take(data, {
        responseModels: smithyClient._json,
        responseParameters: smithyClient._json,
        statusCode: smithyClient.expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_GetModelCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseJsonBody(output.body, context)), "body");
    const doc = smithyClient.take(data, {
        contentType: smithyClient.expectString,
        description: smithyClient.expectString,
        id: smithyClient.expectString,
        name: smithyClient.expectString,
        schema: smithyClient.expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_GetModelsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseJsonBody(output.body, context)), "body");
    const doc = smithyClient.take(data, {
        items: [, smithyClient._json, `item`],
        position: smithyClient.expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_GetModelTemplateCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseJsonBody(output.body, context)), "body");
    const doc = smithyClient.take(data, {
        value: smithyClient.expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_GetRequestValidatorCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseJsonBody(output.body, context)), "body");
    const doc = smithyClient.take(data, {
        id: smithyClient.expectString,
        name: smithyClient.expectString,
        validateRequestBody: smithyClient.expectBoolean,
        validateRequestParameters: smithyClient.expectBoolean,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_GetRequestValidatorsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseJsonBody(output.body, context)), "body");
    const doc = smithyClient.take(data, {
        items: [, smithyClient._json, `item`],
        position: smithyClient.expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_GetResourceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseJsonBody(output.body, context)), "body");
    const doc = smithyClient.take(data, {
        id: smithyClient.expectString,
        parentId: smithyClient.expectString,
        path: smithyClient.expectString,
        pathPart: smithyClient.expectString,
        resourceMethods: smithyClient._json,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_GetResourcesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseJsonBody(output.body, context)), "body");
    const doc = smithyClient.take(data, {
        items: [, smithyClient._json, `item`],
        position: smithyClient.expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_GetRestApiCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseJsonBody(output.body, context)), "body");
    const doc = smithyClient.take(data, {
        apiKeySource: smithyClient.expectString,
        binaryMediaTypes: smithyClient._json,
        createdDate: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        description: smithyClient.expectString,
        disableExecuteApiEndpoint: smithyClient.expectBoolean,
        endpointConfiguration: smithyClient._json,
        id: smithyClient.expectString,
        minimumCompressionSize: smithyClient.expectInt32,
        name: smithyClient.expectString,
        policy: smithyClient.expectString,
        rootResourceId: smithyClient.expectString,
        tags: smithyClient._json,
        version: smithyClient.expectString,
        warnings: smithyClient._json,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_GetRestApisCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseJsonBody(output.body, context)), "body");
    const doc = smithyClient.take(data, {
        items: [, (_) => de_ListOfRestApi(_), `item`],
        position: smithyClient.expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_GetSdkCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
        [_cT]: [, output.headers[_ct]],
        [_cD]: [, output.headers[_cd]],
    });
    const data = await smithyClient.collectBody(output.body, context);
    contents.body = data;
    return contents;
};
const de_GetSdkTypeCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseJsonBody(output.body, context)), "body");
    const doc = smithyClient.take(data, {
        configurationProperties: smithyClient._json,
        description: smithyClient.expectString,
        friendlyName: smithyClient.expectString,
        id: smithyClient.expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_GetSdkTypesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseJsonBody(output.body, context)), "body");
    const doc = smithyClient.take(data, {
        items: [, smithyClient._json, `item`],
    });
    Object.assign(contents, doc);
    return contents;
};
const de_GetStageCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseJsonBody(output.body, context)), "body");
    const doc = smithyClient.take(data, {
        accessLogSettings: smithyClient._json,
        cacheClusterEnabled: smithyClient.expectBoolean,
        cacheClusterSize: smithyClient.expectString,
        cacheClusterStatus: smithyClient.expectString,
        canarySettings: (_) => de_CanarySettings(_),
        clientCertificateId: smithyClient.expectString,
        createdDate: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        deploymentId: smithyClient.expectString,
        description: smithyClient.expectString,
        documentationVersion: smithyClient.expectString,
        lastUpdatedDate: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        methodSettings: (_) => de_MapOfMethodSettings(_),
        stageName: smithyClient.expectString,
        tags: smithyClient._json,
        tracingEnabled: smithyClient.expectBoolean,
        variables: smithyClient._json,
        webAclArn: smithyClient.expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_GetStagesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseJsonBody(output.body, context)), "body");
    const doc = smithyClient.take(data, {
        item: (_) => de_ListOfStage(_),
    });
    Object.assign(contents, doc);
    return contents;
};
const de_GetTagsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseJsonBody(output.body, context)), "body");
    const doc = smithyClient.take(data, {
        tags: smithyClient._json,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_GetUsageCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseJsonBody(output.body, context)), "body");
    const doc = smithyClient.take(data, {
        endDate: smithyClient.expectString,
        items: [, smithyClient._json, `values`],
        position: smithyClient.expectString,
        startDate: smithyClient.expectString,
        usagePlanId: smithyClient.expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_GetUsagePlanCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseJsonBody(output.body, context)), "body");
    const doc = smithyClient.take(data, {
        apiStages: (_) => de_ListOfApiStage(_),
        description: smithyClient.expectString,
        id: smithyClient.expectString,
        name: smithyClient.expectString,
        productCode: smithyClient.expectString,
        quota: smithyClient._json,
        tags: smithyClient._json,
        throttle: (_) => de_ThrottleSettings(_),
    });
    Object.assign(contents, doc);
    return contents;
};
const de_GetUsagePlanKeyCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseJsonBody(output.body, context)), "body");
    const doc = smithyClient.take(data, {
        id: smithyClient.expectString,
        name: smithyClient.expectString,
        type: smithyClient.expectString,
        value: smithyClient.expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_GetUsagePlanKeysCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseJsonBody(output.body, context)), "body");
    const doc = smithyClient.take(data, {
        items: [, smithyClient._json, `item`],
        position: smithyClient.expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_GetUsagePlansCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseJsonBody(output.body, context)), "body");
    const doc = smithyClient.take(data, {
        items: [, (_) => de_ListOfUsagePlan(_), `item`],
        position: smithyClient.expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_GetVpcLinkCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseJsonBody(output.body, context)), "body");
    const doc = smithyClient.take(data, {
        description: smithyClient.expectString,
        id: smithyClient.expectString,
        name: smithyClient.expectString,
        status: smithyClient.expectString,
        statusMessage: smithyClient.expectString,
        tags: smithyClient._json,
        targetArns: smithyClient._json,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_GetVpcLinksCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseJsonBody(output.body, context)), "body");
    const doc = smithyClient.take(data, {
        items: [, smithyClient._json, `item`],
        position: smithyClient.expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_ImportApiKeysCommand = async (output, context) => {
    if (output.statusCode !== 201 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseJsonBody(output.body, context)), "body");
    const doc = smithyClient.take(data, {
        ids: smithyClient._json,
        warnings: smithyClient._json,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_ImportDocumentationPartsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseJsonBody(output.body, context)), "body");
    const doc = smithyClient.take(data, {
        ids: smithyClient._json,
        warnings: smithyClient._json,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_ImportRestApiCommand = async (output, context) => {
    if (output.statusCode !== 201 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseJsonBody(output.body, context)), "body");
    const doc = smithyClient.take(data, {
        apiKeySource: smithyClient.expectString,
        binaryMediaTypes: smithyClient._json,
        createdDate: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        description: smithyClient.expectString,
        disableExecuteApiEndpoint: smithyClient.expectBoolean,
        endpointConfiguration: smithyClient._json,
        id: smithyClient.expectString,
        minimumCompressionSize: smithyClient.expectInt32,
        name: smithyClient.expectString,
        policy: smithyClient.expectString,
        rootResourceId: smithyClient.expectString,
        tags: smithyClient._json,
        version: smithyClient.expectString,
        warnings: smithyClient._json,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_PutGatewayResponseCommand = async (output, context) => {
    if (output.statusCode !== 201 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseJsonBody(output.body, context)), "body");
    const doc = smithyClient.take(data, {
        defaultResponse: smithyClient.expectBoolean,
        responseParameters: smithyClient._json,
        responseTemplates: smithyClient._json,
        responseType: smithyClient.expectString,
        statusCode: smithyClient.expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_PutIntegrationCommand = async (output, context) => {
    if (output.statusCode !== 201 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseJsonBody(output.body, context)), "body");
    const doc = smithyClient.take(data, {
        cacheKeyParameters: smithyClient._json,
        cacheNamespace: smithyClient.expectString,
        connectionId: smithyClient.expectString,
        connectionType: smithyClient.expectString,
        contentHandling: smithyClient.expectString,
        credentials: smithyClient.expectString,
        httpMethod: smithyClient.expectString,
        integrationResponses: smithyClient._json,
        passthroughBehavior: smithyClient.expectString,
        requestParameters: smithyClient._json,
        requestTemplates: smithyClient._json,
        timeoutInMillis: smithyClient.expectInt32,
        tlsConfig: smithyClient._json,
        type: smithyClient.expectString,
        uri: smithyClient.expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_PutIntegrationResponseCommand = async (output, context) => {
    if (output.statusCode !== 201 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseJsonBody(output.body, context)), "body");
    const doc = smithyClient.take(data, {
        contentHandling: smithyClient.expectString,
        responseParameters: smithyClient._json,
        responseTemplates: smithyClient._json,
        selectionPattern: smithyClient.expectString,
        statusCode: smithyClient.expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_PutMethodCommand = async (output, context) => {
    if (output.statusCode !== 201 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseJsonBody(output.body, context)), "body");
    const doc = smithyClient.take(data, {
        apiKeyRequired: smithyClient.expectBoolean,
        authorizationScopes: smithyClient._json,
        authorizationType: smithyClient.expectString,
        authorizerId: smithyClient.expectString,
        httpMethod: smithyClient.expectString,
        methodIntegration: smithyClient._json,
        methodResponses: smithyClient._json,
        operationName: smithyClient.expectString,
        requestModels: smithyClient._json,
        requestParameters: smithyClient._json,
        requestValidatorId: smithyClient.expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_PutMethodResponseCommand = async (output, context) => {
    if (output.statusCode !== 201 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseJsonBody(output.body, context)), "body");
    const doc = smithyClient.take(data, {
        responseModels: smithyClient._json,
        responseParameters: smithyClient._json,
        statusCode: smithyClient.expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_PutRestApiCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseJsonBody(output.body, context)), "body");
    const doc = smithyClient.take(data, {
        apiKeySource: smithyClient.expectString,
        binaryMediaTypes: smithyClient._json,
        createdDate: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        description: smithyClient.expectString,
        disableExecuteApiEndpoint: smithyClient.expectBoolean,
        endpointConfiguration: smithyClient._json,
        id: smithyClient.expectString,
        minimumCompressionSize: smithyClient.expectInt32,
        name: smithyClient.expectString,
        policy: smithyClient.expectString,
        rootResourceId: smithyClient.expectString,
        tags: smithyClient._json,
        version: smithyClient.expectString,
        warnings: smithyClient._json,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_RejectDomainNameAccessAssociationCommand = async (output, context) => {
    if (output.statusCode !== 202 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    await smithyClient.collectBody(output.body, context);
    return contents;
};
const de_TagResourceCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    await smithyClient.collectBody(output.body, context);
    return contents;
};
const de_TestInvokeAuthorizerCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseJsonBody(output.body, context)), "body");
    const doc = smithyClient.take(data, {
        authorization: smithyClient._json,
        claims: smithyClient._json,
        clientStatus: smithyClient.expectInt32,
        latency: smithyClient.expectLong,
        log: smithyClient.expectString,
        policy: smithyClient.expectString,
        principalId: smithyClient.expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_TestInvokeMethodCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseJsonBody(output.body, context)), "body");
    const doc = smithyClient.take(data, {
        body: smithyClient.expectString,
        headers: smithyClient._json,
        latency: smithyClient.expectLong,
        log: smithyClient.expectString,
        multiValueHeaders: smithyClient._json,
        status: smithyClient.expectInt32,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_UntagResourceCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    await smithyClient.collectBody(output.body, context);
    return contents;
};
const de_UpdateAccountCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseJsonBody(output.body, context)), "body");
    const doc = smithyClient.take(data, {
        apiKeyVersion: smithyClient.expectString,
        cloudwatchRoleArn: smithyClient.expectString,
        features: smithyClient._json,
        throttleSettings: (_) => de_ThrottleSettings(_),
    });
    Object.assign(contents, doc);
    return contents;
};
const de_UpdateApiKeyCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseJsonBody(output.body, context)), "body");
    const doc = smithyClient.take(data, {
        createdDate: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        customerId: smithyClient.expectString,
        description: smithyClient.expectString,
        enabled: smithyClient.expectBoolean,
        id: smithyClient.expectString,
        lastUpdatedDate: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        name: smithyClient.expectString,
        stageKeys: smithyClient._json,
        tags: smithyClient._json,
        value: smithyClient.expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_UpdateAuthorizerCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseJsonBody(output.body, context)), "body");
    const doc = smithyClient.take(data, {
        authType: smithyClient.expectString,
        authorizerCredentials: smithyClient.expectString,
        authorizerResultTtlInSeconds: smithyClient.expectInt32,
        authorizerUri: smithyClient.expectString,
        id: smithyClient.expectString,
        identitySource: smithyClient.expectString,
        identityValidationExpression: smithyClient.expectString,
        name: smithyClient.expectString,
        providerARNs: smithyClient._json,
        type: smithyClient.expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_UpdateBasePathMappingCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseJsonBody(output.body, context)), "body");
    const doc = smithyClient.take(data, {
        basePath: smithyClient.expectString,
        restApiId: smithyClient.expectString,
        stage: smithyClient.expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_UpdateClientCertificateCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseJsonBody(output.body, context)), "body");
    const doc = smithyClient.take(data, {
        clientCertificateId: smithyClient.expectString,
        createdDate: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        description: smithyClient.expectString,
        expirationDate: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        pemEncodedCertificate: smithyClient.expectString,
        tags: smithyClient._json,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_UpdateDeploymentCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseJsonBody(output.body, context)), "body");
    const doc = smithyClient.take(data, {
        apiSummary: smithyClient._json,
        createdDate: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        description: smithyClient.expectString,
        id: smithyClient.expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_UpdateDocumentationPartCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseJsonBody(output.body, context)), "body");
    const doc = smithyClient.take(data, {
        id: smithyClient.expectString,
        location: smithyClient._json,
        properties: smithyClient.expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_UpdateDocumentationVersionCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseJsonBody(output.body, context)), "body");
    const doc = smithyClient.take(data, {
        createdDate: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        description: smithyClient.expectString,
        version: smithyClient.expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_UpdateDomainNameCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseJsonBody(output.body, context)), "body");
    const doc = smithyClient.take(data, {
        certificateArn: smithyClient.expectString,
        certificateName: smithyClient.expectString,
        certificateUploadDate: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        distributionDomainName: smithyClient.expectString,
        distributionHostedZoneId: smithyClient.expectString,
        domainName: smithyClient.expectString,
        domainNameArn: smithyClient.expectString,
        domainNameId: smithyClient.expectString,
        domainNameStatus: smithyClient.expectString,
        domainNameStatusMessage: smithyClient.expectString,
        endpointConfiguration: smithyClient._json,
        managementPolicy: smithyClient.expectString,
        mutualTlsAuthentication: smithyClient._json,
        ownershipVerificationCertificateArn: smithyClient.expectString,
        policy: smithyClient.expectString,
        regionalCertificateArn: smithyClient.expectString,
        regionalCertificateName: smithyClient.expectString,
        regionalDomainName: smithyClient.expectString,
        regionalHostedZoneId: smithyClient.expectString,
        routingMode: smithyClient.expectString,
        securityPolicy: smithyClient.expectString,
        tags: smithyClient._json,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_UpdateGatewayResponseCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseJsonBody(output.body, context)), "body");
    const doc = smithyClient.take(data, {
        defaultResponse: smithyClient.expectBoolean,
        responseParameters: smithyClient._json,
        responseTemplates: smithyClient._json,
        responseType: smithyClient.expectString,
        statusCode: smithyClient.expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_UpdateIntegrationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseJsonBody(output.body, context)), "body");
    const doc = smithyClient.take(data, {
        cacheKeyParameters: smithyClient._json,
        cacheNamespace: smithyClient.expectString,
        connectionId: smithyClient.expectString,
        connectionType: smithyClient.expectString,
        contentHandling: smithyClient.expectString,
        credentials: smithyClient.expectString,
        httpMethod: smithyClient.expectString,
        integrationResponses: smithyClient._json,
        passthroughBehavior: smithyClient.expectString,
        requestParameters: smithyClient._json,
        requestTemplates: smithyClient._json,
        timeoutInMillis: smithyClient.expectInt32,
        tlsConfig: smithyClient._json,
        type: smithyClient.expectString,
        uri: smithyClient.expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_UpdateIntegrationResponseCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseJsonBody(output.body, context)), "body");
    const doc = smithyClient.take(data, {
        contentHandling: smithyClient.expectString,
        responseParameters: smithyClient._json,
        responseTemplates: smithyClient._json,
        selectionPattern: smithyClient.expectString,
        statusCode: smithyClient.expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_UpdateMethodCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseJsonBody(output.body, context)), "body");
    const doc = smithyClient.take(data, {
        apiKeyRequired: smithyClient.expectBoolean,
        authorizationScopes: smithyClient._json,
        authorizationType: smithyClient.expectString,
        authorizerId: smithyClient.expectString,
        httpMethod: smithyClient.expectString,
        methodIntegration: smithyClient._json,
        methodResponses: smithyClient._json,
        operationName: smithyClient.expectString,
        requestModels: smithyClient._json,
        requestParameters: smithyClient._json,
        requestValidatorId: smithyClient.expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_UpdateMethodResponseCommand = async (output, context) => {
    if (output.statusCode !== 201 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseJsonBody(output.body, context)), "body");
    const doc = smithyClient.take(data, {
        responseModels: smithyClient._json,
        responseParameters: smithyClient._json,
        statusCode: smithyClient.expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_UpdateModelCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseJsonBody(output.body, context)), "body");
    const doc = smithyClient.take(data, {
        contentType: smithyClient.expectString,
        description: smithyClient.expectString,
        id: smithyClient.expectString,
        name: smithyClient.expectString,
        schema: smithyClient.expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_UpdateRequestValidatorCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseJsonBody(output.body, context)), "body");
    const doc = smithyClient.take(data, {
        id: smithyClient.expectString,
        name: smithyClient.expectString,
        validateRequestBody: smithyClient.expectBoolean,
        validateRequestParameters: smithyClient.expectBoolean,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_UpdateResourceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseJsonBody(output.body, context)), "body");
    const doc = smithyClient.take(data, {
        id: smithyClient.expectString,
        parentId: smithyClient.expectString,
        path: smithyClient.expectString,
        pathPart: smithyClient.expectString,
        resourceMethods: smithyClient._json,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_UpdateRestApiCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseJsonBody(output.body, context)), "body");
    const doc = smithyClient.take(data, {
        apiKeySource: smithyClient.expectString,
        binaryMediaTypes: smithyClient._json,
        createdDate: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        description: smithyClient.expectString,
        disableExecuteApiEndpoint: smithyClient.expectBoolean,
        endpointConfiguration: smithyClient._json,
        id: smithyClient.expectString,
        minimumCompressionSize: smithyClient.expectInt32,
        name: smithyClient.expectString,
        policy: smithyClient.expectString,
        rootResourceId: smithyClient.expectString,
        tags: smithyClient._json,
        version: smithyClient.expectString,
        warnings: smithyClient._json,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_UpdateStageCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseJsonBody(output.body, context)), "body");
    const doc = smithyClient.take(data, {
        accessLogSettings: smithyClient._json,
        cacheClusterEnabled: smithyClient.expectBoolean,
        cacheClusterSize: smithyClient.expectString,
        cacheClusterStatus: smithyClient.expectString,
        canarySettings: (_) => de_CanarySettings(_),
        clientCertificateId: smithyClient.expectString,
        createdDate: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        deploymentId: smithyClient.expectString,
        description: smithyClient.expectString,
        documentationVersion: smithyClient.expectString,
        lastUpdatedDate: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        methodSettings: (_) => de_MapOfMethodSettings(_),
        stageName: smithyClient.expectString,
        tags: smithyClient._json,
        tracingEnabled: smithyClient.expectBoolean,
        variables: smithyClient._json,
        webAclArn: smithyClient.expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_UpdateUsageCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseJsonBody(output.body, context)), "body");
    const doc = smithyClient.take(data, {
        endDate: smithyClient.expectString,
        items: [, smithyClient._json, `values`],
        position: smithyClient.expectString,
        startDate: smithyClient.expectString,
        usagePlanId: smithyClient.expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_UpdateUsagePlanCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseJsonBody(output.body, context)), "body");
    const doc = smithyClient.take(data, {
        apiStages: (_) => de_ListOfApiStage(_),
        description: smithyClient.expectString,
        id: smithyClient.expectString,
        name: smithyClient.expectString,
        productCode: smithyClient.expectString,
        quota: smithyClient._json,
        tags: smithyClient._json,
        throttle: (_) => de_ThrottleSettings(_),
    });
    Object.assign(contents, doc);
    return contents;
};
const de_UpdateVpcLinkCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseJsonBody(output.body, context)), "body");
    const doc = smithyClient.take(data, {
        description: smithyClient.expectString,
        id: smithyClient.expectString,
        name: smithyClient.expectString,
        status: smithyClient.expectString,
        statusMessage: smithyClient.expectString,
        tags: smithyClient._json,
        targetArns: smithyClient._json,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_CommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await core$1.parseJsonErrorBody(output.body, context),
    };
    const errorCode = core$1.loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.apigateway#BadRequestException":
            throw await de_BadRequestExceptionRes(parsedOutput);
        case "ConflictException":
        case "com.amazonaws.apigateway#ConflictException":
            throw await de_ConflictExceptionRes(parsedOutput);
        case "LimitExceededException":
        case "com.amazonaws.apigateway#LimitExceededException":
            throw await de_LimitExceededExceptionRes(parsedOutput);
        case "NotFoundException":
        case "com.amazonaws.apigateway#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput);
        case "TooManyRequestsException":
        case "com.amazonaws.apigateway#TooManyRequestsException":
            throw await de_TooManyRequestsExceptionRes(parsedOutput);
        case "UnauthorizedException":
        case "com.amazonaws.apigateway#UnauthorizedException":
            throw await de_UnauthorizedExceptionRes(parsedOutput);
        case "ServiceUnavailableException":
        case "com.amazonaws.apigateway#ServiceUnavailableException":
            throw await de_ServiceUnavailableExceptionRes(parsedOutput);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const throwDefaultError = smithyClient.withBaseException(APIGatewayServiceException);
const de_BadRequestExceptionRes = async (parsedOutput, context) => {
    const contents = smithyClient.map({});
    const data = parsedOutput.body;
    const doc = smithyClient.take(data, {
        message: smithyClient.expectString,
    });
    Object.assign(contents, doc);
    const exception = new BadRequestException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return smithyClient.decorateServiceException(exception, parsedOutput.body);
};
const de_ConflictExceptionRes = async (parsedOutput, context) => {
    const contents = smithyClient.map({});
    const data = parsedOutput.body;
    const doc = smithyClient.take(data, {
        message: smithyClient.expectString,
    });
    Object.assign(contents, doc);
    const exception = new ConflictException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return smithyClient.decorateServiceException(exception, parsedOutput.body);
};
const de_LimitExceededExceptionRes = async (parsedOutput, context) => {
    const contents = smithyClient.map({
        [_rAS]: [, parsedOutput.headers[_ra]],
    });
    const data = parsedOutput.body;
    const doc = smithyClient.take(data, {
        message: smithyClient.expectString,
    });
    Object.assign(contents, doc);
    const exception = new LimitExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return smithyClient.decorateServiceException(exception, parsedOutput.body);
};
const de_NotFoundExceptionRes = async (parsedOutput, context) => {
    const contents = smithyClient.map({});
    const data = parsedOutput.body;
    const doc = smithyClient.take(data, {
        message: smithyClient.expectString,
    });
    Object.assign(contents, doc);
    const exception = new NotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return smithyClient.decorateServiceException(exception, parsedOutput.body);
};
const de_ServiceUnavailableExceptionRes = async (parsedOutput, context) => {
    const contents = smithyClient.map({
        [_rAS]: [, parsedOutput.headers[_ra]],
    });
    const data = parsedOutput.body;
    const doc = smithyClient.take(data, {
        message: smithyClient.expectString,
    });
    Object.assign(contents, doc);
    const exception = new ServiceUnavailableException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return smithyClient.decorateServiceException(exception, parsedOutput.body);
};
const de_TooManyRequestsExceptionRes = async (parsedOutput, context) => {
    const contents = smithyClient.map({
        [_rAS]: [, parsedOutput.headers[_ra]],
    });
    const data = parsedOutput.body;
    const doc = smithyClient.take(data, {
        message: smithyClient.expectString,
    });
    Object.assign(contents, doc);
    const exception = new TooManyRequestsException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return smithyClient.decorateServiceException(exception, parsedOutput.body);
};
const de_UnauthorizedExceptionRes = async (parsedOutput, context) => {
    const contents = smithyClient.map({});
    const data = parsedOutput.body;
    const doc = smithyClient.take(data, {
        message: smithyClient.expectString,
    });
    Object.assign(contents, doc);
    const exception = new UnauthorizedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return smithyClient.decorateServiceException(exception, parsedOutput.body);
};
const se_ApiStage = (input, context) => {
    return smithyClient.take(input, {
        apiId: [],
        stage: [],
        throttle: (_) => se_MapOfApiStageThrottleSettings(_),
    });
};
const se_CanarySettings = (input, context) => {
    return smithyClient.take(input, {
        deploymentId: [],
        percentTraffic: smithyClient.serializeFloat,
        stageVariableOverrides: smithyClient._json,
        useStageCache: [],
    });
};
const se_DeploymentCanarySettings = (input, context) => {
    return smithyClient.take(input, {
        percentTraffic: smithyClient.serializeFloat,
        stageVariableOverrides: smithyClient._json,
        useStageCache: [],
    });
};
const se_ListOfApiStage = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_ApiStage(entry);
    });
};
const se_MapOfApiStageThrottleSettings = (input, context) => {
    return Object.entries(input).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        acc[key] = se_ThrottleSettings(value);
        return acc;
    }, {});
};
const se_ThrottleSettings = (input, context) => {
    return smithyClient.take(input, {
        burstLimit: [],
        rateLimit: smithyClient.serializeFloat,
    });
};
const de_ApiKey = (output, context) => {
    return smithyClient.take(output, {
        createdDate: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        customerId: smithyClient.expectString,
        description: smithyClient.expectString,
        enabled: smithyClient.expectBoolean,
        id: smithyClient.expectString,
        lastUpdatedDate: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        name: smithyClient.expectString,
        stageKeys: smithyClient._json,
        tags: smithyClient._json,
        value: smithyClient.expectString,
    });
};
const de_ApiStage = (output, context) => {
    return smithyClient.take(output, {
        apiId: smithyClient.expectString,
        stage: smithyClient.expectString,
        throttle: (_) => de_MapOfApiStageThrottleSettings(_),
    });
};
const de_CanarySettings = (output, context) => {
    return smithyClient.take(output, {
        deploymentId: smithyClient.expectString,
        percentTraffic: smithyClient.limitedParseDouble,
        stageVariableOverrides: smithyClient._json,
        useStageCache: smithyClient.expectBoolean,
    });
};
const de_ClientCertificate = (output, context) => {
    return smithyClient.take(output, {
        clientCertificateId: smithyClient.expectString,
        createdDate: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        description: smithyClient.expectString,
        expirationDate: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        pemEncodedCertificate: smithyClient.expectString,
        tags: smithyClient._json,
    });
};
const de_Deployment = (output, context) => {
    return smithyClient.take(output, {
        apiSummary: smithyClient._json,
        createdDate: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        description: smithyClient.expectString,
        id: smithyClient.expectString,
    });
};
const de_DocumentationVersion = (output, context) => {
    return smithyClient.take(output, {
        createdDate: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        description: smithyClient.expectString,
        version: smithyClient.expectString,
    });
};
const de_DomainName = (output, context) => {
    return smithyClient.take(output, {
        certificateArn: smithyClient.expectString,
        certificateName: smithyClient.expectString,
        certificateUploadDate: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        distributionDomainName: smithyClient.expectString,
        distributionHostedZoneId: smithyClient.expectString,
        domainName: smithyClient.expectString,
        domainNameArn: smithyClient.expectString,
        domainNameId: smithyClient.expectString,
        domainNameStatus: smithyClient.expectString,
        domainNameStatusMessage: smithyClient.expectString,
        endpointConfiguration: smithyClient._json,
        managementPolicy: smithyClient.expectString,
        mutualTlsAuthentication: smithyClient._json,
        ownershipVerificationCertificateArn: smithyClient.expectString,
        policy: smithyClient.expectString,
        regionalCertificateArn: smithyClient.expectString,
        regionalCertificateName: smithyClient.expectString,
        regionalDomainName: smithyClient.expectString,
        regionalHostedZoneId: smithyClient.expectString,
        routingMode: smithyClient.expectString,
        securityPolicy: smithyClient.expectString,
        tags: smithyClient._json,
    });
};
const de_ListOfApiKey = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ApiKey(entry);
    });
    return retVal;
};
const de_ListOfApiStage = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ApiStage(entry);
    });
    return retVal;
};
const de_ListOfClientCertificate = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ClientCertificate(entry);
    });
    return retVal;
};
const de_ListOfDeployment = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Deployment(entry);
    });
    return retVal;
};
const de_ListOfDocumentationVersion = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_DocumentationVersion(entry);
    });
    return retVal;
};
const de_ListOfDomainName = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_DomainName(entry);
    });
    return retVal;
};
const de_ListOfRestApi = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_RestApi(entry);
    });
    return retVal;
};
const de_ListOfStage = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Stage(entry);
    });
    return retVal;
};
const de_ListOfUsagePlan = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_UsagePlan(entry);
    });
    return retVal;
};
const de_MapOfApiStageThrottleSettings = (output, context) => {
    return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        acc[key] = de_ThrottleSettings(value);
        return acc;
    }, {});
};
const de_MapOfMethodSettings = (output, context) => {
    return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        acc[key] = de_MethodSetting(value);
        return acc;
    }, {});
};
const de_MethodSetting = (output, context) => {
    return smithyClient.take(output, {
        cacheDataEncrypted: smithyClient.expectBoolean,
        cacheTtlInSeconds: smithyClient.expectInt32,
        cachingEnabled: smithyClient.expectBoolean,
        dataTraceEnabled: smithyClient.expectBoolean,
        loggingLevel: smithyClient.expectString,
        metricsEnabled: smithyClient.expectBoolean,
        requireAuthorizationForCacheControl: smithyClient.expectBoolean,
        throttlingBurstLimit: smithyClient.expectInt32,
        throttlingRateLimit: smithyClient.limitedParseDouble,
        unauthorizedCacheControlHeaderStrategy: smithyClient.expectString,
    });
};
const de_RestApi = (output, context) => {
    return smithyClient.take(output, {
        apiKeySource: smithyClient.expectString,
        binaryMediaTypes: smithyClient._json,
        createdDate: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        description: smithyClient.expectString,
        disableExecuteApiEndpoint: smithyClient.expectBoolean,
        endpointConfiguration: smithyClient._json,
        id: smithyClient.expectString,
        minimumCompressionSize: smithyClient.expectInt32,
        name: smithyClient.expectString,
        policy: smithyClient.expectString,
        rootResourceId: smithyClient.expectString,
        tags: smithyClient._json,
        version: smithyClient.expectString,
        warnings: smithyClient._json,
    });
};
const de_Stage = (output, context) => {
    return smithyClient.take(output, {
        accessLogSettings: smithyClient._json,
        cacheClusterEnabled: smithyClient.expectBoolean,
        cacheClusterSize: smithyClient.expectString,
        cacheClusterStatus: smithyClient.expectString,
        canarySettings: (_) => de_CanarySettings(_),
        clientCertificateId: smithyClient.expectString,
        createdDate: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        deploymentId: smithyClient.expectString,
        description: smithyClient.expectString,
        documentationVersion: smithyClient.expectString,
        lastUpdatedDate: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        methodSettings: (_) => de_MapOfMethodSettings(_),
        stageName: smithyClient.expectString,
        tags: smithyClient._json,
        tracingEnabled: smithyClient.expectBoolean,
        variables: smithyClient._json,
        webAclArn: smithyClient.expectString,
    });
};
const de_ThrottleSettings = (output, context) => {
    return smithyClient.take(output, {
        burstLimit: smithyClient.expectInt32,
        rateLimit: smithyClient.limitedParseDouble,
    });
};
const de_UsagePlan = (output, context) => {
    return smithyClient.take(output, {
        apiStages: (_) => de_ListOfApiStage(_),
        description: smithyClient.expectString,
        id: smithyClient.expectString,
        name: smithyClient.expectString,
        productCode: smithyClient.expectString,
        quota: smithyClient._json,
        tags: smithyClient._json,
        throttle: (_) => de_ThrottleSettings(_),
    });
};
const deserializeMetadata = (output) => ({
    httpStatusCode: output.statusCode,
    requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
    extendedRequestId: output.headers["x-amz-id-2"],
    cfId: output.headers["x-amz-cf-id"],
});
const _a = "accepts";
const _ac = "accept";
const _cD = "contentDisposition";
const _cI = "customerId";
const _cT = "contentType";
const _cd = "content-disposition";
const _ct = "content-type";
const _dI = "deploymentId";
const _dNA = "domainNameArn";
const _dNAAA = "domainNameAccessAssociationArn";
const _dNI = "domainNameId";
const _e = "embed";
const _eD = "endDate";
const _f = "flatten";
const _fOW = "failOnWarnings";
const _fa = "failonwarnings";
const _fo = "format";
const _iV = "includeValue";
const _iVn = "includeValues";
const _kI = "keyId";
const _l = "limit";
const _lS = "locationStatus";
const _m = "mode";
const _n = "name";
const _nQ = "nameQuery";
const _p = "position";
const _pa = "path";
const _rAS = "retryAfterSeconds";
const _rO = "resourceOwner";
const _ra = "retry-after";
const _sD = "startDate";
const _t = "type";
const _tK = "tagKeys";

class CreateApiKeyCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("BackplaneControlService", "CreateApiKey", {})
    .n("APIGatewayClient", "CreateApiKeyCommand")
    .f(void 0, void 0)
    .ser(se_CreateApiKeyCommand)
    .de(de_CreateApiKeyCommand)
    .build() {
}

class CreateAuthorizerCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("BackplaneControlService", "CreateAuthorizer", {})
    .n("APIGatewayClient", "CreateAuthorizerCommand")
    .f(void 0, void 0)
    .ser(se_CreateAuthorizerCommand)
    .de(de_CreateAuthorizerCommand)
    .build() {
}

class CreateBasePathMappingCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("BackplaneControlService", "CreateBasePathMapping", {})
    .n("APIGatewayClient", "CreateBasePathMappingCommand")
    .f(void 0, void 0)
    .ser(se_CreateBasePathMappingCommand)
    .de(de_CreateBasePathMappingCommand)
    .build() {
}

class CreateDeploymentCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("BackplaneControlService", "CreateDeployment", {})
    .n("APIGatewayClient", "CreateDeploymentCommand")
    .f(void 0, void 0)
    .ser(se_CreateDeploymentCommand)
    .de(de_CreateDeploymentCommand)
    .build() {
}

class CreateDocumentationPartCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("BackplaneControlService", "CreateDocumentationPart", {})
    .n("APIGatewayClient", "CreateDocumentationPartCommand")
    .f(void 0, void 0)
    .ser(se_CreateDocumentationPartCommand)
    .de(de_CreateDocumentationPartCommand)
    .build() {
}

class CreateDocumentationVersionCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("BackplaneControlService", "CreateDocumentationVersion", {})
    .n("APIGatewayClient", "CreateDocumentationVersionCommand")
    .f(void 0, void 0)
    .ser(se_CreateDocumentationVersionCommand)
    .de(de_CreateDocumentationVersionCommand)
    .build() {
}

class CreateDomainNameAccessAssociationCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("BackplaneControlService", "CreateDomainNameAccessAssociation", {})
    .n("APIGatewayClient", "CreateDomainNameAccessAssociationCommand")
    .f(void 0, void 0)
    .ser(se_CreateDomainNameAccessAssociationCommand)
    .de(de_CreateDomainNameAccessAssociationCommand)
    .build() {
}

class CreateDomainNameCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("BackplaneControlService", "CreateDomainName", {})
    .n("APIGatewayClient", "CreateDomainNameCommand")
    .f(void 0, void 0)
    .ser(se_CreateDomainNameCommand)
    .de(de_CreateDomainNameCommand)
    .build() {
}

class CreateModelCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("BackplaneControlService", "CreateModel", {})
    .n("APIGatewayClient", "CreateModelCommand")
    .f(void 0, void 0)
    .ser(se_CreateModelCommand)
    .de(de_CreateModelCommand)
    .build() {
}

class CreateRequestValidatorCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("BackplaneControlService", "CreateRequestValidator", {})
    .n("APIGatewayClient", "CreateRequestValidatorCommand")
    .f(void 0, void 0)
    .ser(se_CreateRequestValidatorCommand)
    .de(de_CreateRequestValidatorCommand)
    .build() {
}

class CreateResourceCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("BackplaneControlService", "CreateResource", {})
    .n("APIGatewayClient", "CreateResourceCommand")
    .f(void 0, void 0)
    .ser(se_CreateResourceCommand)
    .de(de_CreateResourceCommand)
    .build() {
}

class CreateRestApiCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("BackplaneControlService", "CreateRestApi", {})
    .n("APIGatewayClient", "CreateRestApiCommand")
    .f(void 0, void 0)
    .ser(se_CreateRestApiCommand)
    .de(de_CreateRestApiCommand)
    .build() {
}

class CreateStageCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("BackplaneControlService", "CreateStage", {})
    .n("APIGatewayClient", "CreateStageCommand")
    .f(void 0, void 0)
    .ser(se_CreateStageCommand)
    .de(de_CreateStageCommand)
    .build() {
}

class CreateUsagePlanCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("BackplaneControlService", "CreateUsagePlan", {})
    .n("APIGatewayClient", "CreateUsagePlanCommand")
    .f(void 0, void 0)
    .ser(se_CreateUsagePlanCommand)
    .de(de_CreateUsagePlanCommand)
    .build() {
}

class CreateUsagePlanKeyCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("BackplaneControlService", "CreateUsagePlanKey", {})
    .n("APIGatewayClient", "CreateUsagePlanKeyCommand")
    .f(void 0, void 0)
    .ser(se_CreateUsagePlanKeyCommand)
    .de(de_CreateUsagePlanKeyCommand)
    .build() {
}

class CreateVpcLinkCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("BackplaneControlService", "CreateVpcLink", {})
    .n("APIGatewayClient", "CreateVpcLinkCommand")
    .f(void 0, void 0)
    .ser(se_CreateVpcLinkCommand)
    .de(de_CreateVpcLinkCommand)
    .build() {
}

class DeleteApiKeyCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("BackplaneControlService", "DeleteApiKey", {})
    .n("APIGatewayClient", "DeleteApiKeyCommand")
    .f(void 0, void 0)
    .ser(se_DeleteApiKeyCommand)
    .de(de_DeleteApiKeyCommand)
    .build() {
}

class DeleteAuthorizerCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("BackplaneControlService", "DeleteAuthorizer", {})
    .n("APIGatewayClient", "DeleteAuthorizerCommand")
    .f(void 0, void 0)
    .ser(se_DeleteAuthorizerCommand)
    .de(de_DeleteAuthorizerCommand)
    .build() {
}

class DeleteBasePathMappingCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("BackplaneControlService", "DeleteBasePathMapping", {})
    .n("APIGatewayClient", "DeleteBasePathMappingCommand")
    .f(void 0, void 0)
    .ser(se_DeleteBasePathMappingCommand)
    .de(de_DeleteBasePathMappingCommand)
    .build() {
}

class DeleteClientCertificateCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("BackplaneControlService", "DeleteClientCertificate", {})
    .n("APIGatewayClient", "DeleteClientCertificateCommand")
    .f(void 0, void 0)
    .ser(se_DeleteClientCertificateCommand)
    .de(de_DeleteClientCertificateCommand)
    .build() {
}

class DeleteDeploymentCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("BackplaneControlService", "DeleteDeployment", {})
    .n("APIGatewayClient", "DeleteDeploymentCommand")
    .f(void 0, void 0)
    .ser(se_DeleteDeploymentCommand)
    .de(de_DeleteDeploymentCommand)
    .build() {
}

class DeleteDocumentationPartCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("BackplaneControlService", "DeleteDocumentationPart", {})
    .n("APIGatewayClient", "DeleteDocumentationPartCommand")
    .f(void 0, void 0)
    .ser(se_DeleteDocumentationPartCommand)
    .de(de_DeleteDocumentationPartCommand)
    .build() {
}

class DeleteDocumentationVersionCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("BackplaneControlService", "DeleteDocumentationVersion", {})
    .n("APIGatewayClient", "DeleteDocumentationVersionCommand")
    .f(void 0, void 0)
    .ser(se_DeleteDocumentationVersionCommand)
    .de(de_DeleteDocumentationVersionCommand)
    .build() {
}

class DeleteDomainNameAccessAssociationCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("BackplaneControlService", "DeleteDomainNameAccessAssociation", {})
    .n("APIGatewayClient", "DeleteDomainNameAccessAssociationCommand")
    .f(void 0, void 0)
    .ser(se_DeleteDomainNameAccessAssociationCommand)
    .de(de_DeleteDomainNameAccessAssociationCommand)
    .build() {
}

class DeleteDomainNameCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("BackplaneControlService", "DeleteDomainName", {})
    .n("APIGatewayClient", "DeleteDomainNameCommand")
    .f(void 0, void 0)
    .ser(se_DeleteDomainNameCommand)
    .de(de_DeleteDomainNameCommand)
    .build() {
}

class DeleteGatewayResponseCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("BackplaneControlService", "DeleteGatewayResponse", {})
    .n("APIGatewayClient", "DeleteGatewayResponseCommand")
    .f(void 0, void 0)
    .ser(se_DeleteGatewayResponseCommand)
    .de(de_DeleteGatewayResponseCommand)
    .build() {
}

class DeleteIntegrationCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("BackplaneControlService", "DeleteIntegration", {})
    .n("APIGatewayClient", "DeleteIntegrationCommand")
    .f(void 0, void 0)
    .ser(se_DeleteIntegrationCommand)
    .de(de_DeleteIntegrationCommand)
    .build() {
}

class DeleteIntegrationResponseCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("BackplaneControlService", "DeleteIntegrationResponse", {})
    .n("APIGatewayClient", "DeleteIntegrationResponseCommand")
    .f(void 0, void 0)
    .ser(se_DeleteIntegrationResponseCommand)
    .de(de_DeleteIntegrationResponseCommand)
    .build() {
}

class DeleteMethodCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("BackplaneControlService", "DeleteMethod", {})
    .n("APIGatewayClient", "DeleteMethodCommand")
    .f(void 0, void 0)
    .ser(se_DeleteMethodCommand)
    .de(de_DeleteMethodCommand)
    .build() {
}

class DeleteMethodResponseCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("BackplaneControlService", "DeleteMethodResponse", {})
    .n("APIGatewayClient", "DeleteMethodResponseCommand")
    .f(void 0, void 0)
    .ser(se_DeleteMethodResponseCommand)
    .de(de_DeleteMethodResponseCommand)
    .build() {
}

class DeleteModelCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("BackplaneControlService", "DeleteModel", {})
    .n("APIGatewayClient", "DeleteModelCommand")
    .f(void 0, void 0)
    .ser(se_DeleteModelCommand)
    .de(de_DeleteModelCommand)
    .build() {
}

class DeleteRequestValidatorCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("BackplaneControlService", "DeleteRequestValidator", {})
    .n("APIGatewayClient", "DeleteRequestValidatorCommand")
    .f(void 0, void 0)
    .ser(se_DeleteRequestValidatorCommand)
    .de(de_DeleteRequestValidatorCommand)
    .build() {
}

class DeleteResourceCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("BackplaneControlService", "DeleteResource", {})
    .n("APIGatewayClient", "DeleteResourceCommand")
    .f(void 0, void 0)
    .ser(se_DeleteResourceCommand)
    .de(de_DeleteResourceCommand)
    .build() {
}

class DeleteRestApiCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("BackplaneControlService", "DeleteRestApi", {})
    .n("APIGatewayClient", "DeleteRestApiCommand")
    .f(void 0, void 0)
    .ser(se_DeleteRestApiCommand)
    .de(de_DeleteRestApiCommand)
    .build() {
}

class DeleteStageCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("BackplaneControlService", "DeleteStage", {})
    .n("APIGatewayClient", "DeleteStageCommand")
    .f(void 0, void 0)
    .ser(se_DeleteStageCommand)
    .de(de_DeleteStageCommand)
    .build() {
}

class DeleteUsagePlanCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("BackplaneControlService", "DeleteUsagePlan", {})
    .n("APIGatewayClient", "DeleteUsagePlanCommand")
    .f(void 0, void 0)
    .ser(se_DeleteUsagePlanCommand)
    .de(de_DeleteUsagePlanCommand)
    .build() {
}

class DeleteUsagePlanKeyCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("BackplaneControlService", "DeleteUsagePlanKey", {})
    .n("APIGatewayClient", "DeleteUsagePlanKeyCommand")
    .f(void 0, void 0)
    .ser(se_DeleteUsagePlanKeyCommand)
    .de(de_DeleteUsagePlanKeyCommand)
    .build() {
}

class DeleteVpcLinkCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("BackplaneControlService", "DeleteVpcLink", {})
    .n("APIGatewayClient", "DeleteVpcLinkCommand")
    .f(void 0, void 0)
    .ser(se_DeleteVpcLinkCommand)
    .de(de_DeleteVpcLinkCommand)
    .build() {
}

class FlushStageAuthorizersCacheCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("BackplaneControlService", "FlushStageAuthorizersCache", {})
    .n("APIGatewayClient", "FlushStageAuthorizersCacheCommand")
    .f(void 0, void 0)
    .ser(se_FlushStageAuthorizersCacheCommand)
    .de(de_FlushStageAuthorizersCacheCommand)
    .build() {
}

class FlushStageCacheCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("BackplaneControlService", "FlushStageCache", {})
    .n("APIGatewayClient", "FlushStageCacheCommand")
    .f(void 0, void 0)
    .ser(se_FlushStageCacheCommand)
    .de(de_FlushStageCacheCommand)
    .build() {
}

class GenerateClientCertificateCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("BackplaneControlService", "GenerateClientCertificate", {})
    .n("APIGatewayClient", "GenerateClientCertificateCommand")
    .f(void 0, void 0)
    .ser(se_GenerateClientCertificateCommand)
    .de(de_GenerateClientCertificateCommand)
    .build() {
}

class GetAccountCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("BackplaneControlService", "GetAccount", {})
    .n("APIGatewayClient", "GetAccountCommand")
    .f(void 0, void 0)
    .ser(se_GetAccountCommand)
    .de(de_GetAccountCommand)
    .build() {
}

class GetApiKeyCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("BackplaneControlService", "GetApiKey", {})
    .n("APIGatewayClient", "GetApiKeyCommand")
    .f(void 0, void 0)
    .ser(se_GetApiKeyCommand)
    .de(de_GetApiKeyCommand)
    .build() {
}

class GetApiKeysCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("BackplaneControlService", "GetApiKeys", {})
    .n("APIGatewayClient", "GetApiKeysCommand")
    .f(void 0, void 0)
    .ser(se_GetApiKeysCommand)
    .de(de_GetApiKeysCommand)
    .build() {
}

class GetAuthorizerCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("BackplaneControlService", "GetAuthorizer", {})
    .n("APIGatewayClient", "GetAuthorizerCommand")
    .f(void 0, void 0)
    .ser(se_GetAuthorizerCommand)
    .de(de_GetAuthorizerCommand)
    .build() {
}

class GetAuthorizersCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("BackplaneControlService", "GetAuthorizers", {})
    .n("APIGatewayClient", "GetAuthorizersCommand")
    .f(void 0, void 0)
    .ser(se_GetAuthorizersCommand)
    .de(de_GetAuthorizersCommand)
    .build() {
}

class GetBasePathMappingCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("BackplaneControlService", "GetBasePathMapping", {})
    .n("APIGatewayClient", "GetBasePathMappingCommand")
    .f(void 0, void 0)
    .ser(se_GetBasePathMappingCommand)
    .de(de_GetBasePathMappingCommand)
    .build() {
}

class GetBasePathMappingsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("BackplaneControlService", "GetBasePathMappings", {})
    .n("APIGatewayClient", "GetBasePathMappingsCommand")
    .f(void 0, void 0)
    .ser(se_GetBasePathMappingsCommand)
    .de(de_GetBasePathMappingsCommand)
    .build() {
}

class GetClientCertificateCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("BackplaneControlService", "GetClientCertificate", {})
    .n("APIGatewayClient", "GetClientCertificateCommand")
    .f(void 0, void 0)
    .ser(se_GetClientCertificateCommand)
    .de(de_GetClientCertificateCommand)
    .build() {
}

class GetClientCertificatesCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("BackplaneControlService", "GetClientCertificates", {})
    .n("APIGatewayClient", "GetClientCertificatesCommand")
    .f(void 0, void 0)
    .ser(se_GetClientCertificatesCommand)
    .de(de_GetClientCertificatesCommand)
    .build() {
}

class GetDeploymentCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("BackplaneControlService", "GetDeployment", {})
    .n("APIGatewayClient", "GetDeploymentCommand")
    .f(void 0, void 0)
    .ser(se_GetDeploymentCommand)
    .de(de_GetDeploymentCommand)
    .build() {
}

class GetDeploymentsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("BackplaneControlService", "GetDeployments", {})
    .n("APIGatewayClient", "GetDeploymentsCommand")
    .f(void 0, void 0)
    .ser(se_GetDeploymentsCommand)
    .de(de_GetDeploymentsCommand)
    .build() {
}

class GetDocumentationPartCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("BackplaneControlService", "GetDocumentationPart", {})
    .n("APIGatewayClient", "GetDocumentationPartCommand")
    .f(void 0, void 0)
    .ser(se_GetDocumentationPartCommand)
    .de(de_GetDocumentationPartCommand)
    .build() {
}

class GetDocumentationPartsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("BackplaneControlService", "GetDocumentationParts", {})
    .n("APIGatewayClient", "GetDocumentationPartsCommand")
    .f(void 0, void 0)
    .ser(se_GetDocumentationPartsCommand)
    .de(de_GetDocumentationPartsCommand)
    .build() {
}

class GetDocumentationVersionCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("BackplaneControlService", "GetDocumentationVersion", {})
    .n("APIGatewayClient", "GetDocumentationVersionCommand")
    .f(void 0, void 0)
    .ser(se_GetDocumentationVersionCommand)
    .de(de_GetDocumentationVersionCommand)
    .build() {
}

class GetDocumentationVersionsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("BackplaneControlService", "GetDocumentationVersions", {})
    .n("APIGatewayClient", "GetDocumentationVersionsCommand")
    .f(void 0, void 0)
    .ser(se_GetDocumentationVersionsCommand)
    .de(de_GetDocumentationVersionsCommand)
    .build() {
}

class GetDomainNameAccessAssociationsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("BackplaneControlService", "GetDomainNameAccessAssociations", {})
    .n("APIGatewayClient", "GetDomainNameAccessAssociationsCommand")
    .f(void 0, void 0)
    .ser(se_GetDomainNameAccessAssociationsCommand)
    .de(de_GetDomainNameAccessAssociationsCommand)
    .build() {
}

class GetDomainNameCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("BackplaneControlService", "GetDomainName", {})
    .n("APIGatewayClient", "GetDomainNameCommand")
    .f(void 0, void 0)
    .ser(se_GetDomainNameCommand)
    .de(de_GetDomainNameCommand)
    .build() {
}

class GetDomainNamesCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("BackplaneControlService", "GetDomainNames", {})
    .n("APIGatewayClient", "GetDomainNamesCommand")
    .f(void 0, void 0)
    .ser(se_GetDomainNamesCommand)
    .de(de_GetDomainNamesCommand)
    .build() {
}

class GetExportCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("BackplaneControlService", "GetExport", {})
    .n("APIGatewayClient", "GetExportCommand")
    .f(void 0, void 0)
    .ser(se_GetExportCommand)
    .de(de_GetExportCommand)
    .build() {
}

class GetGatewayResponseCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("BackplaneControlService", "GetGatewayResponse", {})
    .n("APIGatewayClient", "GetGatewayResponseCommand")
    .f(void 0, void 0)
    .ser(se_GetGatewayResponseCommand)
    .de(de_GetGatewayResponseCommand)
    .build() {
}

class GetGatewayResponsesCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("BackplaneControlService", "GetGatewayResponses", {})
    .n("APIGatewayClient", "GetGatewayResponsesCommand")
    .f(void 0, void 0)
    .ser(se_GetGatewayResponsesCommand)
    .de(de_GetGatewayResponsesCommand)
    .build() {
}

class GetIntegrationCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("BackplaneControlService", "GetIntegration", {})
    .n("APIGatewayClient", "GetIntegrationCommand")
    .f(void 0, void 0)
    .ser(se_GetIntegrationCommand)
    .de(de_GetIntegrationCommand)
    .build() {
}

class GetIntegrationResponseCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("BackplaneControlService", "GetIntegrationResponse", {})
    .n("APIGatewayClient", "GetIntegrationResponseCommand")
    .f(void 0, void 0)
    .ser(se_GetIntegrationResponseCommand)
    .de(de_GetIntegrationResponseCommand)
    .build() {
}

class GetMethodCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("BackplaneControlService", "GetMethod", {})
    .n("APIGatewayClient", "GetMethodCommand")
    .f(void 0, void 0)
    .ser(se_GetMethodCommand)
    .de(de_GetMethodCommand)
    .build() {
}

class GetMethodResponseCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("BackplaneControlService", "GetMethodResponse", {})
    .n("APIGatewayClient", "GetMethodResponseCommand")
    .f(void 0, void 0)
    .ser(se_GetMethodResponseCommand)
    .de(de_GetMethodResponseCommand)
    .build() {
}

class GetModelCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("BackplaneControlService", "GetModel", {})
    .n("APIGatewayClient", "GetModelCommand")
    .f(void 0, void 0)
    .ser(se_GetModelCommand)
    .de(de_GetModelCommand)
    .build() {
}

class GetModelsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("BackplaneControlService", "GetModels", {})
    .n("APIGatewayClient", "GetModelsCommand")
    .f(void 0, void 0)
    .ser(se_GetModelsCommand)
    .de(de_GetModelsCommand)
    .build() {
}

class GetModelTemplateCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("BackplaneControlService", "GetModelTemplate", {})
    .n("APIGatewayClient", "GetModelTemplateCommand")
    .f(void 0, void 0)
    .ser(se_GetModelTemplateCommand)
    .de(de_GetModelTemplateCommand)
    .build() {
}

class GetRequestValidatorCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("BackplaneControlService", "GetRequestValidator", {})
    .n("APIGatewayClient", "GetRequestValidatorCommand")
    .f(void 0, void 0)
    .ser(se_GetRequestValidatorCommand)
    .de(de_GetRequestValidatorCommand)
    .build() {
}

class GetRequestValidatorsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("BackplaneControlService", "GetRequestValidators", {})
    .n("APIGatewayClient", "GetRequestValidatorsCommand")
    .f(void 0, void 0)
    .ser(se_GetRequestValidatorsCommand)
    .de(de_GetRequestValidatorsCommand)
    .build() {
}

class GetResourceCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("BackplaneControlService", "GetResource", {})
    .n("APIGatewayClient", "GetResourceCommand")
    .f(void 0, void 0)
    .ser(se_GetResourceCommand)
    .de(de_GetResourceCommand)
    .build() {
}

class GetResourcesCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("BackplaneControlService", "GetResources", {})
    .n("APIGatewayClient", "GetResourcesCommand")
    .f(void 0, void 0)
    .ser(se_GetResourcesCommand)
    .de(de_GetResourcesCommand)
    .build() {
}

class GetRestApiCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("BackplaneControlService", "GetRestApi", {})
    .n("APIGatewayClient", "GetRestApiCommand")
    .f(void 0, void 0)
    .ser(se_GetRestApiCommand)
    .de(de_GetRestApiCommand)
    .build() {
}

class GetRestApisCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("BackplaneControlService", "GetRestApis", {})
    .n("APIGatewayClient", "GetRestApisCommand")
    .f(void 0, void 0)
    .ser(se_GetRestApisCommand)
    .de(de_GetRestApisCommand)
    .build() {
}

class GetSdkCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("BackplaneControlService", "GetSdk", {})
    .n("APIGatewayClient", "GetSdkCommand")
    .f(void 0, void 0)
    .ser(se_GetSdkCommand)
    .de(de_GetSdkCommand)
    .build() {
}

class GetSdkTypeCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("BackplaneControlService", "GetSdkType", {})
    .n("APIGatewayClient", "GetSdkTypeCommand")
    .f(void 0, void 0)
    .ser(se_GetSdkTypeCommand)
    .de(de_GetSdkTypeCommand)
    .build() {
}

class GetSdkTypesCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("BackplaneControlService", "GetSdkTypes", {})
    .n("APIGatewayClient", "GetSdkTypesCommand")
    .f(void 0, void 0)
    .ser(se_GetSdkTypesCommand)
    .de(de_GetSdkTypesCommand)
    .build() {
}

class GetStageCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("BackplaneControlService", "GetStage", {})
    .n("APIGatewayClient", "GetStageCommand")
    .f(void 0, void 0)
    .ser(se_GetStageCommand)
    .de(de_GetStageCommand)
    .build() {
}

class GetStagesCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("BackplaneControlService", "GetStages", {})
    .n("APIGatewayClient", "GetStagesCommand")
    .f(void 0, void 0)
    .ser(se_GetStagesCommand)
    .de(de_GetStagesCommand)
    .build() {
}

class GetTagsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("BackplaneControlService", "GetTags", {})
    .n("APIGatewayClient", "GetTagsCommand")
    .f(void 0, void 0)
    .ser(se_GetTagsCommand)
    .de(de_GetTagsCommand)
    .build() {
}

class GetUsageCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("BackplaneControlService", "GetUsage", {})
    .n("APIGatewayClient", "GetUsageCommand")
    .f(void 0, void 0)
    .ser(se_GetUsageCommand)
    .de(de_GetUsageCommand)
    .build() {
}

class GetUsagePlanCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("BackplaneControlService", "GetUsagePlan", {})
    .n("APIGatewayClient", "GetUsagePlanCommand")
    .f(void 0, void 0)
    .ser(se_GetUsagePlanCommand)
    .de(de_GetUsagePlanCommand)
    .build() {
}

class GetUsagePlanKeyCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("BackplaneControlService", "GetUsagePlanKey", {})
    .n("APIGatewayClient", "GetUsagePlanKeyCommand")
    .f(void 0, void 0)
    .ser(se_GetUsagePlanKeyCommand)
    .de(de_GetUsagePlanKeyCommand)
    .build() {
}

class GetUsagePlanKeysCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("BackplaneControlService", "GetUsagePlanKeys", {})
    .n("APIGatewayClient", "GetUsagePlanKeysCommand")
    .f(void 0, void 0)
    .ser(se_GetUsagePlanKeysCommand)
    .de(de_GetUsagePlanKeysCommand)
    .build() {
}

class GetUsagePlansCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("BackplaneControlService", "GetUsagePlans", {})
    .n("APIGatewayClient", "GetUsagePlansCommand")
    .f(void 0, void 0)
    .ser(se_GetUsagePlansCommand)
    .de(de_GetUsagePlansCommand)
    .build() {
}

class GetVpcLinkCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("BackplaneControlService", "GetVpcLink", {})
    .n("APIGatewayClient", "GetVpcLinkCommand")
    .f(void 0, void 0)
    .ser(se_GetVpcLinkCommand)
    .de(de_GetVpcLinkCommand)
    .build() {
}

class GetVpcLinksCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("BackplaneControlService", "GetVpcLinks", {})
    .n("APIGatewayClient", "GetVpcLinksCommand")
    .f(void 0, void 0)
    .ser(se_GetVpcLinksCommand)
    .de(de_GetVpcLinksCommand)
    .build() {
}

class ImportApiKeysCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("BackplaneControlService", "ImportApiKeys", {})
    .n("APIGatewayClient", "ImportApiKeysCommand")
    .f(void 0, void 0)
    .ser(se_ImportApiKeysCommand)
    .de(de_ImportApiKeysCommand)
    .build() {
}

class ImportDocumentationPartsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("BackplaneControlService", "ImportDocumentationParts", {})
    .n("APIGatewayClient", "ImportDocumentationPartsCommand")
    .f(void 0, void 0)
    .ser(se_ImportDocumentationPartsCommand)
    .de(de_ImportDocumentationPartsCommand)
    .build() {
}

class ImportRestApiCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("BackplaneControlService", "ImportRestApi", {})
    .n("APIGatewayClient", "ImportRestApiCommand")
    .f(void 0, void 0)
    .ser(se_ImportRestApiCommand)
    .de(de_ImportRestApiCommand)
    .build() {
}

class PutGatewayResponseCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("BackplaneControlService", "PutGatewayResponse", {})
    .n("APIGatewayClient", "PutGatewayResponseCommand")
    .f(void 0, void 0)
    .ser(se_PutGatewayResponseCommand)
    .de(de_PutGatewayResponseCommand)
    .build() {
}

class PutIntegrationCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("BackplaneControlService", "PutIntegration", {})
    .n("APIGatewayClient", "PutIntegrationCommand")
    .f(void 0, void 0)
    .ser(se_PutIntegrationCommand)
    .de(de_PutIntegrationCommand)
    .build() {
}

class PutIntegrationResponseCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("BackplaneControlService", "PutIntegrationResponse", {})
    .n("APIGatewayClient", "PutIntegrationResponseCommand")
    .f(void 0, void 0)
    .ser(se_PutIntegrationResponseCommand)
    .de(de_PutIntegrationResponseCommand)
    .build() {
}

class PutMethodCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("BackplaneControlService", "PutMethod", {})
    .n("APIGatewayClient", "PutMethodCommand")
    .f(void 0, void 0)
    .ser(se_PutMethodCommand)
    .de(de_PutMethodCommand)
    .build() {
}

class PutMethodResponseCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("BackplaneControlService", "PutMethodResponse", {})
    .n("APIGatewayClient", "PutMethodResponseCommand")
    .f(void 0, void 0)
    .ser(se_PutMethodResponseCommand)
    .de(de_PutMethodResponseCommand)
    .build() {
}

class PutRestApiCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("BackplaneControlService", "PutRestApi", {})
    .n("APIGatewayClient", "PutRestApiCommand")
    .f(void 0, void 0)
    .ser(se_PutRestApiCommand)
    .de(de_PutRestApiCommand)
    .build() {
}

class RejectDomainNameAccessAssociationCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("BackplaneControlService", "RejectDomainNameAccessAssociation", {})
    .n("APIGatewayClient", "RejectDomainNameAccessAssociationCommand")
    .f(void 0, void 0)
    .ser(se_RejectDomainNameAccessAssociationCommand)
    .de(de_RejectDomainNameAccessAssociationCommand)
    .build() {
}

class TagResourceCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("BackplaneControlService", "TagResource", {})
    .n("APIGatewayClient", "TagResourceCommand")
    .f(void 0, void 0)
    .ser(se_TagResourceCommand)
    .de(de_TagResourceCommand)
    .build() {
}

class TestInvokeAuthorizerCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("BackplaneControlService", "TestInvokeAuthorizer", {})
    .n("APIGatewayClient", "TestInvokeAuthorizerCommand")
    .f(void 0, void 0)
    .ser(se_TestInvokeAuthorizerCommand)
    .de(de_TestInvokeAuthorizerCommand)
    .build() {
}

class TestInvokeMethodCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("BackplaneControlService", "TestInvokeMethod", {})
    .n("APIGatewayClient", "TestInvokeMethodCommand")
    .f(void 0, void 0)
    .ser(se_TestInvokeMethodCommand)
    .de(de_TestInvokeMethodCommand)
    .build() {
}

class UntagResourceCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("BackplaneControlService", "UntagResource", {})
    .n("APIGatewayClient", "UntagResourceCommand")
    .f(void 0, void 0)
    .ser(se_UntagResourceCommand)
    .de(de_UntagResourceCommand)
    .build() {
}

class UpdateAccountCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("BackplaneControlService", "UpdateAccount", {})
    .n("APIGatewayClient", "UpdateAccountCommand")
    .f(void 0, void 0)
    .ser(se_UpdateAccountCommand)
    .de(de_UpdateAccountCommand)
    .build() {
}

class UpdateApiKeyCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("BackplaneControlService", "UpdateApiKey", {})
    .n("APIGatewayClient", "UpdateApiKeyCommand")
    .f(void 0, void 0)
    .ser(se_UpdateApiKeyCommand)
    .de(de_UpdateApiKeyCommand)
    .build() {
}

class UpdateAuthorizerCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("BackplaneControlService", "UpdateAuthorizer", {})
    .n("APIGatewayClient", "UpdateAuthorizerCommand")
    .f(void 0, void 0)
    .ser(se_UpdateAuthorizerCommand)
    .de(de_UpdateAuthorizerCommand)
    .build() {
}

class UpdateBasePathMappingCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("BackplaneControlService", "UpdateBasePathMapping", {})
    .n("APIGatewayClient", "UpdateBasePathMappingCommand")
    .f(void 0, void 0)
    .ser(se_UpdateBasePathMappingCommand)
    .de(de_UpdateBasePathMappingCommand)
    .build() {
}

class UpdateClientCertificateCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("BackplaneControlService", "UpdateClientCertificate", {})
    .n("APIGatewayClient", "UpdateClientCertificateCommand")
    .f(void 0, void 0)
    .ser(se_UpdateClientCertificateCommand)
    .de(de_UpdateClientCertificateCommand)
    .build() {
}

class UpdateDeploymentCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("BackplaneControlService", "UpdateDeployment", {})
    .n("APIGatewayClient", "UpdateDeploymentCommand")
    .f(void 0, void 0)
    .ser(se_UpdateDeploymentCommand)
    .de(de_UpdateDeploymentCommand)
    .build() {
}

class UpdateDocumentationPartCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("BackplaneControlService", "UpdateDocumentationPart", {})
    .n("APIGatewayClient", "UpdateDocumentationPartCommand")
    .f(void 0, void 0)
    .ser(se_UpdateDocumentationPartCommand)
    .de(de_UpdateDocumentationPartCommand)
    .build() {
}

class UpdateDocumentationVersionCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("BackplaneControlService", "UpdateDocumentationVersion", {})
    .n("APIGatewayClient", "UpdateDocumentationVersionCommand")
    .f(void 0, void 0)
    .ser(se_UpdateDocumentationVersionCommand)
    .de(de_UpdateDocumentationVersionCommand)
    .build() {
}

class UpdateDomainNameCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("BackplaneControlService", "UpdateDomainName", {})
    .n("APIGatewayClient", "UpdateDomainNameCommand")
    .f(void 0, void 0)
    .ser(se_UpdateDomainNameCommand)
    .de(de_UpdateDomainNameCommand)
    .build() {
}

class UpdateGatewayResponseCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("BackplaneControlService", "UpdateGatewayResponse", {})
    .n("APIGatewayClient", "UpdateGatewayResponseCommand")
    .f(void 0, void 0)
    .ser(se_UpdateGatewayResponseCommand)
    .de(de_UpdateGatewayResponseCommand)
    .build() {
}

class UpdateIntegrationCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("BackplaneControlService", "UpdateIntegration", {})
    .n("APIGatewayClient", "UpdateIntegrationCommand")
    .f(void 0, void 0)
    .ser(se_UpdateIntegrationCommand)
    .de(de_UpdateIntegrationCommand)
    .build() {
}

class UpdateIntegrationResponseCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("BackplaneControlService", "UpdateIntegrationResponse", {})
    .n("APIGatewayClient", "UpdateIntegrationResponseCommand")
    .f(void 0, void 0)
    .ser(se_UpdateIntegrationResponseCommand)
    .de(de_UpdateIntegrationResponseCommand)
    .build() {
}

class UpdateMethodCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("BackplaneControlService", "UpdateMethod", {})
    .n("APIGatewayClient", "UpdateMethodCommand")
    .f(void 0, void 0)
    .ser(se_UpdateMethodCommand)
    .de(de_UpdateMethodCommand)
    .build() {
}

class UpdateMethodResponseCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("BackplaneControlService", "UpdateMethodResponse", {})
    .n("APIGatewayClient", "UpdateMethodResponseCommand")
    .f(void 0, void 0)
    .ser(se_UpdateMethodResponseCommand)
    .de(de_UpdateMethodResponseCommand)
    .build() {
}

class UpdateModelCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("BackplaneControlService", "UpdateModel", {})
    .n("APIGatewayClient", "UpdateModelCommand")
    .f(void 0, void 0)
    .ser(se_UpdateModelCommand)
    .de(de_UpdateModelCommand)
    .build() {
}

class UpdateRequestValidatorCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("BackplaneControlService", "UpdateRequestValidator", {})
    .n("APIGatewayClient", "UpdateRequestValidatorCommand")
    .f(void 0, void 0)
    .ser(se_UpdateRequestValidatorCommand)
    .de(de_UpdateRequestValidatorCommand)
    .build() {
}

class UpdateResourceCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("BackplaneControlService", "UpdateResource", {})
    .n("APIGatewayClient", "UpdateResourceCommand")
    .f(void 0, void 0)
    .ser(se_UpdateResourceCommand)
    .de(de_UpdateResourceCommand)
    .build() {
}

class UpdateRestApiCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("BackplaneControlService", "UpdateRestApi", {})
    .n("APIGatewayClient", "UpdateRestApiCommand")
    .f(void 0, void 0)
    .ser(se_UpdateRestApiCommand)
    .de(de_UpdateRestApiCommand)
    .build() {
}

class UpdateStageCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("BackplaneControlService", "UpdateStage", {})
    .n("APIGatewayClient", "UpdateStageCommand")
    .f(void 0, void 0)
    .ser(se_UpdateStageCommand)
    .de(de_UpdateStageCommand)
    .build() {
}

class UpdateUsageCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("BackplaneControlService", "UpdateUsage", {})
    .n("APIGatewayClient", "UpdateUsageCommand")
    .f(void 0, void 0)
    .ser(se_UpdateUsageCommand)
    .de(de_UpdateUsageCommand)
    .build() {
}

class UpdateUsagePlanCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("BackplaneControlService", "UpdateUsagePlan", {})
    .n("APIGatewayClient", "UpdateUsagePlanCommand")
    .f(void 0, void 0)
    .ser(se_UpdateUsagePlanCommand)
    .de(de_UpdateUsagePlanCommand)
    .build() {
}

class UpdateVpcLinkCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("BackplaneControlService", "UpdateVpcLink", {})
    .n("APIGatewayClient", "UpdateVpcLinkCommand")
    .f(void 0, void 0)
    .ser(se_UpdateVpcLinkCommand)
    .de(de_UpdateVpcLinkCommand)
    .build() {
}

const commands = {
    CreateApiKeyCommand,
    CreateAuthorizerCommand,
    CreateBasePathMappingCommand,
    CreateDeploymentCommand,
    CreateDocumentationPartCommand,
    CreateDocumentationVersionCommand,
    CreateDomainNameCommand,
    CreateDomainNameAccessAssociationCommand,
    CreateModelCommand,
    CreateRequestValidatorCommand,
    CreateResourceCommand,
    CreateRestApiCommand,
    CreateStageCommand,
    CreateUsagePlanCommand,
    CreateUsagePlanKeyCommand,
    CreateVpcLinkCommand,
    DeleteApiKeyCommand,
    DeleteAuthorizerCommand,
    DeleteBasePathMappingCommand,
    DeleteClientCertificateCommand,
    DeleteDeploymentCommand,
    DeleteDocumentationPartCommand,
    DeleteDocumentationVersionCommand,
    DeleteDomainNameCommand,
    DeleteDomainNameAccessAssociationCommand,
    DeleteGatewayResponseCommand,
    DeleteIntegrationCommand,
    DeleteIntegrationResponseCommand,
    DeleteMethodCommand,
    DeleteMethodResponseCommand,
    DeleteModelCommand,
    DeleteRequestValidatorCommand,
    DeleteResourceCommand,
    DeleteRestApiCommand,
    DeleteStageCommand,
    DeleteUsagePlanCommand,
    DeleteUsagePlanKeyCommand,
    DeleteVpcLinkCommand,
    FlushStageAuthorizersCacheCommand,
    FlushStageCacheCommand,
    GenerateClientCertificateCommand,
    GetAccountCommand,
    GetApiKeyCommand,
    GetApiKeysCommand,
    GetAuthorizerCommand,
    GetAuthorizersCommand,
    GetBasePathMappingCommand,
    GetBasePathMappingsCommand,
    GetClientCertificateCommand,
    GetClientCertificatesCommand,
    GetDeploymentCommand,
    GetDeploymentsCommand,
    GetDocumentationPartCommand,
    GetDocumentationPartsCommand,
    GetDocumentationVersionCommand,
    GetDocumentationVersionsCommand,
    GetDomainNameCommand,
    GetDomainNameAccessAssociationsCommand,
    GetDomainNamesCommand,
    GetExportCommand,
    GetGatewayResponseCommand,
    GetGatewayResponsesCommand,
    GetIntegrationCommand,
    GetIntegrationResponseCommand,
    GetMethodCommand,
    GetMethodResponseCommand,
    GetModelCommand,
    GetModelsCommand,
    GetModelTemplateCommand,
    GetRequestValidatorCommand,
    GetRequestValidatorsCommand,
    GetResourceCommand,
    GetResourcesCommand,
    GetRestApiCommand,
    GetRestApisCommand,
    GetSdkCommand,
    GetSdkTypeCommand,
    GetSdkTypesCommand,
    GetStageCommand,
    GetStagesCommand,
    GetTagsCommand,
    GetUsageCommand,
    GetUsagePlanCommand,
    GetUsagePlanKeyCommand,
    GetUsagePlanKeysCommand,
    GetUsagePlansCommand,
    GetVpcLinkCommand,
    GetVpcLinksCommand,
    ImportApiKeysCommand,
    ImportDocumentationPartsCommand,
    ImportRestApiCommand,
    PutGatewayResponseCommand,
    PutIntegrationCommand,
    PutIntegrationResponseCommand,
    PutMethodCommand,
    PutMethodResponseCommand,
    PutRestApiCommand,
    RejectDomainNameAccessAssociationCommand,
    TagResourceCommand,
    TestInvokeAuthorizerCommand,
    TestInvokeMethodCommand,
    UntagResourceCommand,
    UpdateAccountCommand,
    UpdateApiKeyCommand,
    UpdateAuthorizerCommand,
    UpdateBasePathMappingCommand,
    UpdateClientCertificateCommand,
    UpdateDeploymentCommand,
    UpdateDocumentationPartCommand,
    UpdateDocumentationVersionCommand,
    UpdateDomainNameCommand,
    UpdateGatewayResponseCommand,
    UpdateIntegrationCommand,
    UpdateIntegrationResponseCommand,
    UpdateMethodCommand,
    UpdateMethodResponseCommand,
    UpdateModelCommand,
    UpdateRequestValidatorCommand,
    UpdateResourceCommand,
    UpdateRestApiCommand,
    UpdateStageCommand,
    UpdateUsageCommand,
    UpdateUsagePlanCommand,
    UpdateVpcLinkCommand,
};
class APIGateway extends APIGatewayClient {
}
smithyClient.createAggregatedClient(commands, APIGateway);

const paginateGetApiKeys = core.createPaginator(APIGatewayClient, GetApiKeysCommand, "position", "position", "limit");

const paginateGetBasePathMappings = core.createPaginator(APIGatewayClient, GetBasePathMappingsCommand, "position", "position", "limit");

const paginateGetClientCertificates = core.createPaginator(APIGatewayClient, GetClientCertificatesCommand, "position", "position", "limit");

const paginateGetDeployments = core.createPaginator(APIGatewayClient, GetDeploymentsCommand, "position", "position", "limit");

const paginateGetDomainNames = core.createPaginator(APIGatewayClient, GetDomainNamesCommand, "position", "position", "limit");

const paginateGetModels = core.createPaginator(APIGatewayClient, GetModelsCommand, "position", "position", "limit");

const paginateGetResources = core.createPaginator(APIGatewayClient, GetResourcesCommand, "position", "position", "limit");

const paginateGetRestApis = core.createPaginator(APIGatewayClient, GetRestApisCommand, "position", "position", "limit");

const paginateGetUsage = core.createPaginator(APIGatewayClient, GetUsageCommand, "position", "position", "limit");

const paginateGetUsagePlanKeys = core.createPaginator(APIGatewayClient, GetUsagePlanKeysCommand, "position", "position", "limit");

const paginateGetUsagePlans = core.createPaginator(APIGatewayClient, GetUsagePlansCommand, "position", "position", "limit");

const paginateGetVpcLinks = core.createPaginator(APIGatewayClient, GetVpcLinksCommand, "position", "position", "limit");

Object.defineProperty(exports, "$Command", {
    enumerable: true,
    get: function () { return smithyClient.Command; }
});
Object.defineProperty(exports, "__Client", {
    enumerable: true,
    get: function () { return smithyClient.Client; }
});
exports.APIGateway = APIGateway;
exports.APIGatewayClient = APIGatewayClient;
exports.APIGatewayServiceException = APIGatewayServiceException;
exports.AccessAssociationSourceType = AccessAssociationSourceType;
exports.ApiKeySourceType = ApiKeySourceType;
exports.ApiKeysFormat = ApiKeysFormat;
exports.AuthorizerType = AuthorizerType;
exports.BadRequestException = BadRequestException;
exports.CacheClusterSize = CacheClusterSize;
exports.CacheClusterStatus = CacheClusterStatus;
exports.ConflictException = ConflictException;
exports.ConnectionType = ConnectionType;
exports.ContentHandlingStrategy = ContentHandlingStrategy;
exports.CreateApiKeyCommand = CreateApiKeyCommand;
exports.CreateAuthorizerCommand = CreateAuthorizerCommand;
exports.CreateBasePathMappingCommand = CreateBasePathMappingCommand;
exports.CreateDeploymentCommand = CreateDeploymentCommand;
exports.CreateDocumentationPartCommand = CreateDocumentationPartCommand;
exports.CreateDocumentationVersionCommand = CreateDocumentationVersionCommand;
exports.CreateDomainNameAccessAssociationCommand = CreateDomainNameAccessAssociationCommand;
exports.CreateDomainNameCommand = CreateDomainNameCommand;
exports.CreateModelCommand = CreateModelCommand;
exports.CreateRequestValidatorCommand = CreateRequestValidatorCommand;
exports.CreateResourceCommand = CreateResourceCommand;
exports.CreateRestApiCommand = CreateRestApiCommand;
exports.CreateStageCommand = CreateStageCommand;
exports.CreateUsagePlanCommand = CreateUsagePlanCommand;
exports.CreateUsagePlanKeyCommand = CreateUsagePlanKeyCommand;
exports.CreateVpcLinkCommand = CreateVpcLinkCommand;
exports.DeleteApiKeyCommand = DeleteApiKeyCommand;
exports.DeleteAuthorizerCommand = DeleteAuthorizerCommand;
exports.DeleteBasePathMappingCommand = DeleteBasePathMappingCommand;
exports.DeleteClientCertificateCommand = DeleteClientCertificateCommand;
exports.DeleteDeploymentCommand = DeleteDeploymentCommand;
exports.DeleteDocumentationPartCommand = DeleteDocumentationPartCommand;
exports.DeleteDocumentationVersionCommand = DeleteDocumentationVersionCommand;
exports.DeleteDomainNameAccessAssociationCommand = DeleteDomainNameAccessAssociationCommand;
exports.DeleteDomainNameCommand = DeleteDomainNameCommand;
exports.DeleteGatewayResponseCommand = DeleteGatewayResponseCommand;
exports.DeleteIntegrationCommand = DeleteIntegrationCommand;
exports.DeleteIntegrationResponseCommand = DeleteIntegrationResponseCommand;
exports.DeleteMethodCommand = DeleteMethodCommand;
exports.DeleteMethodResponseCommand = DeleteMethodResponseCommand;
exports.DeleteModelCommand = DeleteModelCommand;
exports.DeleteRequestValidatorCommand = DeleteRequestValidatorCommand;
exports.DeleteResourceCommand = DeleteResourceCommand;
exports.DeleteRestApiCommand = DeleteRestApiCommand;
exports.DeleteStageCommand = DeleteStageCommand;
exports.DeleteUsagePlanCommand = DeleteUsagePlanCommand;
exports.DeleteUsagePlanKeyCommand = DeleteUsagePlanKeyCommand;
exports.DeleteVpcLinkCommand = DeleteVpcLinkCommand;
exports.DocumentationPartType = DocumentationPartType;
exports.DomainNameStatus = DomainNameStatus;
exports.EndpointType = EndpointType;
exports.FlushStageAuthorizersCacheCommand = FlushStageAuthorizersCacheCommand;
exports.FlushStageCacheCommand = FlushStageCacheCommand;
exports.GatewayResponseType = GatewayResponseType;
exports.GenerateClientCertificateCommand = GenerateClientCertificateCommand;
exports.GetAccountCommand = GetAccountCommand;
exports.GetApiKeyCommand = GetApiKeyCommand;
exports.GetApiKeysCommand = GetApiKeysCommand;
exports.GetAuthorizerCommand = GetAuthorizerCommand;
exports.GetAuthorizersCommand = GetAuthorizersCommand;
exports.GetBasePathMappingCommand = GetBasePathMappingCommand;
exports.GetBasePathMappingsCommand = GetBasePathMappingsCommand;
exports.GetClientCertificateCommand = GetClientCertificateCommand;
exports.GetClientCertificatesCommand = GetClientCertificatesCommand;
exports.GetDeploymentCommand = GetDeploymentCommand;
exports.GetDeploymentsCommand = GetDeploymentsCommand;
exports.GetDocumentationPartCommand = GetDocumentationPartCommand;
exports.GetDocumentationPartsCommand = GetDocumentationPartsCommand;
exports.GetDocumentationVersionCommand = GetDocumentationVersionCommand;
exports.GetDocumentationVersionsCommand = GetDocumentationVersionsCommand;
exports.GetDomainNameAccessAssociationsCommand = GetDomainNameAccessAssociationsCommand;
exports.GetDomainNameCommand = GetDomainNameCommand;
exports.GetDomainNamesCommand = GetDomainNamesCommand;
exports.GetExportCommand = GetExportCommand;
exports.GetGatewayResponseCommand = GetGatewayResponseCommand;
exports.GetGatewayResponsesCommand = GetGatewayResponsesCommand;
exports.GetIntegrationCommand = GetIntegrationCommand;
exports.GetIntegrationResponseCommand = GetIntegrationResponseCommand;
exports.GetMethodCommand = GetMethodCommand;
exports.GetMethodResponseCommand = GetMethodResponseCommand;
exports.GetModelCommand = GetModelCommand;
exports.GetModelTemplateCommand = GetModelTemplateCommand;
exports.GetModelsCommand = GetModelsCommand;
exports.GetRequestValidatorCommand = GetRequestValidatorCommand;
exports.GetRequestValidatorsCommand = GetRequestValidatorsCommand;
exports.GetResourceCommand = GetResourceCommand;
exports.GetResourcesCommand = GetResourcesCommand;
exports.GetRestApiCommand = GetRestApiCommand;
exports.GetRestApisCommand = GetRestApisCommand;
exports.GetSdkCommand = GetSdkCommand;
exports.GetSdkTypeCommand = GetSdkTypeCommand;
exports.GetSdkTypesCommand = GetSdkTypesCommand;
exports.GetStageCommand = GetStageCommand;
exports.GetStagesCommand = GetStagesCommand;
exports.GetTagsCommand = GetTagsCommand;
exports.GetUsageCommand = GetUsageCommand;
exports.GetUsagePlanCommand = GetUsagePlanCommand;
exports.GetUsagePlanKeyCommand = GetUsagePlanKeyCommand;
exports.GetUsagePlanKeysCommand = GetUsagePlanKeysCommand;
exports.GetUsagePlansCommand = GetUsagePlansCommand;
exports.GetVpcLinkCommand = GetVpcLinkCommand;
exports.GetVpcLinksCommand = GetVpcLinksCommand;
exports.ImportApiKeysCommand = ImportApiKeysCommand;
exports.ImportDocumentationPartsCommand = ImportDocumentationPartsCommand;
exports.ImportRestApiCommand = ImportRestApiCommand;
exports.IntegrationType = IntegrationType;
exports.IpAddressType = IpAddressType;
exports.LimitExceededException = LimitExceededException;
exports.LocationStatusType = LocationStatusType;
exports.NotFoundException = NotFoundException;
exports.Op = Op;
exports.PutGatewayResponseCommand = PutGatewayResponseCommand;
exports.PutIntegrationCommand = PutIntegrationCommand;
exports.PutIntegrationResponseCommand = PutIntegrationResponseCommand;
exports.PutMethodCommand = PutMethodCommand;
exports.PutMethodResponseCommand = PutMethodResponseCommand;
exports.PutMode = PutMode;
exports.PutRestApiCommand = PutRestApiCommand;
exports.QuotaPeriodType = QuotaPeriodType;
exports.RejectDomainNameAccessAssociationCommand = RejectDomainNameAccessAssociationCommand;
exports.ResourceOwner = ResourceOwner;
exports.RoutingMode = RoutingMode;
exports.SecurityPolicy = SecurityPolicy;
exports.ServiceUnavailableException = ServiceUnavailableException;
exports.TagResourceCommand = TagResourceCommand;
exports.TestInvokeAuthorizerCommand = TestInvokeAuthorizerCommand;
exports.TestInvokeMethodCommand = TestInvokeMethodCommand;
exports.TooManyRequestsException = TooManyRequestsException;
exports.UnauthorizedCacheControlHeaderStrategy = UnauthorizedCacheControlHeaderStrategy;
exports.UnauthorizedException = UnauthorizedException;
exports.UntagResourceCommand = UntagResourceCommand;
exports.UpdateAccountCommand = UpdateAccountCommand;
exports.UpdateApiKeyCommand = UpdateApiKeyCommand;
exports.UpdateAuthorizerCommand = UpdateAuthorizerCommand;
exports.UpdateBasePathMappingCommand = UpdateBasePathMappingCommand;
exports.UpdateClientCertificateCommand = UpdateClientCertificateCommand;
exports.UpdateDeploymentCommand = UpdateDeploymentCommand;
exports.UpdateDocumentationPartCommand = UpdateDocumentationPartCommand;
exports.UpdateDocumentationVersionCommand = UpdateDocumentationVersionCommand;
exports.UpdateDomainNameCommand = UpdateDomainNameCommand;
exports.UpdateGatewayResponseCommand = UpdateGatewayResponseCommand;
exports.UpdateIntegrationCommand = UpdateIntegrationCommand;
exports.UpdateIntegrationResponseCommand = UpdateIntegrationResponseCommand;
exports.UpdateMethodCommand = UpdateMethodCommand;
exports.UpdateMethodResponseCommand = UpdateMethodResponseCommand;
exports.UpdateModelCommand = UpdateModelCommand;
exports.UpdateRequestValidatorCommand = UpdateRequestValidatorCommand;
exports.UpdateResourceCommand = UpdateResourceCommand;
exports.UpdateRestApiCommand = UpdateRestApiCommand;
exports.UpdateStageCommand = UpdateStageCommand;
exports.UpdateUsageCommand = UpdateUsageCommand;
exports.UpdateUsagePlanCommand = UpdateUsagePlanCommand;
exports.UpdateVpcLinkCommand = UpdateVpcLinkCommand;
exports.VpcLinkStatus = VpcLinkStatus;
exports.paginateGetApiKeys = paginateGetApiKeys;
exports.paginateGetBasePathMappings = paginateGetBasePathMappings;
exports.paginateGetClientCertificates = paginateGetClientCertificates;
exports.paginateGetDeployments = paginateGetDeployments;
exports.paginateGetDomainNames = paginateGetDomainNames;
exports.paginateGetModels = paginateGetModels;
exports.paginateGetResources = paginateGetResources;
exports.paginateGetRestApis = paginateGetRestApis;
exports.paginateGetUsage = paginateGetUsage;
exports.paginateGetUsagePlanKeys = paginateGetUsagePlanKeys;
exports.paginateGetUsagePlans = paginateGetUsagePlans;
exports.paginateGetVpcLinks = paginateGetVpcLinks;

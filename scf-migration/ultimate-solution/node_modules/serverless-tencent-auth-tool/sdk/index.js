const serverlessTencentTools = require('serverless-tencent-tools')
const TencentLogin = serverlessTencentTools.Login
const { GetUserInformation } = serverlessTencentTools.Cam
const { GetUserAuthInfo } = serverlessTencentTools.Account
const { DataReport } = serverlessTencentTools.Others.DataReport
const fs = require('fs')
const QRCode = require('qrcode')

class Auth {
  async doAuth(AuthData, inputs = {}) {
    const reportData = {
      name: inputs.client,
      remark: inputs.remark,
      project: inputs.project,
      action: inputs.action
    }

    try {
      new DataReport().report(reportData)
    } catch (e) {}

    let tencentUserInfo
    if (!AuthData || !AuthData.SecretId || !AuthData.SecretKey) {
      tencentUserInfo = await this.getTempKey()
    }

    tencentUserInfo = tencentUserInfo || AuthData
    const userInfo = await this.getUserInformation(tencentUserInfo)
    tencentUserInfo.AppId = userInfo.AppId
    tencentUserInfo.OwnerUin = userInfo.OwnerUin

    try {
      reportData.uin = userInfo.OwnerUin
      new DataReport().report(reportData)
    } catch (e) {}

    if (this.getUserAuth(userInfo.OwnerUin, inputs)) {
      return tencentUserInfo
    }
  }

  async getUserAuth(uin, inputs = {}) {
    try {
      const getUserAuthInfo = new GetUserAuthInfo()
      for (let i = 0; i < 3; i++) {
        const result = await getUserAuthInfo.isAuth(uin, inputs)
        if (result && result['errorCode'] != -1) {
          if (result['Error'] == true) {
            console.log('Failed to get real name authentication result.')
            process.exit(-1)
          } else {
            if (result['Message']['Authentication'] == 1) {
              return true
            }
            const verifyUrl = 'https://cloud.tencent.com/verify/identity'
            console.log(
              "You don't have real name authentication yet. You can open the url or scan QR code for real name authentication."
            )
            console.log('Real name authentication url: ')
            console.log('https://console.cloud.tencent.com/developer/auth')
            console.log('Real name authentication QR code: ')
            QRCode.toString(verifyUrl, { type: 'terminal' }, function(err, url) {
              console.log(url)
            })
            console.log('Please re-operate after real name authentication.')
            process.exit(-1)
          }
        }
      }
      console.log('Failed to get real name authentication result.')
      process.exit(-1)
    } catch (e) {
      console.log(e)
      process.exit(-1)
    }
  }

  async getUserInformation(auth) {
    try {
      const userInformation = new GetUserInformation()
      const userInfo = await userInformation.getUserInformation(auth)
      return { AppId: userInfo.AppId, OwnerUin: userInfo.OwnerUin }
    } catch (e) {
      console.log(e)
      process.exit(-1)
    }
  }

  async waitAction() {
    while (true) {
      try {
        const tencent_credentials_read = JSON.parse(await fs.readFileSync('./.env_temp', 'utf8'))
        if (
          Date.now() / 1000 - tencent_credentials_read.timestamp <= 6000 &&
          tencent_credentials_read.AppId
        ) {
          return tencent_credentials_read
        }
        await this.sleep(1000)
      } catch (e) {
        await this.sleep(1000)
      }
    }
  }

  async doLock() {
    try {
      const cache = await fs.readFileSync('./.env_temp', 'utf8')
      let thisPid = 0
      let temp_str_list = 0
      const { pid } = process
      try {
        temp_str_list = cache.split('----')
        if (temp_str_list.length == 2) {
          thisPid = +temp_str_list[0]
          if (thisPid != pid) {
            return await this.doLogin()
          }
          return await this.waitAction()
        }
        return await this.doLogin()
      } catch (e) {
        return await this.doLogin()
      }
    } catch (e) {
      return await this.doLogin()
    }
  }

  async doLogin() {
    await fs.writeFileSync('./.env_temp', process.pid + '----' + process.uptime())
    const login = new TencentLogin()
    const tencent_credentials = await login.login()
    if (tencent_credentials) {
      tencent_credentials.timestamp = Date.now() / 1000
      try {
        const tencent = {
          SecretId: tencent_credentials.secret_id,
          SecretKey: tencent_credentials.secret_key,
          AppId: tencent_credentials.appid,
          token: tencent_credentials.token,
          expired: tencent_credentials.expired,
          signature: tencent_credentials.signature,
          uuid: tencent_credentials.uuid,
          timestamp: tencent_credentials.timestamp
        }
        await fs.writeFileSync('./.env_temp', JSON.stringify(tencent))
        return tencent
      } catch (e) {
        console.log('Error getting temporary key: ' + e)
        process.exit(-1)
      }
    } else {
      console.log('Error getting temporary key')
      process.exit(-1)
    }
  }

  async sleep(ms) {
    return new Promise((resolve) => {
      setTimeout(resolve, ms)
    })
  }

  async getTempKey() {
    let cache
    try {
      cache = await fs.readFileSync('./.env_temp', 'utf8')
      try {
        const tencent_credentials_read = JSON.parse(cache)
        if (
          Date.now() / 1000 - tencent_credentials_read.timestamp <= 6000 &&
          tencent_credentials_read.AppId
        ) {
          return tencent_credentials_read
        }
        const login = new TencentLogin()
        const tencent_credentials_flush = await login.flush(
          tencent_credentials_read.uuid,
          tencent_credentials_read.expired,
          tencent_credentials_read.signature,
          tencent_credentials_read.AppId
        )
        if (tencent_credentials_flush) {
          const tencent = {}
          tencent.SecretId = tencent_credentials_flush.secret_id
          tencent.SecretKey = tencent_credentials_flush.secret_key
          tencent.AppId = tencent_credentials_flush.appid
          tencent.token = tencent_credentials_flush.token
          tencent.expired = tencent_credentials_flush.expired
          tencent.signature = tencent_credentials_flush.signature
          tencent.uuid = tencent_credentials_read.uuid
          tencent.timestamp = Date.now() / 1000
          await fs.writeFileSync('./.env_temp', JSON.stringify(tencent))
          return tencent
        }
        return await this.doLock()
      } catch (e) {
        return await this.doLock()
      }
    } catch (e) {
      return await this.doLock()
    }
    return await this.doLock()
  }
}

module.exports = Auth
